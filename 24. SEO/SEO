////=================================================////
////                                                 ////
////                       SEO                       ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////

    
    # 





////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Теория SEO


  # X.  Рецепты и наработки


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////





X1. Seo и Knockout + Laravel

--------------------------------------
Подоглавление:

  # Ссылки
  # Проблема
  # Суть решения проблемы кратко
  # Проверка результатов с помощью Google Console
  # Методология решения проблемы, при работе с Laravel
    
    ▪ Только там, где это действительно необходимо
    ▪ Не отображаемые элементы
      ▪ Санкции поисковиков
      ▪ Избегать скрытых элементов при отдаче HTML с сервера
      ▪ Тактика работы со скрытыми элементами
      ▪ Проблема "мерцания" при загрузке решается "панелью загрузки"
    
    ▪ Работа с text, value, textValue
      ▪ Если значение не передаётся с сервера
      ▪ Если значение передаётся с сервера
    
    ▪ Работа с foreach
      ▪ Унификация передаваемых для foreach с сервера данных
      ▪ Вывод foreach-блока knockout'ом

--------------------------------------

> Ссылки

  # Google Search Console
      https://www.google.com/webmasters/verification/add-resource-ac
      https://support.google.com/webmasters/answer/6066468?hl=ru    

> Проблема
  - Поисковые роботы Google и Яндекс не выполняют JS.
  - Они находят лишь тот HTML, который изначально отдал сервер.
  - Затем они уходят, и лишь после этого выполняется JS документа.
  - И knockout отрабатывает все свои связки, text, foreach, и т.д.
  - Из-за этого роботы упускают много важных ресурсов документа.
  - И у подобного рода документов возникают проблемы с SEO.

> Суть решения проблемы кратко

  1. Отдаём всё необходимое роботам в HTML
    - Сервер отдаёт HTML, в котором есть всё, нужное роботу.
    - Робот считывает этот HTML.
    - Робот уходит, довольный.
    - Проблем с SEO нет.

  2. Потом передаём управление knockout'у
    - Инициализируем ko-наблюдаемые данными из HTML, и т.д.

> Проверка результатов с помощью Google Console
  - Ссылка на неё есть выше в ссылках.
  - Она покажет, как роботы воспринимают документ.
  - Надо иметь привязанный к домену IP сервера.

> Методология решения проблемы, при работе с Laravel

  • Только там, где это действительно необходимо
    - Есть вещи, которые действительно влияют на SEO.
    - А есть вещи, которые особо на SEO не влияют.
    - При работе с последними, не стоит напрягатсья,
      и применять описанную методологию.

  • Не отображаемые элементы

    ▪ Санкции поисковиков
      - Поисковики не любят скрытые элементы ("display: none").
      - И могут применить санкции.

    ▪ Избегать скрытых элементов при отдаче HTML с сервера
      - При начальной отдаче HTML не должно быть скрытых эл-в.
      - Тогда поисковики их и не найдут, и не применят санкции.

    ▪ Тактика работы со скрытыми элементами
      - Показывать все "display: none" эл-ты при загрузке.
      - А после, скрывать с помощью knockout.

    ▪ Проблема "мерцания" при загрузке решается "панелью загрузки"
      - В начальном html элемент не скрыт.
      - Потом, когда выполняется js, он скрывается.
      - Мы имеем эффект "мерцания" элемента при загрузке.
      - Чтобы этого не происходило, надо использовать экран загрузки.
      - Который должен исчезать после полной загрузки страницы и исполнения JS.

  • Работа с text, value, textValue

    ▪ Если значение не передаётся с сервера
      - То надо просто его продублировать.
      - С одной стороны, прописать прямо в HTML.
      - С другой, инициировать им наблюдаемую.

    ▪ Если значение передаётся с сервера
      - То надо в HTML подставить его с помощью blade.
      - И также передать в модель knockout, чтобы
        инициировать им наблюдаемую.

  • Работа с foreach

    ▪ Унификация передаваемых для foreach с сервера данных
      - Надо, чтобы они подходили и для foreach knockout.
      - И, одновременно, для foreach laravel blade.
      - Потому что передавать 2 версии данных для обеих
        технологий не целесообразно.

    ▪ Дублирование foreach-блоков blade'ом и knockout'om

      ▪ Вывод foreach-блока blade'ом
        - И выводится прямо шаблонизатором blade'а.
        - Это то, что видят поисковые роботы.
        - После загрузки документа, он получает "display: none". 

      ▪ Вывод foreach-блока knockout'ом
        - Рядом тоже самое выводится knockout'ом.
        - Содержимое этого блока недоступно поисковым роботам.
        - После загрузки документа, blade-блок скрывается.
        - И остаётся только knockout-блок.






