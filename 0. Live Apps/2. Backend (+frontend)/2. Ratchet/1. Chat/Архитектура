
Архитектура приложения





/* Оглавление
================================*/

  > Задачи и особенности
    > Главная задача
    > База данных
    > Сервер для работы с WebSocket-соединением
    > Клиент
    > Формат передачи данных между клиентом и сервером

  > Установка и начало использования
  > Клиентская часть
  > Серверная часть





/* Задачи и особенности
================================*/

> Главная задача
  > Построить приложение "ЧАТ" на основе нового протокола WebSocket.

> База данных
  > Все сообщения в чате должны сохраняться в базе данных
  > База данных будет состоять из 1 таблицы.
  > В таблице будут следующие столбцы:

    Имя:          Тип:        Дополнительно
    ----------------------------------------------------------
    - id          int         auto_increment
    - timestamp   timestamp
    - nickname    varchar
    - message     varchar

> Сервер для работы с WebSocket-соединением
  > Будет использоваться Ratchet.
  > Для этого будут использованы 3 его компонента:
    - IoServer
    - HttpServer
    - WsServer
  > Сервер будет работать на порте 8080

> Серверная часть
  > Лежит в папке server
  > Состоит из 3-х файлов:
    - install.php       | подготовка базы данных для приложения
    - chat.php          | логика приложения - класс Chat
    - chat-server.php   | Ratchet-сервер для работы с WebSocket-соединениями

> Клиент
  > Почти такой же, как для чата на длинных опросах.
  > Только без элементов, связанных с длинными опросами, заменённых на
    WebSocket-элементы.

> Клиентская часть
  > Лежит в папке client
  > Состоит из 3-х файлов:
    - client.html | html-разметка
    - с.css       | таблицы стилей
    - client.js   | логика клиента на JS

> Формат передачи данных между клиентом и сервером
  > JSON.




/* Установка и начало использования
================================*/

> Перед началом использования на сервере надо 1 раз запустить
  файл install.php.

> Клиенты смогун начать подключаться к Ratchet-серверу только после
  того, как он будет запущен. Для его запуска надо нужно запустить
  с помощью php файл с сервером, например, так (путь надо заменить на путь
  к файлу-серверу):

      php ...путь...\chat-server.php





/* Клиентская часть
================================*/


-----[Подготовка]

1. Подготовить весь необходимый HTML и CSS.
   - В т.ч. должна быть кнопка "очистить", при нажатии на которую окно
     чата полностью очищается.

2. Получить ссылки на нижеуказанные элементы, и сохранить их
		все в объекте refs:
	  - На окно с опубликованными сообщениями
	  - На поле, куда пользователь должен ввести свой nickname
	  - На поле, куда пользователь должен ввести своё сообщение
	  - На кнопку "отправить"
	  - На кнопку "очистить"

3. Написать функцию, которая добавляет новое сообщение в самый верх
		окна с сообщениями. Она должна принимать следующие аргументы:
	 	- Никнэйм
	 	- Дату и время
	 	- Текст сообщения

4. Написать функцию, которая полностью очищает окно чата. В ней:
   - Найти и удалить все HTML-элементы, дочерние для эл-та с id='messageWindow",
     класс которых messageBox


-----[Установка WebSocket-соединения, его настройка, приём сообщений от сервера]

5. Установить WebSocket-соединение с сервером.

6. Назначить функцию-обработчик onopen, которая срабатывает при открытии
   WebSocket-соединения, и в ней выполнить следующее:
   - Написать в консоль: "WebSocket-соединение установлено"
   - Очистить содержимое чата с помощью функции из п.4

7. Назначить функцию-обработчик onclose, которая срабатывает при закрытии
   WebSocket-соединения, и в ней выполнить следующее:
   - Вывести в консоль информацию, чисто/грязно закрыто соединение.
   - Вывести в консоль код закрытия, и причину.

8. Назначить функцию-обработчик onmessage, которая срабатывает при получении
   сообщения из WebSocket-соединения, и в ней выполнить следующее:
   - Получить от сервера JSON-строку с текущим содержимым чата.
   - Десериализовать эту JSON-строку в объект.
   - Пробежаться по собственным св-вам объекта, полученного в п.6,
     и с помощью функции из п.3 вывести все все полученные сообщения
     в окно чата.

9. Назначить функцию-обработчик onerror, которая срабатывает при возникновении
   ошибки в WebSocket-соединении, и в ней выполнить следующее:
   - Написать в консоль, что возникла ошибка, и поступившее сообщение об ошибке.


-----[Настройка кнопки "отправить сообщение"]

10. Назначить функцию-обработчик события onclick кнопке "Отправить".
		В ней выполнить следующее: [11,12]

11. Подготовить для отправки JSON-строку. Отправить надо будет
    значения nickname и message.

12. Послать подготовленную в п.11 JSON-строку в открытое WebSocket-соединение.


-----[Настройка отправки сообщения нажатием клавиши Enter]

13. Назначить функцию-обработчик события onkeydown текстовому полю, в который
    вводят текст сообщения. В ней выполнить следующее: [14,15]

14. Кроссбраузерно получить объект-событие

15. Проверить введенный символ:
    - Если e.keyCode == 13, то выполнить: [11,12]
    - В ином случае завершить работу функции.


-----[Настройка кнопки "очистка чата"]

16. Назначить функцию-обработчик события onclick кнопке "Очистить".
		В ней выполнить следующее: [17]

17. Очистить чат.






/* Серверная часть
================================*/

-----[Подготовка]

1. С помощью Composer установить в папку проекта Ratchet последней версии.

2. Создать файл server\install.php, выполнение которого должно подготавливать
   базу данных к использованию приложения. В нём выполнить следующее:
   [3-7]

3. Подключиться к серверу MySQL.

4. Если еще не существует, создать базу данных ratchetChat.
   И использовать её по умолчанию.

5. Если еще не существует, создать таблицу ratchetChat.chat1.

5.5. Настроить хранимую процедуру populateTable, которая добавляет
     в таблицу базы данных чата ratchetChat.chat1 3 тестовых сообщения.
     но только если эта таблица пуста.
     А именно, надо сделать следующее:
     - Удалить хранимую процедуру populateTable, если существует.
     - Создать хранимую процедуру populateTable.
     - Выполнить эту процедуру.

6. Настроить хранимую процедуру addMessage, которая добавляет
   строку в таблицу. А именно сделать следующее:
   - Удалить хранимую процедуру addMessage, если существует
   - Создать хранимую процедуру addMessage.
     Она должна принимать 3 параметра - timestamp, nickname и message
     Она должна Добавлять в базу данных новую запись вида:
        (NULL, timestamp, nickname, message)

7. Отключиться от MySQL


-----[Создание класса "чат"]

8. Создать файл server\myChat\chat.php в корневой папке проекта.
   Сделать в этом файле следующее: [9-17]

9. Указать, что всё будет происходить в пр.имён myChat

10. Указать псевдонимы для следующих классов Ratchet:
  - use Ratchet\MessageComponentInterface;
  - use Ratchet\ConnectionInterface;

11. Создать класс Chat, который реализует интерфейс MessageComponentInterface.
    Внутри определения класса выполнить следующее: [12-17]

12. Объявить protected переменную - контейнер для хранения всех соединений.

13. Объявить public конструктор, который инициирует переменную из п.6
    объектом \SplObjectStorage.

14. Объявить публичную функцию-обработчик onOpen, которая реализует
   соотв. функцию интерфейса MessageComponentInterface. В ней выполнить
   следующее:
   - Подключиться к серверу MySQL.
   - Извлечь все данные из таблицы ratchetChat.chat1 в массив.
   - Отключиться от MySQL
   - Если массив с результатами пуст, то завершить работу функции
   - Сформировать JSON-строку из извлечённых данных
   - Отправить полученную JSON-строку подключившемуся клиенту
   - Добавить новое подключение в коллекцию clients

15. Объявить публичную функцию-обработчик onClose, которая реализует
   соотв. функцию интерфейса MessageComponentInterface. В ней выполнить
   следующее:
   - Удалить закрытое соединение из коллекции $clients

16. Объявить публичную функцию-обработчик onMessage, которая реализует
    соотв. функцию интерфейса MessageComponentInterface. В ней выполнить
    следующее:
    - Десериализовать полученное от клиента сообщение
    - Подключиться к серверу MySQL.
    - Выполнить процедуру addMessage с полученными от клиента значениями
    - Отключиться от MySQL
    - Сформировать JSON-строку, содержащую следующие данные:
      timestamp, nickname, message
    - Переслать JSON-строку данными (timestamp, nickname, message) всем
      соединениям, в т.ч. самому клиенту.


17. Объявить публичную функцию-обработчик onError, которая реализует
    соотв. функцию интерфейса MessageComponentInterface. В ней выполнить
    следующее:
    - Закрыть соединение


-----[Создание сервера Ratchet]

18. Создать файл server\myChat\chat-server.php в корневой папке проекта.
    Сделать в этом файле следующее: []

19. Назначить 3 псевдонима:
    - use Ratchet\Server\IoServer;
    - use Ratchet\Http\HttpServer;
    - use Ratchet\WebSocket\WsServer;

20. Создать псевдоним для класса chat:
    - use myChat\Chat

21. Подключить файл autoload.php от композера.

22. Создать экземпляр IoServer на порте 8080
    - В него завернуть экземпляр HttpServer
    - В него завернуть экземпляр WsServer
    - А в него завернуть экземпляр класса нашего чата Chat

23. Запустить сервер методом run()


















