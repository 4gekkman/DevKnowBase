// ============================================
// Модуль "m7_nodemakedom_v1" приложения "tree"
// ============================================


/* --------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------


Ссылки:




*****************************************************
Оглавление:

	> О модуле
		> Описание модуля
		> Вход: зависимости модуля
		> Выход: что возвращает модуль

	> Архитектура модуля


*****************************************************


> О модуле

	> Описание модуля
		- Этот модуль является доп. функционалом для модуля "m2_nodeproto".
		- Модуль реализует функцию nodemakedom.
		- Эта функция должна применяться в контексте this объекта-узла дерева,
			созданного из прототипа "m2_nodeproto".
		- Функция создаёт валидную для приложения "tree" DOM-структуру данного
			узла дерева и возвращает ссылку на свежесозданный элемент LI, который
			сам и его содержимое - это и есть DOM-представление данного узла.

	> Вход: зависимости модуля
		- m1_library_v1

	> Выход: что возвращает модуль
		- Ссылку на функцию nodemakedom.
		- Эта функция должна применяться в контексте this объекта-узла дерева,
			созданного из прототипа "m3_treeproto".




> Архитектура модуля


[-----IN. Входы модуля]

IN1.	С помощью функции define определить модуль. Подключить на вход
 			модуля указанные ниже зависимости. Внутри callback-функции
			модуля выполнить: [A, OUT].
			> Зависимости:
				- "m1_library_v1"


[-----A. Создание функции nodemakedom]

a1.	Создать переменную nodemakedom и в ней анонимную функцию:
		Аргументы:
			- нет
		Возвращает:
			- ссылку на свежесозданный DOM-элемент узла дерева LI
		Реализация:
			- Внутри этой функции выполнить следующее: [a2-a7]

a2.	Создать HTML-структуру узла:
		- Создать новый элемент LI и сохранить ссылку на него в переменной LI.
		- В эл-те LI создать новый эл-т I, и сохранить ссылку на него в переменной I1.
		- В эл-те LI создать новый эл-т A, и сохранить ссылку на него в переменной A.
		- В эл-те A создать новый эл-т I, и сохранить ссылку на него в переменной I2.
		- В эл-те A создать новый текстовый узел с текстом this.text, и сохранить
			ссылку на него в переменной T.

a3. Присвоить эл-ту LI все требуемые классы и ID. Для этого
		выполнить следующее: [a3.1 - a3.3]

	a3.1.	Присвоить эл-ту LI атрибут id со значением this.id

	a3.2.	Присвоить эл-ту LI класс "tree-node"

	a3.3. Проверить значение свойства this.state.opened:
				> Если true, то добавить эл-ту LI класс "tree-node-opened"
				> Если false, то добавить эл-ту LI класс "tree-node-closed"

a4. Присвоить эл-ту I1 все требуемые классы и ID. Для этого
		выполнить следующее: [e4.1 - e4.2]

	a4.1.	Присвоить эл-ту I1 класс "tree-icon"

	a4.2. Проверить значение свойства this.state.opened:
				> Если true, то добавить эл-ту I1 класс "tree-icon-opened"
				> Если false, то добавить эл-ту I1 класс "tree-icon-closed"

a5. Присвоить эл-ту A все требуемые классы и ID. Для этого
		выполнить следующее: [a5.1 - a5.2]

	a5.1.	Присвоить эл-ту A класс "tree-anchor"

	a5.2. Проверить значение свойства this.state.selected:
				> Если true, то добавить эл-ту A класс "tree-selected"
				> Если false, то добавить эл-ту A класс "tree-selected"

a6. Присвоить эл-ту I2 все требуемые классы и ID. Для этого
		выполнить следующее: [a6.1]

	a6.1.	Присвоить эл-ту I2 классы "tree-icon" и "tree-icon-theme"


a7. Вернуть ссылку на элемент LI.


[-----OUT. Выходы модуля]

OUT1.	Вернуть ссылку на функцию nodemakedom



*/

/* --------------------------------------------------
---------------- Р Е А Л И З А Ц И Я ----------------*/


//[-----IN. Входы модуля]

//IN1.	С помощью функции define определить модуль. Подключить на вход
// 			модуля указанные ниже зависимости. Внутри callback-функции
//			модуля выполнить: [A, OUT].
//			> Зависимости:
//				- "m1_library_v1"
define(["m1_library/m1_library_v1"],
		function(library){

		console.log('Загрузился модуль "m7_nodemakedom_v1"');


//[-----A. Создание функции nodemakedom]

//a1.	Создать переменную nodemakedom и в ней анонимную функцию:
//		Аргументы:
//			- нет
//		Возвращает:
//			- ссылку на свежесозданный DOM-элемент узла дерева LI
//		Реализация:
//			- Внутри этой функции выполнить следующее: [a2-a7]
	var nodemakedom = function() {


	//a2.	Создать HTML-структуру узла:
	//		- Создать новый элемент LI и сохранить ссылку на него в переменной LI.
	//		- В эл-те LI создать новый эл-т I, и сохранить ссылку на него в переменной I1.
	//		- В эл-те LI создать новый эл-т A, и сохранить ссылку на него в переменной A.
	//		- В эл-те A создать новый эл-т I, и сохранить ссылку на него в переменной I2.
	//		- В эл-те A создать новый текстовый узел с текстом this.text, и сохранить
	//			ссылку на него в переменной T.

		// Создать новый элемент LI и сохранить ссылку на него в переменной LI.
		var LI = document.createElement('LI');

		// В эл-те LI создать новый эл-т I, и сохранить ссылку на него в переменной I1.
		var I1 = document.createElement('I');
		LI.appendChild(I1);

		// В эл-те LI создать новый эл-т A, и сохранить ссылку на него в переменной A.
		var A = document.createElement('A');
		LI.appendChild(A);

		// В эл-те A создать новый эл-т I, и сохранить ссылку на него в переменной I2.
		var I2 = document.createElement('I');
		A.appendChild(I2);

		// В эл-те A создать новый текстовый узел с текстом this.text, и сохранить
		// ссылку на него в переменной T.
		var T = document.createTextNode(this.text);
		A.appendChild(T);


	//a3. Присвоить эл-ту LI все требуемые классы и ID. Для этого
	//		выполнить следующее: [e3.1 - e3.3]

		//e3.1.	Присвоить эл-ту LI атрибут id со значением this.id
		LI.id = this.id;

		//e3.2.	Присвоить эл-ту LI класс "tree-node"
		library.addClass('', 'tree-node', LI);

		//e3.3. Проверить значение свойства this.state.opened:
		//			> Если true, то добавить эл-ту LI класс "tree-node-opened"
		//			> Если false, то добавить эл-ту LI класс "tree-node-closed"
		if(this.state.opened)	library.addClass('', 'tree-node-opened', LI);
		else									library.addClass('', 'tree-node-closed', LI);


	//a4. Присвоить эл-ту I1 все требуемые классы и ID. Для этого
	//		выполнить следующее: [a4.1 - a4.2]

		//a4.1.	Присвоить эл-ту I1 класс "tree-icon"
		library.addClass('', 'tree-icon', I1);

		//a4.2. Проверить значение свойства this.state.opened:
		//			> Если true, то добавить эл-ту I1 класс "tree-icon-opened"
		//			> Если false, то добавить эл-ту I1 класс "tree-icon-closed"
		if(this.state.opened)	library.addClass('', 'tree-icon-opened', I1);
		else 									library.addClass('', 'tree-icon-closed', I1);


	//a5. Присвоить эл-ту A все требуемые классы и ID. Для этого
	//		выполнить следующее: [a5.1 - a5.2]

		//a5.1.	Присвоить эл-ту A класс "tree-anchor"
		library.addClass('', 'tree-anchor', A);


		//a5.2. Проверить значение свойства this.state.selected:
		//			> Если true, то добавить эл-ту A класс "tree-selected"
		//			> Если false, то добавить эл-ту A класс "tree-selected"
		if(this.state.selected) library.addClass('', 'tree-selected', A);


	//a6. Присвоить эл-ту I2 все требуемые классы и ID. Для этого
	//		выполнить следующее: [e6.1]

		//a6.1.	Присвоить эл-ту I2 классы "tree-icon" и "tree-icon-theme"
		library.addClass('', 'tree-icon', I2);
		library.addClass('', 'tree-icon-theme', I2);


	//a7. Вернуть ссылку на элемент LI.
	return LI;

	};



//[-----OUT. Выходы модуля]

//OUT1.	Вернуть ссылку на функцию nodemakedom
	return nodemakedom;



});		// конец определения модуля с помощью define