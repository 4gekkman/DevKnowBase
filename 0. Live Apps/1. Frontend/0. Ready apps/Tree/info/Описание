==========================
Описание приложения "tree"
==========================
  Автор: 4gekkman@gmail.com




Ссылки:

  > Древовидная структура (wiki):
        ru.wikipedia.org/wiki/Древовидная_структура

  > Структура данных "дерево" (wiki):
        ru.wikipedia.org/wiki/Дерево_(структура_данных)

  > Грамотное javascript-дерево за 7 шагов (статья Ильи Кантора):
        http://javascript.ru/ui/tree

  > Удобное дерево с AJAX-подгрузкой (статья Ильи Кантора):
        http://javascript.ru/ui/ajaxtree

  > Дерево с многострочными узлами (статья Ильи Кантора):
        http://learn.javascript.ru/task/derevo-s-mnogostrochnymi-uzlami

  > Раскрывающееся дерево (статья Ильи Кантора):
        http://learn.javascript.ru/task/raskryvausheesya-derevo

  > JsTree - плагин для jQuery, позволяющий делать интерактивные деревья.
        1. (официальный сайт):  http://www.jstree.com/
        2. (статья на habr):    http://habrahabr.ru/post/151239/

  > Работа с куками (понадобится для сохранения состояния дерева):
        http://learn.javascript.ru/cookie

  > jStorage - кроссбраузерная база данных ключ-значение, которая хранит
    данные локально в браузере; работает в т.ч. в IE>=6:
        http://www.jstorage.info/#basics



*****************************************************
Оглавление:

  > Инструкция по применению
    >

  > О приложении tree "в двух словах"
  > Структура файлов и папок приложения "tree"
  > Общий обзор: иерархия, древовидные структуры, терминология.

  > TODO: что ещё можно прикрутить...





*****************************************************


> Инструкция по применению


  > Философия

    > Весь функционал приложения - в объекте-прототипе
      > Весь функционал приложения "tree" сосредоточен в объекте-прототипе
        дерева.
      > После подключения сборки к документу, обращаться к объекту-прототипу
        можно будет через глобальную переменную "tree".

    > Главные принципы создания сборки.
      - Все необходимые зависимости, в т.ч. от вендоров, должны быть
        прописаны внутри сборки. Чтобы пользователю надо было подключать
        к своему документу тольк 1 файл.
      - Сборка выставляет в глобальное пространство имён только ссылку
        на объект-прототип tree, и больше ничего. Весь функционал для
        работы с деревом должен быть сосредоточен в данном объекте.


  > Подключение

    > Подключение к документу

      > Подключение сборки
        > Осуществляется с помощью тега script. Требуется подключить
          сборку (минифицированную или нет) в head документа.
        > Например:

            <script src="tree_build1"></script>

      > Подключение стилей
        > Стили дерева "tree_main.css" нужно подключить к документу с
          помощью тега link.

    > Подключение к другому приложению в качестве модуля
      > Для этого потребуется организовать отдельную сборку в формате
        модуля, которая не создаёт глобальной переменной tree. И тогда
        можно будет использовать эту сборку, как модуль.
      > Также потребуется добавить CSS-стили приложения "дерево" к CSS-стилям
        этого другого приложения


  > Использование

    > Создать новый объект-дерево
      - config: конфигурационный объект для создания объекта-дерева,
        подробности о нём см. в файле соотв. версии модуля "m3_treeproto"

          var newTree = tree.create(config);

    > Создать новый объект-узел дерева
      - config: конфигурационный объект для создания объекта узла-дерева,
        подробности о нём см. в файле соотв. версии модуля "m3_nodeproto"

          var newNode = tree.node.create(config);

    ...


> О приложении tree "в двух словах":
  - Позволяет отображать данные в документе в виде иерархической структуры.
  - Имеет модульную архитектуру, собирается с помощью requireJS.
  - Легко расширять путём добавления новых модулей и расширения старых.
  - Легко адаптировать под конкретный проект путём создания новой сборки,
    включающий только требуемый набор модулей требуемых версий.


> Структура файлов и папок приложения "tree"

  ->  tree                          // папка с приложением

    ->  builds                      // сборки приложения "tree"

      ->  tree_build1               // сборка 1
        ->  tree_build1.js          // файл-сборка сборки 1
        ->  build1_min_config.js    // минификационный конфиг сборки 1

      ->  tree_build2               // сборка 2
        ->  tree_build2.js          // файл-сборка сборки 2
        ->  build1_min_config.js    // минификационный конфиг сборки 2

    ->  css                         // папка с css-файлами приложения
      ->  images                    // картинки для css
      ->  tree_main.css             // главный css-файл приложения

    ->  demos                       // тесты работы модулей, сборок

    ->  info                        // папка с информационными файлами приложения
      ->  Описание.txt              // общее описание приложения
      ->  Модули.txt                // описание всех модулей приложения
      ->  Сборки.txt                // описание всех сборок приложения

    -> modules                      // папка с модулями приложения
      ->  m1_moduleX                // папка с модулем m1
        ->  m1_moduleX_v1.js        // файл-модуль m1 версия 1
        ->  m1_moduleX_v2.js        // файл-модуль m1 версия 2
      ->  m2_moduleY                // папка с модулем m2
        ->  m1_moduleY_v1.js           // файл-модуль m2 версия 1
        ->  m1_moduleY_v2.js           // файл-модуль m2 версия 2

    -> vendors                      // папка со сторонним кодом, который требуется приложению
      ->  vendor1
        ->  vendor1.js
      ->  vendor2
        ->  vendor2.js


> Общий обзор: иерархия, древовидные структуры, терминология.

  > Об иерархии

    > Что такое иерархия?
      > Иерархия - это информация о взаимном расположении узлов в
        структуре типа дерево.

    > Как построить иерархическую структуру?
      > С помощью метода декомпозиции.
      > Декомпозиция - позволяет разложить одно звено на несколько по
        какому-либо признаку или признакам.


  > Что такое древовидная структура?
    > Это графический способ представления иерархической структуры.
    > Её называют древовидной, потому что она похожа на перевёрнутое
      дерево. По этой же причине говорят, что корневой узел (корень)
      находится в самом верху древовидной структуры.
    > В древовидной структуре может быть только 1 путь от одного
      узла до другого, без альтернатив.


  > Терминология

    > Узел дерева
      > Это объект в широком смысле.
      > Он может представлять из себя что угодно.
      > Каждый узел дерева может иметь >= 0 узлов-потомков, которые
        располагаются ниже по дереву.
      > Каждый узел дерева может иметь только 0-1 узел-родитель.
      > Каждый узел дерева может иметь сколько угодно соседских узлов,
        и узлов-потомков.
      > У не бесконечного дерева всегда есть корневой узел.

    > Корневой узел
      > Корневой узел - тот, который в конечной древовидной структуре
        не имеет вышестоящего элемента.
      > Такой элемент называют "корнем" или "корневым узлом".

    > Внутренний узел
      > Внутренний узел - у которого есть как родитель, так и потомок.
      > Иначе говоря, это не корневой и не конечный узел.

    > Конечный узел
      > Конечный узел - тот, у которого нет потомков.
      > Ещё их называют "листьями".

    > Поддерево
      > Поддерево - это часть древообразной структуры данных, которая может быть
        представлена в виде отдельного дерева.
      > Самый верхний узел поддерева - это его корневой узел.
      > Для поддерева действуют те же правила, что для древовидной структуры.
        В том числе, что может быть только 1 путь от одного узла поддерева до
        другого, без альтернатив.

    > Что такое упорядоченное дерево?
      > У которого связи родитель-ребёнок пронумерованы.
      > А не упорядоченное дерево - у которого эти связи не пронумерованы.

    > Семантика и иерархия
      > Как определить, какой узел в каком месте дерева должен находиться?
      > Нужно выделить >= 1 признака.
      > И воспользоваться выделенными признаками для построения иерархической
        структуры.

    > Связи между узлами
      > Связи - линии, соединяющие элементы.
      > Их также называют "ветвями".
      > В графическом представлении древовидной структуры линиями обычно
        соединяют только узлы "родитель-ребёнок". Эти линии символизинуют
        связь "родитель-ребёнок".

    > Терминология связей между узлами
      > Узел-родитель узла X     | Который расположен на 1 шаг выше узла X в
                                    иерархии дерева.
      > Узел-ребёнок узла X      | Который расположен на 1 шаг ниже узла X в
                                    иерархии дерева.
      > Узел-предок узла X       | Это любой узел, который расположен выше узла X
                                    в иерархии дерева.
      > Узел-потомок узла X      | Это любой узел, который расположен ниже узла X
                                    в иерархии дерева.
      > Узел-сосед (узел-брат)   | Соседскими называют все узлы с общим узлом-родителем.


> TODO: что ещё можно прикрутить...


  # Компонент: парсер HTML-разметки
    > Он должен позволить создать конфигурационный объект из HTML-разметки,
      которую он принимает на вход. После чего этот конфиг можно использовать
      для создания из него объекта-дерева.

  # Функция:  сохранение/восстановления объекта-дерева в невидимом
              HTML-элементе в виде JSON-строки
    > Это должна быть функция в объекте-прототипе дерева.

  # Функция:  добавить поддерево в объект-дерево
    > Это должна быть функция в объекте-прототипе дерева.
    > Должна позволить добавить в дерево готовое поддерево.

  # Функция:  удалить узел
    > Это должна быть функция в объекте-прототипе дерева.
    > Должна позволить удалить узел из объекта-дерева.
    > Должны быть опции. Например, указание, как поступать с его дочерними узлами.

  # Компонент:  перетащить узел в другое место в объекте-дереве
    > Использовать шаблон проектирования "поведение"
    > Должна позволить перетаскивать любой узел в любое место дерева.
    > В том числе реализовать следущее: при перетаскивании если надо
      перетащить в закрытый узел, достаточно навести на раскрывающую
      его иконку, и он раскроется.

  # Компонент:  изменить узел в объекте-дереве
    > Использовать шаблон проектирования "поведение"
    > Должно использоваться вместе с компонентом "контекстное меню".
      В нём должен быть пункт "изменить".
    > После этого должно появляться модальное окно, в котором с помощью
      формы должно быть можно изменить заданные параметры.

  # Функция:  обновить DOM-структуру дерева
    > Это должна быть функция в объекте-прототипе дерева.
    > Должна позволить после манипуляций с объектом-деревом обновить
      DOM-структуру дерева, удалив/добавив/изменив только изменения,
      без полной перерисовки (экономия ресурсов).

  # Функция:  AJAX-запрос конфигурационных объектов узлов на сервер
    > Это должна быть функция в объекте-прототипе дерева.
    > Должна принимать необходимые для запроса аргументы, делать запрос,
      получать список конфигурационных объектов, делать из них объекты-узлы,
      и возвращать массив с этими объектами-узлами.

  # Допил прототипов "дерева" и "узла":   чтобы можно было организовать AJAX-подгрузку узлов
    > В конфигурационном объекте узла должно быть можно указать, что хотя
      среди имеющихся узлов у этого узла нет детей, но на сервере они есть,
      их надо всего лишь запросить AJAX-запросом.
    > Поэтому у узла должна быть соответствующая иконка, как будто его можно
      раскрыть. А при нажатии на эту иконку должны появлятсья часики, а в это
      время должен происходить AJAX-запрос.
    > Параметры для подгрузочных AJAX-запросов должно быть можно указать
      в одном из свойств конфигурационного объекте дерева, где должен лежать
      конфигурационный объект для настройки AJAX-подгрузки.
    > Будут задействованы следующие функции прототипа дерева: для AJAX-запроса,
      для добавления поддерева в дерево.

  # Допил инициации св-ва data у прототипа дерева в функции конструкторе:
      чтобы можно было организовать AJAX-загрузку конфигурационных объектов узлов
      с сервера при создании дерева, и создание из них узлов и всего дерева.
    > В конфигурационном объекте дерева должно быть создано дополнительное
      свойство, в котором должен лежать конфигурационный объект для настройки
      AJAX-загрузки конфигурационных объектов для узлов с сервера при создании
      нового экземпляра дерева.
    > Будут задействованы функции прототипа дерева: для AJAX-запроса,
      для добавления поддерева в дерево.

  # Функция:  получить все выделенные узлы
    > Это должна быть функция в объекте-прототипе дерева.
    > Должна позволить получить все выделенные в дереве узлы, если
      компонент "выделение", конечно, подключен.


  ... Плюс еще следующие темы:

      - контекстное меню при правом клике
      - всплывающие при наведении подсказки
      - функция-сахар, сокращающая код при создании экземпляра дерева
      - функция-сахар, сокращающая код при создании экземпляра узла
      -
      - возможность указывать альтернативную иконку для узла (шаблон поведение)
      - возможность указывать альтенативную иконку (обозначающую связи) для узла
      - возможность указывать альтернативную тему для дерева (шаблон поведение)
      - возможность указывать тип узла, и привязать к типу внешний вид и контекстное меню узла










