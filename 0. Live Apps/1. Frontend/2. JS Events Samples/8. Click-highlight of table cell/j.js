/**
 * Задача
 *
 * > При щелчке по ячейке таблицы она должна подсвечиваться, а в консоли
 * 	долен появляться её номер.
 * > Если при щелчк уже была подсвечена какая-нибудь другая ячейка, убрать
 * 	с неё подстветку.
 *
 *
 * Архитектура решения
 *
 * 1. Установить функцию-перехватчик события onclick на элементе table.
 * 		> Этот функция-перехватчик будет перехватывать все события click,
 * 			произошедшие в таблице.
 *
 * 2. Кроссбраузерно получить ссылки на объект-событие event, а также
 * 		на целевой объект target, в котором изначально произошло событие.
 * 	 	> Последний может быть элементом TD, или каким-нибудь вложенным
 * 	 		в ячейку таблицы элементом, или если клик попал между ячейками,
 * 	 		то это может быть TR или даже TABLE.
 *
 * 3. Начиная с target, и заканчивая this (таблицей, для которой назначен
 * 		этот обработчик событий), искать 1-й попавшийся элемент TD.
 * 		> Найдя 1-й попавшийся TD остановить поиск, и сохранить его в переменную.
 * 		> Если TD не найден, то завершить работу функции-обработчика.
 *
 * 4. Пробежаться по всем TD таблицы, назначив им стандартный цвет background.
 *
 * 5. А элементу TD, найденному в п.3, назначить цвет background подсветки.
 * 		И вывести в консоль его  HTML-содержимое
 *
 * 6. Как бонус, сделать текст в ячейках таблицы невыделяемым
 *
*/


// Задействованные переменные
var table,						// ссылка на таблицу
		target, 					// ссылка на целевой элемент (в котором изначально произошло событие)
		nearestTargetTD,	// ссылка на найденный ближайший к элементу TD (см. п.3)
		allTableTDs,			// NodeList со всеми элементами TD таблицы
		unselectableText; // содержит функцию-обработчик, которая делает текст в элементе невыделяемым


//1. 	Установить функцию-перехватчик события onclick на элементе table.
//		> Этот функция-перехватчик будет перехватывать все события click,
//			произошедшие в таблице.
table = document.getElementById('myTable');
table.addEventListener('click',function() {



	//2. 	Кроссбраузерно получить объект-событие event, а также целевое
	//		событие target.
	//	 	> Последний может быть элементом TD, или каким-нибудь вложенным
	//	 		в ячейку таблицы элементом, или если клик попал между ячейками,
	//	 		то это может быть TR или даже TABLE.

		// Кроссбраузерно получить событие
		event = event || window.event;

		// Кроссбраузерно получить target-элемент
		var target = 	event && event.target ||
									event.srcElement;


	//3. 	Начиная с target, и заканчивая this (таблицей, для которой назначен
	//		этот обработчик событий), искать 1-й попавшийся элемент TD.
	//		> Найдя 1-й попавшийся TD остановить поиск, и сохранить его в переменную.
	//		> Если TD не найден, то завершить работу функции-обработчика.

		// Искать nearestTargetTD
		while(target != this) {
			if(target.tagName == 'TD') {
				nearestTargetTD = target;
				break;
			}
			target = target.parentNode;		// на след. итерац. искать в род. узле
		}

		// Если никаких TD найдено не было, то завершить работу функции-обработчика
		if(nearestTargetTD === undefined) return



	//4. Пробежаться по всем TD таблицы, назначив им стандартный цвет background.
	allTableTDs = table.querySelectorAll('td');
	for(var i=allTableTDs.length-1; i>=0; i--) {
		allTableTDs[i].style.backgroundColor = '#556';
	}



	//5. А элементу TD, найденному в п.3, назначить цвет background подсветки.
	//   И вывести в консоль его  HTML-содержимое
	nearestTargetTD.style.backgroundColor = '#FB6';
	console.log('nearestTargetTD.innerHTML = '+nearestTargetTD.innerHTML);


});





//6. Как бонус, сделать текст в ячейках таблицы невыделяемым
	unselectableText = function(event) {
		// Кроссбраузерно получить объект-событие
		event = event || window.event

		// Кроссбраузерно отменить действия браузера "по умолчанию" в ответ
		// на возникновение события:
		event.preventDefault ? event.preventDefault() :
													(event.returnValue=false);
	};
	table.onmousedown = unselectableText;
	table.onselectstart = unselectableText;



