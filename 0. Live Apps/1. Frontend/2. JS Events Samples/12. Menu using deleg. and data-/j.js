/**
 * Задача:
 *
 * > Сделать меню с кнопками.
 * > Должен быть 1 обработчик событий на все кнопки.
 * > У каждой кнопки должен быть пользовательский атрибута data-action,
 * 	содержащий название метода, который должен быть выполнен при нажатии
 * 	на кнопку.
 * > Эти самые методы, указанные в предыдущем пункте, должны быть добавлены
 * 	в обобщающий меню элемент, в нашем случае это div с id='menu'
 *
 *
 *
 * Преимущества такого подхода к созданию меню:
 *
 * > Не нужно писать код, чтобы присвоить обработчик каждой кнопке.
 * 		Меньше кода, меньше времени, потраченного на инициализацию.
 *
 * > Структура HTML становится по-настоящему гибкой.
 * 		Мы можем добавлять/удалять кнопки в любое время.
 *
 * > Данный подход является семантичным. Мы можем использовать классы
 * 		«action-save», «action-load» вместо data-action.
 * 		Обработчик найдёт класс action-* и вызовет соответствующий метод.
 * 		Это действительно очень удобно.
 *
 *
 *
 * Архитектура решения:
 *
 * 1. Создать функцию-конструктор, в которой будут созданы методы для меню,
 * 		и будет назначен обработчик события onclick. Она должна принимать
 * 		ссылку на объединяющий меню элемент - в данном случае div с id='menu'.
 * 		> То есть мы в этой функции-конструкторе одновременно и назначим
 * 			обработчик для меню, и создадим в памяти объект, который будет
 * 			содержать методы, каждый из которых будет вызываться при нажатии
 * 			на соответствующую кнопку меню.
 *
 * 2. В функции-конструкторе создать все необходимые методы, каждый из
 * 		которых должен будет вызван при нажатии на соотв. кнопку
 *
 * 3. Сохранить ссылку на создаваемый функцией-конструктором элемент this
 * 		в переменную - ведь эта ссылка понадобится нам при создани функции-
 * 		перехватчика события, а там this будет указывать не на меню, а на
 * 		элемент, в котором перехвачено в данный момент событие.
 *
 * 4. Назначить обработчик события onclick для элемента div с id='menu'.
 *
 * 5. Кроссбраузерно получить ссылки на объект-событие event, а также
 *		на целевой объект target, в котором изначально произошло событие.
 *
 * 6. Извлечь содержимое атрибута "data-action" кнопки target, ссылка
 * 		на которую получена в п.5, и сохранить это содержимое в переменную.
 * 		> Если там ничего нет, то закончить работу функции-перехватчика.
 *
 * 7. Используя сохраненную в п.3 ссылку на элемент div с id='menu',
 * 		а также сохраненное в п.6 значение "data-action", вызвать
 * 		у элемента меню метод, имя которого совпадает со значением "data-action".
 *
 * 8. Используя функцию-конструктор, создать из неё новый объект, передав
 * 		в виде аргумента элеменю меню. Ссылку на него можно не сохранять.
 * 		При этом происходит следующее:
 * 		> Выполняется код конструктора.
 * 		> В памяти создается новый объект, и в нем создаются функции из п.2.
 * 	 	> С помощью переданного аргумента создается обработчик событий
 * 	 		из п.4.
 * 	  > Ссылка на созданный новый объект сохраняется в функции-обработчике.
 * 	  	А следовательно, объект не удаляется из памяти.
 *
 *
 *
 *
 */


// Используемые переменные
var target,		// целевой элемент, в котором изначально произошло событие
		Menu,				// функция-конструктор
		menuElem,		// ссылка на элемент div с id='menu'
		dataActionValue;		// содержимое атрибута 'data-action' кнопки, по которой кликнули


//1. Создать функцию-конструктор, в которой будут созданы методы для меню,
//		и будет назначен обработчик события onclick. Она должна принимать
//		ссылку на объединяющий меню элемент - в данном случае div с id='menu'.
//		> То есть мы в этой функции-конструкторе одновременно и назначим
//			обработчик для меню, и создадим в памяти объект, который будет
//			содержать методы, каждый из которых будет вызываться при нажатии
//			на соответствующую кнопку меню.
Menu = function(element) {



	//2. 	В функции-конструкторе создать все необходимые методы, к
	//	 	которых должен будет вызван при нажатии на соотв. кнопку

		// Метод, который сработает при нажатии на кнопку с data-action="save"
		this.onClickSave = function() {
			console.log('Сохранить');
		};

		// Метод, который сработает при нажатии на кнопку с data-action="load"
		this.onClickLoad = function() {
			console.log('Загрузить');
		};




	//3. Сохранить ссылку на создаваемый функцией-конструктором элемент this
	//		в переменную - ведь эта ссылка понадобится нам при создани функции-
	//		перехватчика события, а там this будет указывать не на меню, а на
	//		элемент, в котором перехвачено в данный момент событие.
	menuElem = this;


	//4. Назначить обработчик события onclick для элемента div с id='menu'.
	element.onclick = function(event) {


		//5. Кроссбраузерно получить ссылки на объект-событие event, а также
		//		на целевой объект target, в котором изначально произошло событие.

			// Кроссбраузерно получить событие
			event = event || window.event;

			// Кроссбраузерно получить target-элемент
			target = 	event && event.target ||
										event.srcElement;


		//6. Извлечь содержимое атрибута "data-action" кнопки target, ссылка
		//		на которую получена в п.5, и сохранить это содержимое в переменную.
		//		> Если там ничего нет, то закончить работу функции-перехватчика.
		dataActionValue = target.getAttribute('data-action');
		if(!dataActionValue) return;



		//7. Используя сохраненную в п.3 ссылку на элемент div с id='menu',
		//		а также сохраненное в п.6 значение "data-action", вызвать
		//		у элемента меню метод, имя которого совпадает со значением "data-action".
		menuElem[dataActionValue]();


	};



};


//8. Используя функцию-конструктор, создать из неё новый объект, передав
//		в виде аргумента элеменю меню. Ссылку на него можно не сохранять.
//		При этом происходит следующее:
//		> Выполняется код конструктора.
//		> В памяти создается новый объект, и в нем создаются функции из п.2.
//	 	> С помощью переданного аргумента создается обработчик событий
//	 		из п.4.
//	  > Ссылка на созданный новый объект сохраняется в функции-обработчике.
//	  	А следовательно, объект не удаляется из памяти.
new Menu(document.getElementById('menu'));







