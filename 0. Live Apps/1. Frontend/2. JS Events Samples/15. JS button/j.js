/**
 * Задача
 *
 * > Имеется набор из 3-х картинок, изображающих состояния кнопки:
 * 	 - В нетронутом состоянии
 * 	 - При наведенном курсоре мыши
 * 	 - При зажатой кнопке мыши
 *
 * > Надо с помощью JS сделать из них кнопку - такую же, какая бы получилась
 * 		при использовании CSS-селекторов :hover и :active.
 *
 * > В качестве картинки использовать спрайт
 *
 *
 *
 * Алгоритм решения для кнопки на CSS-селекторах
 *
 * 1. Подготовить спрайт - картинку, содержащую все 3 изображения состояний кнопки.
 *
 * 2. Создать элемент div, размеры которого совпадают с размерами кнопки. Подогнать
 * 		размеры можно с помощью инструмента Web Developer в Chrome.
 *
 * 3. Создать 3 класса для этой кнопки:
 * 		- button
 * 		- button:hover
 * 		- button:active
 * 		> В каждом из них установить спрайт фоном, и подогнать его положение
 * 		  так, чтобы было видно соответствующее состояние кнопки.
 *
 * 4. Устновить кнопке класс button.
 *
 *
 * Алгоритм решения для кнопки на JS
 *
 * 1. Подготовить спрайт, создать элемент div, подогнать его размеры под размеры
 * 		кнопки.
 * 		> Спрайт (а не 3 отдельных картинки) используется потому, что когда страница
 * 			загружена, то спрайт тоже уже полностью попал в кэш. Тогда как если бы
 * 			использовались 3 отдельный картинки, то при загрузке страницы была бы загружена
 * 			только 1 из них - в нетронутом состоянии. А остальные бы подгружались по мере
 * 			надобности, и возможно даже с ЗАДЕРЖКОЙ.
 *
 * 2. Создать 3 CSS-класса:
 * 		- jsStatic
 * 			> Здесь поместить фоном спрайт, подогнав его так, чтобы была видна
 * 				нетронутая кнопка.
 *
 * 		- jsHover
 * 			> Здесь сместить спрайт так, чтобы кнопка была в состоянии hover.
 * 			> Когда курсор будет входиь в элемент кнопки, будем добавлять этот класс элементу кнопки.
 * 			> Когда курсор будет выходить из элемента кнопки, будем удалять этот класс у элемента кнопки.
 *
 * 		- jsActive
 *			> Здесь сместить спрайт так, чтобы кнопка была в состоянии active.
 * 			> При mousedown, будем добавлять этот класс элементу кнопки.
 * 			> При mouseup, будем удалять этот класс у элемента кнопки.
 *
 * 3. Написать 2 функции - удаляющую и добавляющую указанный класс элементу
 *
 * 4. Назначить 2 обработчика событий для элемента кнопки:
 * 		> onmouseover - добавляет элементу кнопки класс jsHover
 * 		> onmouseout - удаляет у элемента кнопки класс jsHover
 *
 * 5. Назначить 2 обработчика событий для элемента кнопки:
 * 		> onmousedown - добавляет элементу кнопки класс jsActive
 * 		> onmouseup - удаляет у элемента кнопки класс jsActive
 *
 *
 *
 *
 *
 */

// Задействованные переменные
var button;


// Получить элемент button
button = document.getElementById('jsButton');



//3. Написать 2 функции - удаляющую и добавляющую указанный класс элементу

	// Функция добавляет класс cls элементу el
	function addClass(el, cls) {
		for(var c = el.className.split(' '),i=c.length-1; i>=0; i--) {
			if (c[i] == cls) return
		}

		el.className += ' '+cls
	}

	// Функция удаляет класс cls у элемента el
	function removeClass(el, cls) {
		for(var c = el.className.split(' '),i=c.length-1; i>=0; i--) {
			if (c[i] == cls) c.splice(i,1)
		}

		el.className = c.join(' ')
	}



//4. Назначить 2 обработчика событий для элемента кнопки:
//		> onmouseover - добавляет элементу кнопки класс jsHover
//		> onmouseout - удаляет у элемента кнопки класс jsHover

	// Обработчик onmouseover
	button.addEventListener('mouseover',function(){

		addClass(button,'jsHover');

	});


	// Обработчик onmouseout
	button.addEventListener('mouseout',function(){

		removeClass(button,'jsHover');

	});



//5. Назначить 2 обработчика событий для элемента кнопки:
//		> onmousedown - добавляет элементу кнопки класс jsActive
//		> onmouseup - удаляет у элемента кнопки класс jsActive

	// Обработчик onmousedown
	button.addEventListener('mousedown',function(){

		addClass(button,'jsActive');

	});


	// Обработчик onmouseup
	button.addEventListener('mouseup',function(){

		removeClass(button,'jsActive');

	});









