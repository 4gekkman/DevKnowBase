=============================================================
Google
Apps Script


Ссылки:

  > Основной официальный ресурс Google Apps Script (en):
        https://developers.google.com/apps-script/

  > Справочник по spreadsheets на оф.ресурсе Apps Script (en):
        https://developers.google.com/apps-script/reference/spreadsheet/

  > Список всех стандартных функций для spreadsheets:
        https://support.google.com/drive/table/25273?hl=ru

  > API для работы с приложениями в Google Drive из своего приложения:
        https://developers.google.com/google-apps/app-apis

  > Ещё ряд инструментов и API от Google для стартапов:
        https://developers.google.com/startups/

  > Службы Google Apps для бизнеса, официальный сайт (рус):
        https://www.google.ru/intx/ru/enterprise/apps/business/

  > Официальный справочник по работе с графиками:
        1. Все доступные графики: https://developers.google.com/chart/interactive/docs/gallery
        2. Справочник App Script: https://developers.google.com/apps-script/reference/charts/


*****************************************************
Оглавление:

  > Введение
  > Кастомные функции на Apps Script в Google Spreadsheets
  > Как вывести в таблице матрицу значений AxB
  > Как получить ссылку на объект, представляющий нужную таблицу
  > Как получить ссылку на объект, представляющий нужный лист таблицы
  > Как получить 2d массив любых значений с любого листа
  > Как отлаживать Apps Script скрипты
  > Важная особенность применения кастомных функций Apps Script
  > Как получить список редакторов и обзорщиков таблицы?
  > Как получить дату создания и последнего обновления файла с помощью Apps Script?
  > Как создать/удалить строку на листе?
  > Как узнать текущие дату и время?
  > Как скопировать лист в любую указанную таблицу, переименовать его?
  > Как модифицировать диапазоны существующего графика?
  > Как получить ссылку на файл по его URL?
  > Как вывести модальное окно Alert с указанной строкой?



*****************************************************

> Введение
  - Язык 'Apps Script' разразабывается компанией Google.
  - Он предназначен для написания скриптов для работы со службами Google Apps.
  - Службы Google Apps включают:
    - Gmail
    - Каледнарь
    - Диск
    - Документы
    - Таблицы
    - Презентации

> Кастомные функции на Apps Script в Google Spreadsheets

  > Введение
    - Каждой таблице доступен некий стандартный набор функций.
    - Ссылка на полный их перечень есть в 'ссылках' выше.
    - Однако, пользователь может писать и кастомные функции на Apps Script.

  > У каждой таблицы свой набор кастомных функций
    - Допустим, ты написал и сохранил кастомную функцию для конкретной таблицы.
    - Она будет работать только в этой таблице. А в других - не будет.
    - Чтобы она работала в другой таблице, надо её также добавить и в неё.

  > Как добавить кастомную функцию для конкретной таблицы?
    - Открыть таблицу в google диске.
    - Выбрать: 'Инструменты' -> 'Редактор скриптов'.
    - Выбрать нужный тип скрипта и нажать 'Ок'.
    - Добавить кастомную функцию и нажать кнопку сохранить.
    - Если потребуется, можно снова открыть редактор и внести изменения.


> Как вывести в таблице матрицу значений AxB
  - Допустим, мы пишем некую кастомную функцию на Apps Script.
  - Она извлекает откуда-то некие значения.
  - Допустим, она извлекла 9 значений, и мы хотим их вывести в таблице.
  - Мы хотим вывести их в 9-ти ячейках в виде матрицы 3х3.
  - Для этого нам из кастомной функции и надо вернуть матрицу 3x3.
  - Затем останется вызвать эту функцию в какой-нибудь ячейке таблицы.
  - В этой ячейке будет выведено значение из позиции 1x1 матрицы.
    - В примере ниже - число '1'.
  - Пример такого скрипта:

      someScript() {

        return  [
                  [1,2,3],
                  [4,5,6],
                  [7,8,9]
                ];
      }

> Как получить ссылку на объект, представляющий нужную таблицу
  - Прежде, чем работать с таблицей, надо получить ссылку на неё.
  - А именно, на представляющий её объект данных.
  - Это можно сделать с помощью методов класса 'SpreadsheetApp'.
  - Получить ссылку на таблицу, в которой запущен скрипт, можно так:

      var ss = SpreadsheetApp.getActiveSpreadsheet();

  - Получить ссынку на таблицу по указанному URL можно, как в примере ниже.
  - Используя эту возможность можно таскать данные из других таблиц.

      var ss = SpreadsheetApp.openByUrl('... URL таблицы в google drive ...');


> Как получить ссылку на объект, представляющий нужный лист таблицы
  - Но даже имея ссылку на таблицу, этого мало для работы с данными.
  - Для этого необходимо иметь ссылку на объект, представляющий лист таблицы.
  - Получить число листов в таблице можно так:

      var num = ss.getNumSheets();

  - Получить ссылку на лист, в котором запущен скрипт, можно так:

      var sheet = ss.getActiveSheet();

  - Получить массив ссылок на все объекты-листы таблицы можно так:

      var allSheets = ss.getSheets();

  - Получить имя листа можно так:

      var sheetName = ss.getSheets()[0].getSheetName();

  - Получить лист по указанному имени листа можно так:

      var sheet = getSheetByName('... имя листа ...');

  - Имея такие данным можно легко пробежаться циклом по всем листам таблицы.
  - Можно легко при этом отсеивать листы по их имени.
  - Можно при этом с каждого листа извлекать любые желаемые данные.
  - Эти данные можно как угодно скомпановать, и представить в виде 2d массива.
  - А этот 2d массив можно легко вывести на любом листе любой таблицы.


> Как получить 2d массив любых значений с любого листа
  - Итак, мы имемм ссылку на лист, с данными которого хотим работать.
  - Теперь мы можем извлечь любой диапазон данных с этого листа.
  - Под диапазоном данных имеется в виду прямоугольник данных от одной ячейки до другой.
  - В Apps Script диапазон данных представляет объект класса Range.
  - Есть 4 способа извлечь объект класса Range с листа:

    # getRange(row, column)
      - Получить 'диапазон', состоящий из 1 ячейки по указанным координатам.
      - row: номер строки
      - column: номер (а не буква) колонки
      - Отсчёт ведётся от левой верхней ячейки листа таблицы (A1).

        var range = sheet.getRange(1,2);

    # getRange(row, column, numRows)
      - Получить 'диапазон' в виде 'подстолбца', который состоит из:
        - Ячейки по указанным координатам.
        - numRows-1 ячеек под этой ячейкой.
        - Т.Е. в сумме этот подстолбец состоит из numRows ячеек.
      - Отсчёт ведётся от левой верхней ячейки листа таблицы (A1).

        var range = sheet.getRange(1,2, 3);

    # getRange(row, column, numRows, numColumns)
      - Получить 'диапазон' в виде 2d матрицы значений.
        - В неё входят все ячейки от (row, column) ...
        - ... до (row+(numRows-1), column+(numColumns-1))
      - Отсчёт ведётся от левой верхней ячейки листа таблицы (A1).

        var range = sheet.getRange(1,2, 3,3);

    # getRange(a1Notation)
      - Получить 'диапазон' в виде 2d матрицы значений.
      - По сути, эта функция более простой в использовании аналог getRange с 4 аргументами.

        // Вернуть 'диапазон', состоящий из 1-й ячейки
          var range = sheet.getRange('A1');

        // Вернуть 'диапазон', состоящий из 'подстолбца'
          var range = sheet.getRange('A1:A4');

        // Вернуть 'диапазон', состоящий из 2d-матрицы
          var range = sheet.getRange('A1:D4');

  - Извлечь 2d-массив с данными из объекта класса Range можно так
    - Сделать это можно так:

        var data = range.getValues();

    - Извлечь только значение из левой верхней ячейки диапазона можно так:

        var value = range.getValue();

> Как отлаживать Apps Script скрипты
  - Итак, написали мы какую-нибудь функцию в редакторе Apps Script.
  - Для отладки есть встроенный аналог 'console.log' - 'Logger.log':

      Logger.log('какие-то данные');

  - Чтобы произвести отладочный запуск надо открыть меню 'Выполнить'.
  - И в этом меню щёлкнуть по имени той функции, которую надо 'прогнать'.
  - После этого можно открыть лог и посмотреть отладочные результаты.
  - Для этого: 'Вид' -> 'Журнал'.

> Важная особенность применения кастомных функций Apps Script

  > Описание проблемы
    - Проблема касается некой 'фичи' кастомных функций Apps Script.
    - Эта 'фича' связана с кэшированием результата работы функции.
    - Google подразумевал, что результат к.функции зависит только от её аргументов.
    - И если аргументы не поменялись, то результат можно взять из кэша.
    - Проблема в том, что предпосылка гугла не верна, и это реально мешает.

  > Описание решения
    - Итак, чтобы решить проблему, требуется при каждом вызове предевать иной аргумент.
    - Выделим на листе 'Настройки' отдельную ячейку.
    - В эту ячейку впишем произвольное число.
    - Далее в редакторе скриптов напишем простой скрипт.
      - Этот скрипт должен прибавлять к числу в ячейки цифру 1.
    - Далее настроем триггер, который будет запускать скрипт раз в минуту.
      - Для этого зайдём в редактор скриптов.
      - 'Ресурсы' -> 'Триггеры текущего проекта' -> 'Создать новый'.
      - Там выбрать, какую функцию он должен запускать, и как часто.

> Как получить список редакторов и обзорщиков таблицы?
  - К документам на google drive можно давать доступ другим людям.
  - Можно давать доступ на просмотр и комментирование, или на редактирование.
  - Но можно ли как-нибудь получить списки этих людей через Apps Script?
  - Узнать, у кого есть доступ на просмотр к документ spreadsheet можно так:

      var viewers = spreadsheet.getViewers();

  - В переменной viewers будет массив объектов типа User.
  - А узнать, у кого есть доступ на редактирование документа spreadsheet можно так:

      var editors = spreadsheet.getEditors();

  - Соответственно, в переменной editors будет массив объектов типа User.

> Как получить дату создания и последнего обновления файла с помощью Apps Script?
  - Иногда требуется контролировать дату последнего изменения файла.
  - Например, чтобы отслеживать, что сотрудники что-то у себя в ЛК изменили.
  - Или отслеживать, когда последний раз была изменена схема процесса.
  - Допустим, у нас имеется URL файла, который мы хотим отслеживать:

      var URL = 'https://docs.google.com/spreadsheets/d/1wsgkQVyUtZ_TAd0DhwQN96IrsX6bij4mVfniD_a6ox0/edit#gid=1787454150';

  - В apps script нет функции, позволяющей получить ссылку на объект-файл по его URL.
  - Но зато есть функция для его получения по ID файлан.
  - Но для этого нам перво-наперво надо извлечь этот ID из URL файла.
  - Для этого можно использовать такую функцию:

      function getIdFromUrl(url) { return url.match(/[-\w]{25,}/); }

  - Извлечём ID:

      var id = getIdFromUrl(URL);   // '1wsgkQVyUtZ_TAd0DhwQN96IrsX6bij4mVfniD_a6ox0'

  - Теперь мы можем получить ссылку на объект, представляющий нужный нам файл:

      var file = DriveApp.getFileById(ID);

  - В переменной file будет лежать ссылка на объект типа File.
  - И теперь мы можем получить дату последного изменения этого файла:

      var lastUpdate = file.getLastUpdated();

  - А дату создания файла мы можем узнать так:

      var creationDate = file.getDateCreated();

  - Полный справочник по работе с Drive лежит здесь:
      https://developers.google.com/apps-script/reference/drive/

> Как создать/удалить строку на листе?
  - Часто может потребоваться вставить в указанное место листа новую строку.
  - Строку номер N+1 после строки N (в том же стиле) можно добавить так:

      sheet.insertRowAfter(N);

  - Строку перед строкой номер N (в том же стиле) можно добавить так:

      sheet.insertRowBefore(N);

  - При этом новая строка будет иметь номер N, а старая N+1.
  - Удалить строку номер N можно так:

      sheet.deleteRow(N);

> Как узнать текущие дату и время?
  - Использовать объект Date из javascript.

> Как скопировать лист в любую указанную таблицу, переименовать его?
  - Допустим, у нас имеется некий лист в некой таблице.
  - И мы хотим его скопировать в эту же самую таблицу.
  - И при всём при этом ещё и получить ссылку на объект-лист-копию.
  - Это можно сдеалать вот как:

      var ref = sheet.copyTo(spreadsheet);

    - Здесь ref - это ссылка на созданную копию листа.
    - Здесь sheet - это лист-оригинал, с которого снимается копия.
    - Здесь spreadsheet - это таблица, куда помещается скопированный лист.

  - Переименовать новый лист можно вот так:

      ref.setName('Новое имя');

> Как модифицировать диапазоны существующего графика?
  - Описано по этой ссылке: https://developers.google.com/apps-script/reference/spreadsheet/embedded-chart
  - Допустим, у нас на листе sheet есть 1 график.
  - Получить ссылку на объект, его представляющий, можно так:

       var chart = sheet.getCharts()[0];

  - Список функций для работы с нимдоступен здесь: https://developers.google.com/apps-script/reference/spreadsheet/embedded-area-chart-builder
  - Получить диапазоны, испольуемые графиком, можно так:

      var ranges = chart.getRanges();    // Range[]

  - Удалить указанный диапазон (range) можно так:

      chart.chartModify().removeRange(range);

  - Добавить диапазон данных range графику можно так:

      chart.chartModify().addRange(range);

  - Обновить график можно так:

      sheet.updateChart(chart)


> Как получить ссылку на файл по его URL?
  - Во-первых, нам потребуется функция, которая вырежит ID из URL:

      function getIdFromUrl(url) { return url.match(/[-\w]{25,}/); }

  - Используя эту функцию, можно получить ссылку на файл по его ID:

      var file = DriveApp.getFileById(getIdFromUrl(url));

  - Сделать копию файла, назвав её именем name и по адресу destination:

      var copy = file.makeCopy(name, destination);

  - Добавить этот файл в папку folder можно так

      file.addToFolder(folder);


> Как вывести модальное окно Alert с указанной строкой?
  - Вот так:

      SpreadsheetApp.getUi().alert('Привет!');








