////=================================================////
////                                                 ////
////                     PHPUnit                     ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////

  // Официальные ресурсы //
  //---------------------//

    # Сайт PHPUnit (en)
        https://phpunit.de

    # Руководство v6.2 (en)
        phpunit.de/manual/6.2/en/writing-tests-for-phpunit.html

  // Неофициальные ресурсы //
  //-----------------------//

    # Юнит-тестирование в разработке (YouTube, 50 мин.)
        https://www.youtube.com/watch?v=KAny2OSYY3Y

    # Unit-тестирование и метрики покрытия кода тестами (YouTube, 70 мин.)
        https://www.youtube.com/watch?v=u-mehgfQYsY


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Теоретические основы

    А1. Зачем нужны тесты в проекте?
    А2. Установка PHPUnit
    А3. Обзор возможностей PHPUnit
    А4. CLI PHPUnit для запуска тестов
    
  # Б.  Практика и наработки

    Б1. 



////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Зачем нужны тесты в проекте?

  Я давно хотел добавить PHPUnit в свой стек, но мне было
  непонятно, какую пользу это может принести, потому что
  я разрабатывал в одиночку.

  Теперь, когда мы поставили задачу разрабатывать проекты 
  с привлечением большого количества посторонних 
  разработчиков, стало ясно, зачем нужно покрывать код 
  юнит-тестами.

  В крупном проекте могут задействованы десятки специалистов. 
  Он может состоять из десятков разработанных или разрабатываемых 
  модулей и слотов. Такая ситуация коренным образом отличается 
  от той, когда весь проект пишет один разработчик. 

  В последнем случае у него в голове есть вся картина, и 
  если что-то перестанет работать, он быстро сообразит, 
  что пошло не так. А в первом случае, разработчиков целая 
  куча, и если что-то перестанет работать, никто точно не 
  сможет сказать, что пошло не так. Поэтому, весь бэкенд 
  должен быть на 100% покрыт тестами, и в случае, если 
  что-то пошло не так, автоматическое тестирование существенно 
  облегчить поиск решения.

  Когда главный или старший разработчик решает поручить 
  разработку модуля или слота какому-либо специалисту, 
  он в первую очередь пишет тесты. Такую технику разработки 
  называют TDD - Test-Driven Development.


А2. Установка PHPUnit

--------------------------------------
Подоглавление:

  # Ссылки
  # Требования
  # Установка через Composer

--------------------------------------

> Ссылки

    # [оф.документация] Installing PHPUnit
        https://phpunit.de/manual/6.2/en/installation.html#installation.requirements

> Требования

  ▪ PHP7
  ▪ Дополнения:

    ▪ dom
    ▪ json
    ▪ pcre
    ▪ reflection
    ▪ spl
    ▪ Xdebug (для функции code coverage)
    ▪ tokenizer (для функции code coverage) 
    ▪ xmlwriter (для генерирования xml-докладов)

> Установка через Composer

  ▪ Основной пакет

      composer require --dev phpunit/phpunit ^6.2

  ▪ Дополнительные пакеты

    ▪ PHP_Invoker
      - Чтобы назначать тестам таймауты.
      - Установка:

        composer require --dev phpunit/php-invoker

    ▪ DbUnit
      - Это порт DbUnit для PHPUnit.
      - Для взаимодействия с базой данных во время тестирования.
      - Установка:

        composer require --dev phpunit/dbunit


А3. Обзор возможностей PHPUnit

--------------------------------------
Подоглавление:

  # Ссылки
  # Концепция unit-тестирования
  # Введение

    ▪ Базовые соглашения
      ▪ Имя класса с тестами: ClassTest для класса Class
      ▪ Класс с тестами наследует от TestCase
      ▪ Тесты размещаются в public-методах
      ▪ Assertion-методы внутри методов-тестов

    ▪ Простой пример unit-теста

  # Test Dependencies: зависимости между методами-тестами

    ▪ Что такое Test Dependencies
    ▪ По умолчанию зависимости передаются по ссылке
    ▪ Можно использовать более 1-го @depends в docblock
    ▪ Примеры использования Test Dependencies
      ▪ Простой пример использования @depends
      ▪ Одновременное использование нескольких @depends

  # Data Providers: скормить тесту N наборов данных

    ▪ Что такое Data Providers
    ▪ Что будет, если тест @depends от теста, использующего @dataProvider
    ▪ Все dataProvider выполняются до setUpBeforeClass и setUp 
    ▪ Примеры использования Data Provider
      ▪ Простой пример; цифровые ключи
      ▪ Простой пример; строковые ключи
      ▪ Передача в тест содержимого csv-файла
    
    ▪ Одновременное использование @depends and @dataProvider

  # Тест на наличие исключений

    ▪ expectException     | Использовать для теста на исключения
    ▪ @expectedException  | Альтернатива expectException в docblock

  # Тест вывода

    ▪ expectOutputString  | Вывод должен совпадать с указанной строкой
    ▪ expectOutputRegex   | Вывод ложнен проходить проверку рег.выражением
    ▪ setOutputCallback   | Колбэк для изменения содержимого вывода
    ▪ getActualOutput     | Получить текущий вывод

--------------------------------------

> Ссылки

  # [оф.документация] Writing Tests for PHPUnit 
      https://phpunit.de/manual/6.2/en/writing-tests-for-phpunit.html

> Концепция unit-тестирования
  
    В современном мире и бизнесе скорость разработки зачастую
    играет ключевую роль в вопросе, будет ли получена прибыль
    от разрабатываемого продукта, или нет. 

    А обеспечить высокую скорость разработки можно лишь вливая 
    в неё средства, и привлекая большое количество разработчиков, 
    чтобы они параллельно работали над различными частями проекта. 

    Один (может, единственный?) разумный путь в таких обстоятельствах,
    в том, чтобы сначала команда руководителя проекта разработала
    MVP интерфейсов и тестов для каждой из частей проекта, и на основе
    этих данных назначила ответственных за ту или иную часть из
    рядовых разработчиков. Они также смогут использовать эти данные
    для построения взаимодействия между разрабатываемой ими частью,
    и другими частями, поскольку все интерфейсы заранее известны.

    Тесты также облегчают поиск неисправностей. Когда проект состоит
    из большого числа кусочков, а над каждым из них трудились в разное
    время по несколько разработчиков, даже руководителю проекта
    может быть трудно найти причину возникающих ошибок, если нет тестов.
    Наличие же тестов делает эту задачу проще.

    Тесты позволяют не бояться вносить изменения в существующий код.
    Ведь если изменение что-то сломает, то мы об этом узнаем,
    ведь соответствующие тесты не будут пройдены.

    Тесты можно запускать все скопом. Это должен делать каждый
    разработчик перед тем, как отправлязть pull request в 
    удалённый репозиторий. Осуществляется это с помощью CLI PHPUnit.

    Кроме того, тесты являются, как правило неплохой документацией.
    В docblock можно описывать, что делают методы классов. А сами
    тесты показывают, что и при каких условиях эти методы должны
    возвращать.

> Введение

  • Базовые соглашения

    ▪ Имя класса с тестами: ClassTest для класса Class
      - Тесты для Class размещаются в классе ClassTest.
      - Примеры: 

        ▪ Для класса User тесты кладём в UserClass.
        ▪ Для класса Group тесты кладём в GroupClass.

    ▪ Класс с тестами наследует от TestCase
      - От \PHPUnit\Framework\TestCase.
      - Обычно наследует, видимо, иногда не наследует.

    ▪ Тесты размещаются в public-методах
      - Класса с тестами.
      - Или можно использовать @test в docblock к методу.

    ▪ Assertion-методы внутри методов-тестов
      - Есть множество различных assertion-методов в PHPUnit.
      - В переводе на русский assertion означает "утверждение".
      - Тестирование и состоит в проверке этих самых утверждений.
      - Assertion-методы применяются внутри методов-классов.

  • Простой пример unit-теста
    - В этом примере мы пишем тест для класса Stack.
    - Поэтому класс с тестами называется StackTest.
    - Тестируем лишь 1 метод класса Stack - pushAndPop - 
      поэтому метод-тест в StackTest называется testPushAndPop.
    - Для простоты, применяем лишь 1 assert-метод assertEquals,
      который просто сравнивает 2 переданных аргумента.
    - Код:

      <?php
      use PHPUnit\Framework\TestCase;

      class StackTest extends TestCase
      {
          public function testPushAndPop()
          {
              $stack = [];
              $this->assertEquals(0, count($stack));

              array_push($stack, 'foo');
              $this->assertEquals('foo', $stack[count($stack)-1]);
              $this->assertEquals(1, count($stack));

              $this->assertEquals('foo', array_pop($stack));
              $this->assertEquals(0, count($stack));
          }
      }
      ?>

> Test Dependencies: зависимости между методами-тестами

  • Что такое Test Dependencies
    - Возможность явной декларации зависимостей между методами-тестами.
    - Но они позволяют в зависимом методе-тесте получать в качестве
      аргументов результаты тестов, от которого зависит зависимый.
    - Тесты, от которых зависит данный, будут вызваны до него,
      но порядок их вызова не определён.
    - Если любой из тестов, от которых зависит данный, будет провален,
      то данный тест даже и выполняться не будет. Это позволит не засорять
      вывод лишней информацией, и проще увидеть, где ошибка.
    - Можно использовать более 1-го @depends в docblock.

  • По умолчанию зависимости передаются по ссылке
    - Чтобы это изменить, используй: @depends clone

  • Можно использовать более 1-го @depends в docblock
    - Вывод от первой зависимости будет передан в 1-й аргумент.
    - От второй - во 2-й, от третьей - в 3-й, и так далее.

  • Примеры использования Test Dependencies

    ▪ Простой пример использования @depends
      - testEmpty ни от чего не зависит.
      - testPush зависит от testEmpty, и получает его вывод.
      - testPop зависит от testPush, и получает его вывод.
      - Код:

        <?php
        use PHPUnit\Framework\TestCase;

        class StackTest extends TestCase
        {
            public function testEmpty()
            {
                $stack = [];
                $this->assertEmpty($stack);

                return $stack;
            }

            /**
             * @depends testEmpty
             */
            public function testPush(array $stack)
            {
                array_push($stack, 'foo');
                $this->assertEquals('foo', $stack[count($stack)-1]);
                $this->assertNotEmpty($stack);

                return $stack;
            }

            /**
             * @depends testPush
             */
            public function testPop(array $stack)
            {
                $this->assertEquals('foo', array_pop($stack));
                $this->assertEmpty($stack);
            }
        }
        ?> 

    ▪ Одновременное использование нескольких @depends
      - Вывод от первой зависимости будет передан в 1-й аргумент.
      - От второй - во 2-й, от третьей - в 3-й, и так далее.
      - Код теста:

        <?php
        use PHPUnit\Framework\TestCase;

        class MultipleDependenciesTest extends TestCase
        {
            public function testProducerFirst()
            {
                $this->assertTrue(true);
                return 'first';
            }

            public function testProducerSecond()
            {
                $this->assertTrue(true);
                return 'second';
            }

            /**
             * @depends testProducerFirst
             * @depends testProducerSecond
             */
            public function testConsumer()
            {
                $this->assertEquals(
                    ['first', 'second'],
                    func_get_args()
                );
            }
        }
        ?>    


> Data Providers: скормить тесту N наборов данных
  
  • Что такое Data Providers
    - Допустим, есть у нас метод-тест.
    - Но мы хотим его применить на нескольких наборах данных.
    - Протестировать различные крайние случаи, и т.п.
    - Не писать же для этого кучу лишних методов-тестов,
      отличающихся только используемыми наборами данных?
    - Решение есть, это Data Provider - метод, который должен
      возвращать массив массивов наборов данных.
    - Какой Data Provider использовать методу-тесту можно
      указать в его docblock с помощью @dataProvider (см.примеры ниже).

  • Что будет, если тест @depends от теста, использующего @dataProvider
    - Зависимый тест будет выполнен лишь после того, как 
      хотя бы для одного набора данных тест, от которого
      он зависит, который использует @dataProvider, будет
      выполнен успешно.
 
  • Все dataProvider выполняются до setUpBeforeClass и setUp 
    - Поэтому из dataProvider нет доступа к созданным в них переменным.
    - Это нужно PHPUnit для того, чтобы он мог подсчитать кол-во тестов.

  • Примеры использования Data Provider

    ▪ Простой пример; цифровые ключи
      - В возвращаемом DP массиве используются цифровые ключи.
      - То есть: 0,1,2 и т.д. 
      - В случае наличия ошибки, она будет выглядеть примерно так:

          DataTest::testAdd with data set #3 (1, 1, 3)

      - Код теста:

        <?php
        use PHPUnit\Framework\TestCase;

        class DataTest extends TestCase
        {
            /**
             * @dataProvider additionProvider
             */
            public function testAdd($a, $b, $expected)
            {
                $this->assertEquals($expected, $a + $b);
            }

            public function additionProvider()
            {
                return [
                    [0, 0, 0],
                    [0, 1, 1],
                    [1, 0, 1],
                    [1, 1, 3]
                ];
            }
        }
        ?>

    ▪ Простой пример; строковые ключи
      - Отличие от примера выше толко в строковых ключах.
      - Это облегчает чтение отчёта об ошибках, т.к. более описательно:

          DataTest::testAdd with data set "one plus one" (1, 1, 3)

      - Код теста:

        <?php
        use PHPUnit\Framework\TestCase;

        class DataTest extends TestCase
        {
            /**
             * @dataProvider additionProvider
             */
            public function testAdd($a, $b, $expected)
            {
                $this->assertEquals($expected, $a + $b);
            }

            public function additionProvider()
            {
                return [
                    'adding zeros'  => [0, 0, 0],
                    'zero plus one' => [0, 1, 1],
                    'one plus zero' => [1, 0, 1],
                    'one plus one'  => [1, 1, 3]
                ];
            }
        }
        ?>

    ▪ Передача в тест содержимого csv-файла
      - Каждая строка из файла выступает, как набор для теста.
      - Код теста:

          <?php
          use PHPUnit\Framework\TestCase;

          require 'CsvFileIterator.php';

          class DataTest extends TestCase
          {
              /**
               * @dataProvider additionProvider
               */
              public function testAdd($a, $b, $expected)
              {
                  $this->assertEquals($expected, $a + $b);
              }

              public function additionProvider()
              {
                  return new CsvFileIterator('data.csv');
              }
          }
          ?>      

      - Используется вспомогательный класс:

          <?php
          use PHPUnit\Framework\TestCase;

          class CsvFileIterator implements Iterator {
              protected $file;
              protected $key = 0;
              protected $current;

              public function __construct($file) {
                  $this->file = fopen($file, 'r');
              }

              public function __destruct() {
                  fclose($this->file);
              }

              public function rewind() {
                  rewind($this->file);
                  $this->current = fgetcsv($this->file);
                  $this->key = 0;
              }

              public function valid() {
                  return !feof($this->file);
              }

              public function key() {
                  return $this->key;
              }

              public function current() {
                  return $this->current;
              }

              public function next() {
                  $this->current = fgetcsv($this->file);
                  $this->key++;
              }
          }
          ?>      

  • Одновременное использование @depends and @dataProvider
    - В docblock можно одновременно указать директивы из сабжа.
    - У @dataProvider будет приоритет, на каком бы месте её не указать,
      т.е. в 1-м аргументе всегда будут данные из @dataProvider,
      а данные от @depends пойдут, начиная со 2-го аргумента (см.код ниже).
    - Например:

        <?php
        use PHPUnit\Framework\TestCase;

        class DependencyAndDataProviderComboTest extends TestCase
        {
            public function provider()
            {
                return [['provider1'], ['provider2']];
            }

            public function testProducerFirst()
            {
                $this->assertTrue(true);
                return 'first';
            }

            public function testProducerSecond()
            {
                $this->assertTrue(true);
                return 'second';
            }

            /**
             * @depends testProducerFirst
             * @depends testProducerSecond
             * @dataProvider provider
             */
            public function testConsumer()
            {
                $this->assertEquals(
                    ['provider1', 'first', 'second'],
                    func_get_args()
                );
            }
        }
        ?>  

    - А вывод будет такой:

        phpunit --verbose DependencyAndDataProviderComboTest
        PHPUnit 6.2.0 by Sebastian Bergmann and contributors.

        ...F

        Time: 0 seconds, Memory: 3.50Mb

        There was 1 failure:

        1) DependencyAndDataProviderComboTest::testConsumer with data set #1 ('provider2')
        Failed asserting that two arrays are equal.
        --- Expected
        +++ Actual
        @@ @@
        Array (
        -    0 => 'provider1'
        +    0 => 'provider2'
        1 => 'first'
        2 => 'second'
        )

        /home/sb/DependencyAndDataProviderComboTest.php:31

        FAILURES!
        Tests: 4, Assertions: 4, Failures: 1.

> Тест на наличие исключений

  ▪ expectException
    - Использовать для теста на исключения.
    - Пример:

        <?php
        use PHPUnit\Framework\TestCase;

        class ExceptionTest extends TestCase
        {
            public function testException()
            {
                $this->expectException(InvalidArgumentException::class);
            }
        }
        ?>

  ▪ @expectedException
    - Альтернатива expectException в docblock.
    - Пример:

        <?php
        use PHPUnit\Framework\TestCase;

        class ExceptionTest extends TestCase
        {
            /**
             * @expectedException InvalidArgumentException
             */
            public function testException()
            {
            }
        }
        ?>    

> Тест вывода
  
  • expectOutputString
    - Вывод должен совпадать с указанной строкой
    - С помощью expectOutputString обозначаем строку.
    - С помощью pring или echo можем вывести также строку.
    - Если эти строки не совпадут, тест провален; иначе - пройден.
    - Пример теста, который провалится:

      <?php
      use PHPUnit\Framework\TestCase;

      class OutputTest extends TestCase
      {
          public function testExpectFooActualFoo()
          {
              $this->expectOutputString('foo');
              print 'foo';
          }

          public function testExpectBarActualBaz()
          {
              $this->expectOutputString('bar');
              print 'baz';
          }
      }
      ?>

    • expectOutputRegex
      - Вывод ложнен проходить проверку рег.выражением.

    • setOutputCallback
      - Колбэк для изменения содержимого вывода.

    • getActualOutput
      - Получить текущий вывод.

А4. CLI PHPUnit для запуска тестов

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение

--------------------------------------

> Ссылки

  # [оф.документация] The Command-Line Test Runner 
      https://phpunit.de/manual/6.2/en/textui.html

> Введение
  - Здесь описан CLI PHPUnit для запуска тестов.
  - По сути, это просто копия оф.справки, своими словами.

> 





