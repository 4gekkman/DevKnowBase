<?php
/* --------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
Composer






-------------------------------------------------- */













/* --------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------


Ссылки:

  > Официальный сайт Composer:
        http://getcomposer.org/

  > Официальная документация по Composer:
        http://getcomposer.org/doc/

  > Главный репозиторий для Composer:
        https://packagist.org/

  > Введение в Composer - статья на сайте tutsplus.com:
        http://net.tutsplus.com/tutorials/php/easy-package-management-with-composer/

  > Небольшой видео-tutorial по установке Compoer на русском от loftblog:
        http://www.youtube.com/watch?v=M4a88QyKjT8

  > Описание того, как работает autoload в composer:
        http://4devs.io/a/autoload-composer

  > Подробное описание параметров composer.json (schema):
        https://github.com/composer/composer/blob/master/res/composer-schema.json

  > Как работает автозагрузка в PHP?
        1. http://www.php.net/manual/ru/language.oop5.autoload.php
        2. http://www.php.net/manual/ru/function.spl-autoload-register.php


*****************************************************
Оглавление:

  > Общая информация
    > Что такое Composer?
    > Как работает Composer?
    > Какие преимущества даёт использование Composer?
    > Что это за расширение .phar у файла composer.phar?

  > Установка Composer на Windows
    > Системные требования
    > Автоматическая установка
    > Ручная установка
  > Настройка и работа с Composer в PHPStorm

  > Концепция пакетов ресурсов и репозиториев
    > Концепция пакета ресурсов (packages)
    > Концепция репозитория

  > Что такое package в Composer?
    > Package - пакет ресурсов
    > Каждый пакет ресурсов имеет имя
    > У пакета ресурсов могут быть разные версии
    > О packagist.org

  > Использование Composer
    > Запись зависимостей в composer.json
    > Установка зависимостей из composer.json
    > Обновление всех своих пакетов ресурсов
    > Обновление только указанных конкретных пакетов ресурсов
    > Как удалить ставший ненужным пакет?

  > Автозагрузка: в целом, в Composer
    > Какие 2 проблемы решает автозагрузка?
      > 2 проблемы
      > Подробнее проблеме "муторного подключения"
      > Подробнее о проблеме "конфликта имён"
      > Как автозагрузка решает проблему "муторного подключения"?
      > Как автозагрузка решает проблему "конфликта имён"?
    > Как работает автозагрузка в PHP?
      > Как всё работало до появления автозагрузки в PHP<5?
      > Как всё работало в 5.0 <= PHP < 5.1.2
      > Как всё работает в PHP >= 5.3
    > Какие 4 архитектуры организации автозагрузки поддерживает Composer?
      > На 2014.01.08 композер поддерживает 4 варианта архитектуры
      > Можно ли использовать их все одновременно?
      > Как выбрать архитектуру автозагрузки для конкретного пакета?
      > Подробнее об архитектуре PSR-0
        > Архитектура
        > Соглашение PSR-0
      > Подробнее об архитектуре Classmap
      > Подробнее об архитектуре files
    > Как Composer решает, какую архитектуру использовать при установке пакета?
      > 2-мя способами одновременно
      > Подробнее
    > Как осуществить автозагрузку
    > Можно ли приспособить автозагрузчик композера для своих нужд

  > Справочник команд и опций командной строки для Composer\
    > Общая информация
    > Глобальные опции
    > Выходные коды процессов
    > Команды (список и описание)
    > Команды (подробно)
  > Справочник параметров файла composer.json
    > Общая информация
    > Параметры (список и описание)
    > Параметры (подробно)




*****************************************************



> Общая информация

  > Что такое Composer?
    > Это инструмент для управления зависимостями в PHP.
    > Под зависимостями имеются в виду пакеты ресурсов, без которых данный
      конкретный проект не будет работать. Это различные библиотеки,
      фреймворки и т.д.

  > Как работает Composer?
    - Все зависимости проекта указываются в специальном JSON-файле.
    - С помощью специальной команды Composer сам скачивает и устанавливает
      все указанные в JSON-файле пакеты ресурсов.

  > Какие преимущества даёт использование Composer?

    > Преимущества:
      - Лёгкая устанвока пакетов ресурсов
      - Все зависимости проекта в 1 файле

    > Лёгкая установка пакетов ресурсов
      > Во-первых, при установке пакета ресурсов X, автоматически устанавливает
        в требуемом порядке также пакеты Y и Z, без которых X не будет
        работать.
      > Во-вторых, при установке пакета ресурсов X, нет необходимости
        заходить на его сайт. Все пакеты ресурсов доступны на packagist.org.

    > Все зависимости проекта в 1 файле
      > Все зависимости проекта хранятся в 1-м специальном JSON-файле.
      > Эти зависимости могут быть установлены в 1 команду.
      > Пример:
          Допустим, Вася и Петя делают проект. Они пользуются composer, так что
          все зависимости проекта хранятся в 1 JSON-файле. Тут к команде
          присоединяется Димон. Вася и Петя дают Димону этот JSON-файл, и
          последний в 1 команду устанавливает себе все пакеты ресурсов,
          необходимые для работы с проектом

  > Что это за расширение .phar у файла composer.phar?
    > PHAR - это PHP-архив, который позволяет упаковать много файлов в один.
    > Доступ к файлам в архиве осуществляется напрямую, без необходимости его распаковки.
    > С .phar файлами можно работать из командной строки.


> Установка Composer на Windows

  > Системные требования
    - Операционная система Windows/Linux/OSX.
    - PHP >= 5.3.2
      + некоторые обязательные PHP-опции, но установщик Composer'a
        предупредит о наличии любых несовместимостей.

  > Автоматическая установка

    1. Скачать .exe файл Composer-Setup.exe для автоматической установки:
          https://getcomposer.org/Composer-Setup.exe
    2. Запустить этот файл и следовать инструкциям.

  > Ручная установка

    1. В php.ini проверить, включено ли дополнение, указанное ниже.
       И если нет, то включить:

        extension=php_openssl.dll

    2. Скачать composer.phar в выбранную папку. Для этого в консоли
       ввести следующие команды:

        Переключиться на выбранную папку:
        -----
          cd с:\...

          Например:
          -----
            cd "C:\Users\Administrator\Desktop\Practice\Web Library\Vendors"

        Скачать composer.phar (любая команда на выбор):
        -----
          php -r "eval('?>'.file_get_contents('https://getcomposer.org/installer'));"
          php -r "readfile('https://getcomposer.org/installer');" | php

    3. Создать в той же папке, куда в п.2 был скачан composer.phar,
       файл composer.bat, и вставить в него следующее:

        @ECHO OFF
        php "%~dp0composer.phar" %*

    4. Указать в PATH Windows путь к папке, в которой установлен Composer.
       - Для этого пройти по следующему пути:
          Система (Щёлкнуть ПК мыши по "мой компьютер" -> Свойства) ->
          Дополнительные параметры системы -> Переменные среды -> PATH
       - Указать там в конце путь к выбранной папке.
       - Путь должен быть абсолютным, заканчиваться символом \, а в самом
         конце должна стоять точка с запятой ;

    5. Закрыть консоль. Открыть консоль и протестировать работоспособность
       свежеустановленного Composer, введя нижеуказанный код. Должен
       отобразиться список доступных команд Composer'a:

        composer -V


> Настройка и работа с Composer в PHPStorm

  > Настройка:
    > В PHPStorm пройти по следующему адресу:

        Tools -> Composer -> Init Composer...

    > Указать путь у composer.phar

  > Работа с Composer
    > Через PHPStorm очень удобно работать с Composer.
    > Чтобы установить новый пакет ресурсов через Composer, требуется
      пройти в PHPStorm по следующему адресу:

        Tools -> Composer -> Add dependency...

    > Появится окно, где можно найти все те же самые пакеты ресурсов,
      что доступны на packagist.org.
      > Можно выбрать нужную версию пакета и установить его прямо в
        этом самом окне.


> Концепция пакетов ресурсов и репозиториев

  > Концепция пакета ресурсов (packages)
    > Composer - это приложение для управления зависимостями приложения.
    > Package - пакет ресурсов - в сущности, просто директория, содержащая
      нечто. Обычно это PHP-код, но может быть всё, что угодно.
      - Также package содержит своё описание, в том числе имя и версию.
        С помощью последних package можно идентифицировать.
    > Внутренне Composer видит каждую версию как отдельный package.
    > Помимо имени и версии, package содержит также дополнительные
      метаданные, все они описаны ниже в справочнике.
      > Из них есть еще один параметр, оказывающий наибольшее влияние на
        установку - значение этого параметра указывают, откуда Composer должен
        скачивать данные:
        - Dist: данные скачиваются из упакованной версии пакета ресурсов,
                обычно это стабильный релиз.
        - Source: данные скачиваются из исходного кода напрямую из репозитория,
                  такого как GIT.

  > Концепция репозитория
    > Репозиторий - это источник пакетов с ресурсами. Он содержит все
      пакеты с ресурсами и их версии.
    > Composer просматривает все указанные тобой репозитории, и находит
      указанный пакет с ресурсами.
    > По умолчанию, Composer работает только с репозиторием packagist.org.
      > Но можно добавить и другие репозитории, для этого их надо указать
        в файле composer.json.


> Что такое package в Composer?

  > Package - пакет ресурсов
    > В Composer этим термином обозначается набор файлов с кодом, доступный
      для установки через Composer и присутствует на сайте packagist.org.
    > Почему я так перевёл термин packagist на русский?
      - Пакет - потому что содержит набор различных файлов и кода.
      - Ресурсов - потому что проект, использующий некий пакет ресурсов X,
                   без него работать не будет, а значит X - ресурс для этого
                   проекта.

  > Каждый пакет ресурсов имеет имя
    > Синтаксис его имени таков:

        vendor/name

    > Как видно, он состоит из 2-х частей:
    - vendor    | имя изготовителя этого пакета ресурсов
    - name      | имя этого пакета ресурсов

  > У пакета ресурсов могут быть разные версии
    > Операторы, которые используются при обозначении версий:
      - *     | любое число
      - ,     | логичиское И
      - |     | логическое ИЛИ
      - ~     | означает "до следующего значимого релиза не включительно"
    > Версии могут обозначаться следующими способами (примеры):
      - 1.0.2               | точное указание версии
      - 1.0.*               | любая версия от 1.0 включ. до 2.0 не включ.
      - >=1.0               | любая версия от 1.0 и выше
      - >=1.0,<2.0          | любая версия от 1.0 включ., но меньшая, чем 2.0
      - >=1.0,<1.2 | >=1.4  | любая версия от 1.0 до 1.1 включ., или от 1.4
      - ~1.2                | любая версия от 1.2 включ. до 2.0 не включ.
      - ~1.2.3              | любая версия от 1.2.3 включ. до 1.3 не включ.

  > О packagist.org
    > Packagist - главный репозиторий Composer'a.
    > Это место, где хранятся все доступные для установки через Composer
      пакеты ресурсов.
    > Когда ты указываешь параметр require в composer.json, то ты подразумеваешь,
      что Composer будет искать указанный тобой пакет ресурсов именно на
      packagist.org.
    > Туда же и надо выкладывать свои пакеты ресурсов командам, которые
      хотят сделать их доступными через Composer.
    > Если нужно, можно просто зайти на этот сайт и вручную посмотреть,
      какие там есть пакеты ресурсов.


> Использование Composer

  > Запись зависимостей в composer.json
    > Всё, что нужно для использования Composer - это файл composer.json.
    > В нём можно указать много различных параметров, которые рассмотрены
      ниже.
    > Но основной из них - require.
      > Часто указывают только этот параметр, и всё.
      > Его значение - это имя пакета ресурсов.
    > Пример содержимого composer.json:

      {
          "require": {
              "laravel/laravel": "4.*"
          }
      }

  > Установка зависимостей из composer.json
    - Для установки указанных в composer.json зависимостей, нужно применить
      в консоли следующую команду:

        composer install

    - Если использован JSON из примера выше, то Composer найдёт последнюю
      минорную версию laravel 4, и скачает её в директорию Vendor в
      composer.phar. Так что найти скачанный laravel можно будет по
      адресу:

        composer.phar/vendor/laravel/laravel

    - Затем Composer в файл composer.lock запишет точные версии пакетов
      ресурсов, которые он установил.
      - По сути Composer фиксирует данные версии для этого конкретного
        проекта.
      - И дальше, если ты передашь composer.json и composer.lock новому
        члену проекта Васе, то когда он будет устанавливать с помощью
        них пакеты ресурсов, Composer установит те их версии, что указаны
        в composer.lock, даже если Вася укажет в composer.json другие версии.
      - Всё это позволяет быть уверенным, что у всех членов команды установлены
        одни и теже пакеты ресурсов одних и тех же версий.
      - Если файла composer.lock не существует, то Composer прочитает версии
        из composer.json, установит их, и создаст файл composer.lock

  > Обновление всех своих пакетов ресурсов
    - Для обновления пакетов ресурсов, указанных в composer.json, до
      новых последних версий, нужно применить в консоли следующую команду:

        composer update

    - В результате чего будут обновлены:
      - Сами пакеты зависимостей
      - Файл composer.json - будут обновлены версии пакетов.
      - Файл composer.lock - будут обновлены версии пакетов.

  > Обновление только указанных конкретных пакетов ресурсов
    - Для этого надо просто указать их имена через пробел. Допустим,
      я хочу обновить laravel/laravel и cboden/ratchet. Тогда я пишу
      в консоль такую команду:

        composer update laravel/laravel cboden/ratchet

  > Как удалить ставший ненужным пакет?
    1. Удалить запись о нём в composer.json.
    2. Выполнить команду "composer update", и композер сам удалит
       ранее установленные пакеты, записей о которых он не найдёт в
       comopser.json, потому что мы удалили эти записи.


> Автозагрузка: в целом, в Composer

  > Какие 2 проблемы решает автозагрузка?

    > 2 проблемы:
      - Проблема "муторного подключения"
      - Проблема "конфликта имён"

    > Подробнее проблеме "муторного подключения"
      > В проектах часто используют чужой код.
      > Чужой код лежит в .php файлах.
      > Таких файлов может быть много.
      > Чтобы использовать весь чужой код в файле X нашего проекта, надо
        с помощью команд include и require подключить к нему все .php
        файлы с чужим кодом.
      > Таких файлов, как X, в нашем проекте много. Значит, чтобы и в них
        использовать чужой код, надо сделать тоже самое.
      > Всё это очень муторно.

    > Подробнее о проблеме "конфликта имён"
      > Все .php файлы чужого кода писались разными людьми.
      > Если подключить >= 2 таких файлов к нашему файлу X в одном пространстве
        имён (например, глобальном), то возможен конфликт имён.
      > Конфликт имён - использование одного и того же имени кодом из >= 2
        подключённых файлов, что вызывает их неправильную работу.

    > Как автозагрузка решает проблему "муторного подключения"?
      > Создаётся 1 файл: autoload.php.
      > Все .php файлы с внешним кодом подключают к нему.
      > В файлы проекта подключают файл autoload.php.
      > В результате, кол-во кода сокращается в разы, мутроность исчезает.

    > Как автозагрузка решает проблему "конфликта имён"?
      > Каждый отдельный .php файл внешнего кода помещается в уникальное
        пространство имён.
      > Это делают в файле autoload.php при их подключении к нему.
      > В результате, конфликт имён между .php файлами внешнего кода полностью
        исключается.


  > Как работает автозагрузка в PHP?

    > Как всё работало до появления автозагрузки в PHP<5?
      > Каждый отдельный класс хранили в отдельном .php файле.
      > Потом с помощью include/require подключали все файлы с классами
        в начале .php файла проекта.
      > Например:
          require_once 'folder\class1.php';
          require_once 'folder\class2.php';
          ...

    > Как всё работало в 5.0 <= PHP < 5.1.2
      > Пр.имён и функции spl_autoload_register ещё нет.
      > Есть только функция __autoload()
      > Она срабатывала тогда, когда интерпретатор PHP не смог найти
        какой-то класс в текущем файле, в качестве последнего шанса.
      > В этой функции мы говорили интерпретатору: "Эй, чувааа! Ищи класс
        вот в этих папках!".
      > Естественно, нашу подготовленную функцию __autoload теперь надо
        подключать к каждому файлу проекта, где нам нужна подобная автозагрузка.
      > Пример:

          <?php

            // Мы ему говорим, чтобы искал классы в текущей папке, в файлах
            // с именем класса и расширением .php:
            function __autoload($class_name) {
              include $class_name . '.php';
            }

            $obj  = new MyClass1();   // ищет файл MyClass1.php
            $obj2 = new MyClass2();   // ищет файл MyClass2.php

          ?>

    > Как всё работает в PHP >= 5.3
      > Появились пр.имён.
      > Появилась функция spl_autoload_register.
        > Она полностью заменяет функцию __autoload.
        > Позволяет зарегистрировать сколько угодно реализаций функции __autoload,
          можно даже использовать анонимные функции.
        > Когда интерпретатор не найдёт класс, он будет по очереди обращаться
          к этим зарегистрированным функциям в порядке их регистрации. Работает
          всё по тому же принципу, что с __autoload.
      > Ключевая новая особенность:
        - Если создать структуру папок в проекте, совпадающую со структурой
          пр.имён соответствующих классов, то нет даже необходимости определять
          callback-функцию, описывающую автозагрузку, а достаточно просто
          вызвать функцию spl_autoload_register().


  > Какие 4 архитектуры организации автозагрузки поддерживает Composer?

    > На 2014.01.08 композер поддерживает 4 варианта архитектуры:
      -PSR-0
      -PSR-4
      -Classmap
      -Files

    > Можно ли использовать их все одновременно?
      > Да.
      > Один внешний код можно автозагружать одним способом, другой другим.
        Это в порядке вещей.

    > Как выбрать архитектуру автозагрузки для конкретного пакета?
      - Если он следует соглашениям PSR-4, то выбрать архитектуру для PSR-4.
      - Если он следует соглашениям PSR-0, то выбрать архитектуру для PSR-0.
      - Если он не следует соглашениям PSR-0/4, то выбрать classmap.
      - Если он содержит PHP-функции, которые не могут быть автозагружены PHP,
        то выбрать files.

    > Подробнее об архитектуре PSR-0

      > Архитектура
        > Используется для пакетов, придерживающихся соглашения PSR-0.
        > Состоит в том, что для каждого пакета пространство имён привязывается
          к его относительному пути относительно корня проекта.
        > После применения команды "composer install" обновляется/генерируется
          файл "vendor/composer/autoload_namespaces.php", в котором у композера
          хранится .php код для регистрации PSR-0 классов.
        > Плюс такого подхода к автозагрузке:
          + При добавлении кода в уже прописанные пр.имён нет необходимости
            с помощью undate или install перегенерировать autoload_namespaces.php
            и autoload.php.
        > Пример:

              {
                  "autoload": {
                      "psr-0": {
                          "Monolog\\": "src/",
                          "Vendor\\Namespace\\": "src/",
                          "Vendor_Namespace_": "src/"
                      }
                  }
              }

        > Пример (если надо сказать: "Эй, чувааак! Ищи это пр.имён в этих вот
          нескольких директориях):

              {
                  "autoload": {
                      "psr-0": { "Monolog\\": ["src/", "lib/"] }
                  }
              }


      > Соглашение PSR-0
        > Стандарт PSR-0 разработан группой энтузиастов FIG.
        > FIG - Framework Interop Group.
        > Соглашения стандарта PSR-0:
          - Полное пространство имён должно иметь следующую структуру:

              \<Vendor Name>\(<Namespace>\)*<Class Name>

            > Здесь * - это из области рег.выр., говорит о том, что между
              Vendor Name и Class Name может быть любое число промежуточных папок.

          - Каждое пространство имён должно иметь на самом высоком уровне
            имя изготовителя кода ("Vendor Name").
          - Каждое пр.имён может иметь сколько угодно подпапок.
          - Каждый символ "_" в имени класса интерпретируется, как разделитель
            директорий.
          - Каждый класс должен иметь суффикс .php при загрузке из файловой
            системы.
          - Буквенно-цифровые символы в venror name, namespaces, class name
            могут быть любой комбинацией в любом регистре.
        > Примеры:

              \Doctrine\Common\IsolatedClassLoader  => /path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php
              \Symfony\Core\Request                 => /path/to/project/lib/vendor/Symfony/Core/Request.php
              \Zend\Acl                             => /path/to/project/lib/vendor/Zend/Acl.php
              \Zend\Mail\Message                    => /path/to/project/lib/vendor/Zend/Mail/Message.php
              \namespace\package\Class_Name         => /path/to/project/lib/vendor/namespace/package/Class/Name.php
              \namespace\package_name\Class_Name    => /path/to/project/lib/vendor/namespace/package_name/Class/Name.php


    > Подробнее об архитектуре Classmap
      > Позволяет автозагрузкчику работать с пакетами, не следующими соглашениям
        PSR-0/4.
      > Позволяет просто-напросто указать композеру папки, в которых он должен
        искать код, если его нет в текущем файле.
      > Путь задаётся от корня проекта, где лежит файл composer.json.
      > Например:

         "autoload": {
            "classmap": ["folder1/folder2"]
        }
      > Когда файл composer.json будет готов, надо:
        - Запустить команду "Composer install", после чего будет сгенерирован
          файл "vendor/composer/autoload_classmap.php", в котором у композера
          хранится PHP-код, осуществляющий автозагрузку загрузку не поддерживающих
          PSR-0/4 пакетов.
      > Минус такого подхода:
        - При добавлении новых классов необходимо с помощью команды update/install
          перегенерировать файл autoload_classmap.php, где композер явно прописывает
          пути к каждому файлу с классом.

    > Подробнее об архитектуре files
      > Предназначен для явной автозагрузки файлов.
      > Обычно это нужно, когда у нас просто есть файл с какими-нибудь
        функциями.
      > В отличие от classmap, эта архитектура позволяет явно указать
        подключаемый файл.
      > Пример:

          "autoload": {
              "files": ["src/htmlHelpers.php"]
          }


  > Как Composer решает, какую архитектуру использовать при установке пакета?

    > 2-мя способами одновременно:
      - Руководствуется тем, что указал разработчик пакета в composer.json пакета.
      - Руководствуется тем, что указал пользователь пакета в своём composer.json.

    > Подробнее:
      > Вот ты решил установить пакет X.
      > Пакет X описан его собственным файлом composer.json.
      > В этом файле может быть параметр autoload.
        - Если он есть, composer добавит инфу об этом пакете в autoload.php
        - Если его нет, то не добавит.
      > В параметре разработчик пакета указал, какую архитектуру должен использовать
        композер, когда пользователь будет устанавливать этот пакет. Принимая решение,
        разработчик руководствовался теми же соображениями, которые описаны выше
        в "Как выбрать архитектуру автозагрузки для конкретного пакета?"
      > Сам пользователь, который устанавливает пакет, также мог указать у себя
        в composer.json параметр autoload для этого пакета, и тогда композер
        использует и эту информацию.


  > Как осуществить автозагрузку?
    > Даже если использовать одновременно все виды архитектуры автозагрузки,
      пользователю всё равно нужно работать только с autoload.php.
    > Чтобы осуществить автозагрузку в файле проекта X.php, нужно подключить
      к нему с помощью include или require файл autoload.php.


  > Можно ли приспособить автозагрузчик композера для своих нужд?
    > Допустим, сам композер нам не нужен. А мы хотим использовать только
      его автозагрузчик.
    > Да, можно.
    > Для этого:
      - мы сами ручками в composer.json задаём нужное нам значение параметра
        autoload;
      - выполняем команду "composer install", чтобы autoload.php и все связанные
        с ним автозагрузочные файлы обновились;
      - всё, композер сделал своё дело - создал нам файл autoload.php, и можно
        начинать его использовать.


> Справочник команд и опций командной строки для Composer

  > Общая информация
    > В консоли, увидеть список всех доступных команд и опций Composer
      (он должен быть установлен, как описано выше), можно введя команду:

        composer

    > Подробнее узнать о конкретной команде или опции можно с помощью
      опции --help. Например, нам надо узнать подробнее о команде install.
      Тогда вводим в консоль следующую команду:

        composer --help install

    > Подробное описание параметров composer.json (schema):
        https://github.com/composer/composer/blob/master/res/composer-schema.json

  > Глобальные опции:

    Полное имя опции  Краткое имя опции   Описание
    ------------------------------------------------------------------------------------
    --verbose         -v                  увеличивает объём и подробность сообщений
    --help            -h                  отображает справку о команде
    --quiet           -q                  запретить вывод всех сообщений
    --no-interaction  -n                  не задавать никаких вопросов пользователю
    --working-dir     -d                  использует указанную директорию, как рабочую
    --profile                             отображает timing and memory usage information
    --ansi                                выводит информацию используя ANSI-симсолы
    --no-ansi                             отключить ANSI-вывод
    --version         -V                  отображает версию Composer'a

  > Выходные коды процессов:
    - 0     | OK
    - 1     | Generic/unknown error code
    - 2     | Dependency solving error code

  > Команды (список и описание):

    # init            | эта команда запускает конструктор файла composer.json
                        который в диалоге с пользователем конструирует этот файл,
                        и сохраняет его в текущей директории
    # install         | - читает файл composer.lock из текущей директории,
                          и устанавливает все пакеты ресурсов, указанные в
                          этом файле;
                        - если файла composer.lock нет, то читает вместо него
                          файл composer.json, и делает тоже самое; а кроме того
                          создаёт файл composer.lock
    # update          | - читает файл composer.json из текущей директории, и:
                          - обновляет
                          - удаляет
                          - устанавливает
                          все указанные в нём пакеты ресурсов.
                        - Также обновляет файл composer.lock.
    # require         | - добавляет в файл composer.json в текущей директории
                          новый пакет ресурсов, и сразу устанавливает его
                        - если устанавливать его немедленно не требуется, то
                          можно вызвать команду с опцией --no-update
                        - у команды есть ряд опций для настройки её работы,
                          которые рассмотрены ниже
    # global          | позволяет запускать другие команды Composer'а так, как будто
                        ты запускаешь их из корневой директории Composer'а
                        COMPOSER_HOME.
    # search          | поиск пакета ресурсов по имени на всех подключенных
                        репозиториях (по умолчанию, это только packagist.org).
    # show            | - без параметров показывает весь список доступных пакетов
                          ресурсов со всех подключённых репозиториев
                        - параметром можно указать имя пакета (как обычно, в формате
                          vendor/name), и тогда будет выведена подробная информация об
                          это пакете: доступные версии, лицензия и т.д.
    # depends         | показать, какие пакеты зависят от указанного
    # validate        | провести валидацию текущего composer.json
    # status          | - проверить, были ли изменены скаченные из source
                          пакеты ресурсов, или нет.
                        - с опцией --verbose можно даже узнать, что именно
                          и где было изменено
    # self-update     | - обновить composer - станый composer.phar будет заменён
                          новым, последней версии
                        - чтобы обновить composer до желаемой версии, нужно
                          лишь указать её через пробел
    # config          | - позволяет настроить несколько основных опций composer'а
                        - синтаксис таков:
                            config [options] [setting-key] [setting-value1] ... [setting-valueN]
                        - список доступных для настройки опций по адресу:
                            http://getcomposer.org/doc/04-schema.md#config
    # create-project  | - можно использовать Composer для создания новых проектов
                          из существующего пакета
    # dump-autoload   | обновляет файл autoload.php, и Т.О. позволяет не проходить
                        повтороно через процедуры install или update
    # licenses        | - выводит список, в каждой строчке которого:
                          имя, версия и лицензия
                          всех установленных пакетов ресурсов.
                        - можно использовать опцию --format-json, чтобы сделать
                          текст более читаемым
    # run-script      | - позволяет запускать композеровские скрипты
    # diagnose        | - если ты считаешь, что нашёл баг или какое-то странное поведение,
                          ты можешь запустить эту команду для автоматической проверки
                          многих известных проблем.
    # archive         | с помощью этой команды можно создать zip/tar архив указанного
                        пакета ресурсов указанной версии; также может быть использована
                        для того, чтобы заархивировать целый проект без исключенных/проигнорированных
                        файлов
    # help            | - позволяет получить справку о команде, указанной в аргументе



  > Команды (подробно):

    # init            | эта команда запускает конструктор файла composer.json
                        который в диалоге с пользователем конструирует этот файл,
                        и сохраняет его в текущей директории

            > Опции команды init
              --name          | название (не путать с именем, описанным выше)
                                пакета ресурсов
              --description   | описание пакета ресурсов
              --author        | автор пакета ресурсов
              --homepage      | сайт пакета ресурсов
              --require       | имя и версия требуемого пакета ресурсов в формате:
                                  foo/bar:1.0.0
              --require-dev   | список пакетов ресурсов, необходимых для
                                разработки вот этого данного пакета ресурсов
              --stability     | -s  указать минимальную стабильность пакета, можно
                                выбрать из:
                                - stable (по умолчанию)
                                - RC
                                - beta
                                - alpha
                                - dev

            > Диалог или опции?
              > Указать параметры, из которых будет сконструировано
                содержимое файла composer.json можно 3-мя способами:
                - В виде опций команды init
                - Лебо после запуска команды init в диалоге с ней
                - Либо в смешанном стиле
              > Пример: укажем name в опции, а остальное в диалоге, для
                этого введём команду:

                  composer init --name="ivan/petrov"





    # install         | - читает файл composer.lock из текущей директории,
                          и устанавливает все пакеты ресурсов, указанные в
                          этом файле, в папку vendor в текущей директории;
                        - если файла composer.lock нет, то читает вместо него
                          файл composer.json, и делает тоже самое; а кроме того
                          создаёт файл composer.lock
                        - а кроме того, устанавливает сам Composer как стороннюю
                          библиотеку в проект.

            > Опции команды install
              --prefer-source       | устанавливать прямо из исходников с репозитория (GIT и др.)
              --prefer-dist         | скачать из упакованной версии пакета ресурсов
              --dry-run             | чтобы пройти через процедуру установки, при этом
                                      без установки как таковой (просто чтобы посмотреть,
                                      как пройдет процедура).
              --dev                 | (установлено по умолчанию) установить пакеты
                                      ресурсов, перечисленные в параметрах require-dev
              --no-dev              | отменить установку пакетов ресурсов,
                                      перечисленных в параметрах require-dev
              --no-scripts          | отменить выполнение скриптов, определённых в
                                        composer.json
              --no-plugins          | отключить плагины
              --no-progress         | отключить отображение прогресса установки, который может
                                      навести беспорядок в некоторых терминалах, не поддерживающих
                                      символ backspace
              --optimize-autoloader | -o   оптимизировать автозагрузку


    # update          | - читает файл composer.json из текущей директории, и:
                          - обновляет
                          - удаляет
                          - устанавливает
                          все указанные в нём пакеты ресурсов.
                        - Также обновляет файл composer.lock.

            > Как обновить не все, а только указанные конкретные пакеты ресурсов
              - Для этого надо просто указать их имена через пробел. Допустим,
                я хочу обновить laravel/laravel и cboden/ratchet. Тогда я пишу
                в консоль такую команду:

                  composer update laravel/laravel cboden/ratchet

            > А вот так можно обновить все пакеты ресурсов от одного
              и того же производителя:

                  composer update laravel/*

            > Опции команды update
              --prefer-source       | устанавливать прямо из исходников с репозитория (GIT и др.)
              --prefer-dist         | скачать из упакованной версии пакета ресурсов
              --dry-run             | чтобы пройти через процедуру установки, при этом
                                      без установки как таковой (просто чтобы посмотреть,
                                      как пройдет процедура).
              --dev                 | (установлено по умолчанию) установить пакеты
                                      ресурсов, перечисленные в параметрах require-dev
              --no-dev              | отменить установку пакетов ресурсов,
                                      перечисленных в параметрах require-dev
              --no-scripts          | отменить выполнение скриптов, определённых в
                                        composer.json
              --no-plugins          | отключить плагины
              --no-progress         | отключить отображение прогресса установки, который может
                                      навести беспорядок в некоторых терминалах, не поддерживающих
                                      символ backspace
              --optimize-autoloader | -o   оптимизировать автозагрузку
              --lock                | ?
              --with-dependencies   | ?


    # require         | - добавляет в файл composer.json в текущей директории
                          новый пакет ресурсов, и сразу устанавливает его
                        - если устанавливать его немедленно не требуется, то
                          можно вызвать команду с опцией --no-update
                        - у команды есть ряд опций для настройки её работы,
                          которые рассмотрены ниже

            > Опции команды update
              --prefer-source       | устанавливать прямо из исходников с репозитория (GIT и др.)
              --prefer-dist         | скачать из упакованной версии пакета ресурсов
              --dev                 | добавить пакет ресурсов в require-dev
              --no-update           | отключить автоматический update (и, как следствие, установку добавленного пакета)
              --no-progress         | отключить отображение прогресса установки, который может
                                      навести беспорядок в некоторых терминалах, не поддерживающих
                                      символ backspace

    # global          | позволяет запускать другие команды Composer'а так, как будто
                        ты запускаешь их из корневой директории Composer'а
                        COMPOSER_HOME.
    # search          | поиск пакета ресурсов по имени на всех подключенных
                        репозиториях (по умолчанию, это только packagist.org).

            > Опции команды search
              --only-name   | -N    искать только в имени, т.е. если имя состоит
                              из 2-х частей: vendor/name, то наглядно видно, что
                              поиск будет производитсья только во 2-й части name

    # show            | - без параметров показывает весь список доступных пакетов
                          ресурсов со всех подключённых репозиториев
                        - параметром можно указать имя пакета (как обычно, в формате
                          vendor/name), и тогда будет выведена подробная информация об
                          это пакете: доступные версии, лицензия и т.д.

            > Чтобы посмотреть весь список доступных пакетов, нужно ввести
              в консоли следующую команду:

                composer show

            > Чтобы посмотреть информацию о пакете laravel/framework, нужно
              ввести в консоли следующую команду:

                composer show laravel/framework

            > Опции команды update
              --installed   | -i    показать список установленных пакетов ресурсов
              --platform    | -p    показать только пакеты для PHP
              --serf        | -s    показать информацию о корневом package

    # depends         | показать, какие пакеты зависят от указанного

            > Показать, какие пакеты ресурсов зависят от пакета
              laravel/framework:

              Искать и в require, и в require-dev:
              -----
                composer depends laravel/framework

              Искать только в require:
              -----
                composer depends --link-type=require laravel/framework


            > Опции команды depends
              --link-type: где искать - в require или require-dev, по умолчанию
                           поиск производится одновременно и там, и там.

    # validate        | провести валидацию текущего composer.json

            > Пример команды:

                composer validate

    # status          | - проверить, были ли изменены скаченные из source
                          пакеты ресурсов, или нет.
                        - с опцией --verbose можно даже узнать, что именно
                          и где было изменено
    # self-update     | - обновить composer - станый composer.phar будет заменён
                          новым, последней версии
                        - чтобы обновить composer до желаемой версии, нужно
                          лишь указать её через пробел

            > Обновить composer до последней версии:

                composer self-update

            > Обновить composer до версии 1.0.0-alpha7

                composer self-update 1.0.0-alpha7

            > Опции команды self-update
              --rollback      | -r   откатить до предыдущей установленной версии
              --clean-backups | удалить старые бэкапы во время обновления, это делает
                                устанавливаемую версию единственным бэкапом, доступным
                                после обновления

    # config          | - позволяет настроить несколько основных опций composer'а
                        - синтаксис таков:
                            config [options] [setting-key] [setting-value1] ... [setting-valueN]
                        - список доступных для настройки опций по адресу:
                            http://getcomposer.org/doc/04-schema.md#config

            > Опции команды config
              --global  | -g
                          - вписываются в глобальный конфиг, по умолчанию расположенный
                            по адресу $COMPOSER_HOME/config.json
                          - без этой опции, команда config подействует либо на
                            текущий файл composer.json, либо на указанный в --file
              --editor  | -e
                          - открывает локальный файл composer.json, используя текстовый
                            редактор, указанный в переменной среды EDITOR
                          - а если одновременно задействована опция --global, то
                            открывает файл глобального конфига.
              --unset   | - удаляет опцию, указанную в setting-key
              --list    | -l
                          - показывает текущий список переменныых
                          - если одновременно задействована опция --global,
                            показывает список переменных в глобальном конфиге
              --file    | -f
                          - действует на указанный файл, а не на composer.json
                          - эта опция не может быть использована одновременно с --global

    # create-project  | - можно использовать Composer для создания новых проектов
                          из существующего пакета

            > Создание нового проекта laravel в директории test:

                composer create-project laravel/framework "C:\Users\Administrator\Desktop\Practice\Web Library\Vendors\Test" 4.*

            > Опции команды create-project
              --repository-url  | указать адрес репозитория, который будет использован для
                                  поиска пакета ресурсов вместо packagist.org
                                  - это может быть как URL, так и локальный адрес
              --stability       | -s  указать минимальную стабильность пакета, можно
                                 выбрать из:
                                 - stable (по умолчанию)
                                 - RC
                                 - beta
                                 - alpha
                                 - dev
              --prefer-source   | устанавливать прямо из исходников с репозитория (GIT и др.)
              --prefer-dist     | скачать из упакованной версии пакета ресурсов
              --dev             | (установлено по умолчанию) установить пакеты
                                  ресурсов, перечисленные в параметрах require-dev
              --no-install      | отключить установку вендоров
              --no-plugins      | отключить плагины
              --no-scripts      | отменить выполнение скриптов, определённых в
                                  composer.json
              --no-progress     | отключить отображение прогресса установки, который может
                                  навести беспорядок в некоторых терминалах, не поддерживающих
                                  символ backspace
              --keep-vcs        | не удалять метаданные VCS из создаваемого проекта


    # dump-autoload   | обновляет файл autoload.php, и Т.О. позволяет не проходить
                        повтороно через процедуры install или update

            > Опции команды dump-autoload
              --optimaze    | -o   оптимизирует файл autoload.php

    # licenses        | - выводит список, в каждой строчке которого:
                          имя, версия и лицензия
                          всех установленных пакетов ресурсов.
                        - можно использовать опцию --format-json, чтобы сделать
                          текст более читаемым
    # run-script      | - позволяет запускать композеровские скрипты
    # diagnose        | - если ты считаешь, что нашёл баг или какое-то странное поведение,
                          ты можешь запустить эту команду для автоматической проверки
                          многих известных проблем.
    # archive         | с помощью этой команды можно создать zip/tar архив указанного
                        пакета ресурсов указанной версии; также может быть использована
                        для того, чтобы заархивировать целый проект без исключенных/проигнорированных
                        файлов

            > Заархивировать последнюю версию laravel/framework 4.*,
              архив появится в корневой папке композера, в моём случае,
              в папке:
                "C:\Users\Administrator\Desktop\Practice\Web Library\Vendors"

                composer archive laravel/framework 4.* --format=zip

            > Опции команды archive
              --format    | -f   как архивироват: zip или tar?
              --dir       | в какую папку сохранить результирующих архив

    # help            | - позволяет получить справку о команде, указанной в аргументе

            > Пример - получить информацию о команде install (описание, опции и т.д.):

                composer help install

> Справочник параметров файла composer.json

  > Общая информация
    > В этом справочнике поясняется значение каждого поля в файле
      composer.json.
    > Root Package - это файл composer.json, который находится в корне твоего
      проекта.

  > Параметры (список и описание):
    # name              | имя пакета ресурсов
    # description       | краткое описание пакета ресурсов
                          > требуется для опубликованных на репозитории
                            пакетов ресурсов
    # version           | версия пакета ресурсов
    # type              | тип пакета ресурсов (по умолчанию: library)
    # keywords          | > массив ключевых слов, которые можно отнести к этому
                            пакету ресурсов
                          > Не обязателен
    # homepage          | > URL сайта проекта
                          > Не обязателен
    # time              | > Дата релиза данной версии
                          > В одном из этих форматов:
                            - YYYY-MM-DD
                            - YYYY-MM-DD HH-MM-SS
                          > Не обязателен
    # licence           | > по какой лицензии распространяется пакет ресурсов
                          > Не обазятелен, но строго рекомендуется к использованию.
    # authors           | > авторы пакета ресурсов
                          > объект для каждого автора должен содержать 4 параметра:
                            - name      | имя автора
                            - email     | email автора
                            - homepage  | сайт автора
                            - role      | роль автор в проекте
    # support           | > контактная информация службы поддержки проекта
                          > не обязателен
                          > включает следующие поля:
                            - email   | email поддержки
                            - issues  | URL на трекер ошибок
                            - forum   | URL на форум поддержки
                            - wiki    | URL на WiKi поддержки
                            - irc     | IRC-канал для поддержки
                            - source  | URL для скачки из источника
    # package links     | > имя и версия пакета ресурсов
                          > могут быть использованы 5 видов параметров:
                            - require
                            - require-dev
                            - conflict
                            - replace
                            - provide
                          > также в них можно указать метку стабильности
    # suggest           | рекомендованный список пакетов ресурсов для использования с этим
    # autoload          | настройка autoload.php при установке пакета ресурсов
    # include-path      | (устарело)
    # target-dir        | позволяет указать папку, куда будет установлен пакет ресурсов
    # minimum-stability | (root only) фильтрация пакетов по их стабильности
                          - По умолчанию: stable
    # prefer-stable     | (root only) если true, composer будет искать самую стабильную версию
                          - принимает значения true/false
    # repositories      | (root only) указать кастомные репозитории, помимо packagist
    # config            | (root only) набор опций, используется только для проектов
    # scripts           | (root-only) Композер позволяет вмешиваться на различных этапах
                          установочного процесса с помощью скриптов. Подробнее об этом здесь:
                            http://getcomposer.org/doc/articles/scripts.md
    # extra             | Какие-то дополнительные данные для скриптов
    # bin               | набор файлов, которые должны быть рассмотрены, как бинарники, и сохранены
                          в директорию bin-dir
    # archive           | набор опций для создания архива пакета


  > Параметры (подробно):
    # name              | имя пакета ресурсов

            > Должно быть следующего формата:
                  производитель/название
              - производитель - тот, кто сделал этот пакет ресурсов
              - название - название этого пакета ресурсов
            > Примеры:
              - monolog/monolog
              - laravel/framework

    # description       | краткое описание пакета ресурсов
                          > требуется для опубликованных на репозитории
                            пакетов ресурсов

    # version           | версия пакета ресурсов

            > Должна быть в следующем формате:
                X.Y.Z-суффикс
            > Суффиксы могут быть следующие:
              - stable (по умолчанию)
              - RC
              - beta
              - alpha
              - dev
            > У пакета ресурсов могут быть разные версии
              > Операторы, которые используются при обозначении версий:
                - *     | любое число
                - ,     | логичиское И
                - |     | логическое ИЛИ
                - ~     | означает "до следующего значимого релиза не включительно"
              > Версии могут обозначаться следующими способами (примеры):
                - 1.0.2               | точное указание версии
                - 1.0.*               | любая версия от 1.0 включ. до 2.0 не включ.
                - >=1.0               | любая версия от 1.0 и выше
                - >=1.0,<2.0          | любая версия от 1.0 включ., но меньшая, чем 2.0
                - >=1.0,<1.2 | >=1.4  | любая версия от 1.0 до 1.1 включ., или от 1.4
                - ~1.2                | любая версия от 1.2 включ. до 2.0 не включ.
                - ~1.2.3              | любая версия от 1.2.3 включ. до 1.3 не включ.
            > Примеры:
              - 1.0.0
              - 1.0.2
              - 0.2.5
              - 1.0.0-dev
              - 1.0.0-stable

    # type              | тип пакета ресурсов (по умолчанию: library)

            > Зачем указывать тип?
              > Тип пакета реазилует соответствующую этому типу логику установки
                для данного пакета ресурсов.
              > Если у тебя имеется пакет ресурсов, который требует свою особую
                логику установки, ты можешь определить кастомный тип.

            > Рекомендации
              > Указывать type требуется только в том случае, если надо установить
                некий пакет ресурсов, который требует кастомную логику.
              > В иных случаях рекомендуется опустить этот параметр.

            > Из коробки, Composer поддерживает 4 типа:
              - library
                > Установлен по умолчанию.
                > Файлы просто копируются в папку vendor.
              - project
                > Обозначает скорее проект, чем библиотеку.
                > Например, Synfony или Laravel.
              - metapackage
                > Пустой пакет, который содержит ссылки для установки и запускает
                  их установку. Но при этом сам по себе не делает никаких записей
                  в файловую систему.
                > Т.О. не требует наличия ключа dist или source.
              - composer-plugin
                > Может обеспечивать установщик для других пакетов, которые имеют
                  кастомный тип.
                  > Подробнее см. здесь:
                      http://getcomposer.org/doc/articles/custom-installers.md

    # keywords          | > массив ключевых слов, которые можно отнести к этому
                            пакету ресурсов
                          > Не обязателен

    # homepage          | > URL сайта проекта
                          > Не обязателен

    # time              | > Дата релиза данной версии
                          > В одном из этих форматов:
                            - YYYY-MM-DD
                            - YYYY-MM-DD HH-MM-SS
                          > Не обязателен

    # licence           | > по какой лицензии распространяется пакет ресурсов
                          > Не обазятелен, но строго рекомендуется к использованию.

            > Рекомендованная нотация для наиболее распространённых лицензий:
              - Apache-2.0
              - BSD-2-Clause
              - BSD-3-Clause
              - BSD-4-Clause
              - GPL-2.0
              - GPL-2.0+
              - GPL-3.0
              - GPL-3.0+
              - LGPL-2.1
              - LGPL-2.1+
              - LGPL-3.0
              - LGPL-3.0+
              - MIT

            > Для проекта с закрытым исходным кодом можно использовать значение
              "proprietary"

            > Примеры:

                {
                    "license": "MIT"
                }

                {
                    "license": [
                       "LGPL-2.1",
                       "GPL-3.0+"
                    ]
                }

    # authors           | > авторы пакета ресурсов
                          > объект для каждого автора должен содержать 4 параметра:
                            - name      | имя автора
                            - email     | email автора
                            - homepage  | сайт автора
                            - role      | роль автор в проекте

            > Пример:

                {
                    "authors": [
                        {
                            "name": "Nils Adermann",
                            "email": "naderman@naderman.de",
                            "homepage": "http://www.naderman.de",
                            "role": "Developer"
                        },
                        {
                            "name": "Jordi Boggiano",
                            "email": "j.boggiano@seld.be",
                            "homepage": "http://seld.be",
                            "role": "Developer"
                        }
                    ]
                }

    # support           | > контактная информация службы поддержки проекта
                          > не обязателен
                          > включает следующие поля:
                            - email   | email поддержки
                            - issues  | URL на трекер ошибок
                            - forum   | URL на форум поддержки
                            - wiki    | URL на WiKi поддержки
                            - irc     | IRC-канал для поддержки
                            - source  | URL для скачки из источника

            > Примеры:

                {
                    "support": {
                        "email": "support@example.org",
                        "irc": "irc://irc.freenode.org/composer"
                    }
                }

    # package links     | > имя и версия пакета ресурсов
                          > могут быть использованы 5 видов параметров:
                            - require
                            - require-dev
                            - conflict
                            - replace
                            - provide
                          > также в них можно указать метку стабильности

            > Подробнее о require
              > Поля require содержат ссылки на пакеты ресурсов, которые
                требуется установить.

            > Подробнее о require-dev
              > Поля require-dev содержат ссылки на пакеты ресурсов, необходимые
                для разработки.
              > Только для root package.

            > Что устанавливают команды install и update?
              > Они устанавливают и require-пакеты, и require-dev-пакеты.
              > В этих командах, чтобы предотвратить установку require-dev-пакетов,
                нужно использовать опцию --no-dev.

            > Подробнее о conflict
              > Перечиляет имена пакетов, которые конфликтуют с этой версией
                пакета. Это запрещает их установку совместно с твоим пакетом.

            > Подробнее о replace
              > Перечисляет пакеты, которые заменены этим пакетом.
              > Это позволяет опубликовать пакет новой версии с другим именем
                и/или номером версии.
              > А другие пакеты, требующие оригинальный пакет для своей работы,
                продолжают работать с новой версией пакета, потомау сто она
                заменяет (replace) оригинальную версию.

            > Подробнее о provide
              > Список пакетов, которые требуют для работы этот пакет.

            > Примеры:

              Простой пример:
              -----
                  {
                      "require": {
                          "monolog/monolog": "1.0.*"
                      }
                  }

              Пример с метками стабильности:
              -----
                  {
                      "require": {
                          "monolog/monolog": "1.0.*@beta",
                          "acme/foo": "@dev"
                      }
                  }

    # suggest           | рекомендованный список пакетов ресурсов для использования с этим

            > Подробнее о suggest
              > В suggest можно указать список пакетов ресурсов, которые по мнению
                автора наилучшим образом сочетаются с этим пакетом.
              > Это всего лишь рекомендация, не обязательная к выполнению.
              > Сообщение со списком suggested (предложенных) пакетов ресурсов
                появляется после установки данного пакета ресурсов, просто чтобы
                дать пользователю подсказку, какие пакеты еще можно установить.

            > Пример:

                {
                    "suggest": {
                        "monolog/monolog": "Allows more advanced logging of the application flow"
                    }
                }

    # autoload          | настройка autoload.php при установке пакета ресурсов

            > Всего поддерживается 3 вида настройки autoload:
              - PSR-0     | (рекомендуется)
              - Classmap  |
              - Files     |

            > Что такое настройка autoload:
              > Чтобы autoload.php при подлкючении к проекту давал нам доступ
                к установленным пакетам, он должен быть соответствующим образом
                настроен.
              > Composer при установке пакета настраивает файл autoload.php
                автоматически, руководствуясь именно этим самым параметром
                файла composer.json.

            > Подробнее о настройки через PSR-0
              > Запись для каждого пакета имеет следующий формат:

                  "Пространство_имён": "Путь_к_пакету_относительно_его_корня"

              > Все записи PSR-0 во время выполнения команд install/update
                преобразуются в массив из записей ключ/значение, который
                можно найти по адресу: vendor/composer/autoload_namespaces.php

              > Пример:

                  {
                      "autoload": {
                          "psr-0": {
                              "Monolog\\": "src/",
                              "Vendor\\Namespace\\": "src/",
                              "Vendor_Namespace_": "src/"
                          }
                      }
                  }

            > Подробнее о Classmap
              > См. справочник или выше.

            > Подробнее о Files
              > См. справочник или выше.

    # include-path      | (устарело)
    # target-dir        | позволяет указать папку, куда будет установлен пакет ресурсов

              > Пример:

                  {
                      "autoload": {
                          "psr-0": { "Symfony\\Component\\Yaml\\": "" }
                      },
                      "target-dir": "Symfony/Component/Yaml"
                  }

    # minimum-stability | (root only) фильтрация пакетов по их стабильности
                          - По умолчанию: stable

            > Возможные значения (чем ниже, тем меньше стабильность):
              - stable
              - RC
              - beta
              - alpha
              - dev
            > При поиске пакета ресурсов для установки, все пакеты с значением
              этого параметра ниже указанного будут проигнорированы.

    # prefer-stable     | (root only) если true, composer будет искать самую стабильную версию
                          - принимает значения true/false
    # repositories      | (root only) указать кастомные репозитории, помимо packagist

            > Общая информация
              > По умолчанию composer работает только с 1-м репозиторием -
                packagist.com.
              > В этом параметре можно указать другой репозиторий, в котором
                composer будет осущетвлять поиск.
              > Этот параметр можно добавить только в Root Package.

            > Поддерживаются следующие типы репозиториев:
              - composer
                > Репозиторий этого типа - это просто файл packages.json, который
                  содержит список объектов composer.json с дополнительной
                  dist и/или source информацией.
                > packages.json загружается с помощью PHP-потока, можно указать
                  дополнительные опции, используя параметр options.
              - vcs
                > В основе этого репозитория лежат системы контроля версий,
                  такие как git, svn и hg.
                > Пакеты ресурсов извлекаются прямо из этих систем.
              - pear
                > Можно закачать любой pear-репозиторий в свой composer-проект.
              - package
                > Если ты зависишь от проекта, который не поддерживается
                  Composer'ом, то можно определить пакет используя это значение.
                  В качестве значения package ты указываешь объект
                  composer.json.

            > Пример:

                {
                    "repositories": [
                        {
                            "type": "composer",
                            "url": "http://packages.example.com"
                        },
                        {
                            "type": "composer",
                            "url": "https://packages.example.com",
                            "options": {
                                "ssl": {
                                    "verify_peer": "true"
                                }
                            }
                        },
                        {
                            "type": "vcs",
                            "url": "https://github.com/Seldaek/monolog"
                        },
                        {
                            "type": "pear",
                            "url": "http://pear2.php.net"
                        },
                        {
                            "type": "package",
                            "package": {
                                "name": "smarty/smarty",
                                "version": "3.1.7",
                                "dist": {
                                    "url": "http://www.smarty.net/files/Smarty-3.1.7.zip",
                                    "type": "zip"
                                },
                                "source": {
                                    "url": "http://smarty-php.googlecode.com/svn/",
                                    "type": "svn",
                                    "reference": "tags/Smarty_3_1_7/distribution/"
                                }
                            }
                        }
                    ]
                }

    # config            | (root only) набор опций, используется только для проектов

            > Список опций:
              - process-timeout     | (300 сек. по умолч.) таймаут для процессов composer'a в секундах
              - use-include-path    | (false по умолч.) если true, autoloader composer'a будет искть
                                      php-классы также в include path
              - preferred-install   | (auto по умолч.) позволяет установить приоритетный метод установки пакетов для composer'а
                                      - Доступные значения: auto, source, dist.
              - github-protocols    | (по умолчанию ["git","https"]) Список протоколов для соединения
                                      с github.com, в приоритетном порядке.
              - github-oauth        | Список доменных имён и oauth ключей.
              - vendor-dir          | (по умолчанию vendor) Можно устанавливать пакеты ресурсов
                                      и в другую директорию.
              - bin-dir             | (по умолчанию vendor/bin) Если в проекте есть бинарники,
                                      они будут лежать в этой директории.
              - cache-dir           | - по умолчанию $home/cache для UNIX-систем
                                      - по умолчанию C:\Users\<user>\AppData\Local\Composer для Windows систем
              - cache-files-dir     | (по умолчанию $cache-dir/files) Хранит zip-архивы пакетов ресурсов.
              - cache-repo-dir      | (по умолчанию $cache-dir/repo) Хранит метаданные для типа composer,
                                      и для VCS-типов репозиториве svn, github и bitbucket.
              - cache-vcs-dir       | (по умолчанию $cache-dir/vcs) Хранит VCS-клоны для загрузки метеданных
                                      для git/hg типов и ускорения установки таким образом.
              - cache-files-ttl     | (по умолчанию 15552000 - 6 месяцев) Composer кэширует все dist-пакеты, которые
                                      он скачивает; и хранит их 6 месяцев, после чего удаялет.
              - cache-files-maxsize | (300мб по умолчанию) максимальный размер кэша для сохранения
                                      скаченных composer'om пакетов ресурсов
              - prepend-autoloader  | (по умолчанию true) если false, то autoloader композера не будет подготовлен
                                      к текущим автолоадерам
              - autoloader-suffix   | (по умолчанию null) Строка, которая будет использована как суффикс для
                                      сгенерированного композером автолоадера.
              - github-domains      | (по умолчанию ["github.com"]) Список доменов для github-режима.
              - notify-on-install   | (по умолчанию true) Композер позволяет указать URL, на который отправляется
                                      уведомление каждый раз, когда данный пакет был кем-то установлен
              - discard-changes     | (по умолчанию false)

    # scripts           | (root-only) Композер позволяет вмешиваться на различных этапах
                          установочного процесса с помощью скриптов. Подробнее об этом здесь:
                            http://getcomposer.org/doc/articles/scripts.md

    # extra             | Какие-то дополнительные данные для скриптов

    # bin               | набор файлов, которые должны быть рассмотрены, как бинарники, и сохранены
                          в директорию bin-dir

    # archive           | набор опций для создания архива пакета

              > Список опций:
                - exclude   | позволяет указать список путей, которые не надо добавлять
                              в архив.





-------------------------------------------------- */




















