<?php
/* --------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
Все о работе с числами и математикой


Функции (выборка наиболее нужных)
> abs             | модуль числа
> base_convert    | преобразование числа между произвольными системами счисления
> ceil            | округляет дробь до целого в большую сторону
> floor           | округляет дробь до целого в меньшую сторону
> round           | округляет число float до ближайшего целого с указанной точностью
> pow             | возведение в степень
> sqrt            | возвращает квадратный корень
> max             | возвращает максимальный из переданных аргументов или элементов массива
> min             | возвращает минимальный из переданных аргументов или элементов массива
> is_finite       | проверяет, является ли объект допустимым конечным числом
> is_infinite     | проверяет, является ли объект бесконечным числом
> is_nan          | проверяет, является ли боъект не числом
> sin             | синус
> cos             | косинус
> rand            | генерирует случайное целое число методом libc, можно указать диапазон
> mt_rand         | генерирует случайное целое число методом mt (быстрее), можно указать диапазон
> number_format   | возвращает число float в указанном формате

Прочее
> Демонстрация неточности вычислений с float


-------------------------------------------------- */

// number abs( mixed $number )
// модуль числа
    $n = abs(5-7);  // 2

// string base_convert( string $number, int $frombase, int $tobase )
// > преобразование числа между произвольными системами счисления
// > Возвращает строку, содержащую чичло $number в системе счисления tobase
    $n = base_convert(555, 10, 2);  // 1000101011

// float ceil( float $value )
// > округляет дробь до целого в большую сторону
    $n = ceil(5.2);  // 6

// float floor( float $value )
// > округляет дробь до целого в меньшую сторону
    $n = floor(5.2);  // 5

// float round( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] )
// > округляет число float с указанной точностью
// > $precision - количество знаков после запятой
// > $mode - как округлять (по умолчанию: 1.4999 округляется до 1, а 1.5 до 2).
    $n = round(1.2449, 2);  // 1.24
    $n = round(1.2450, 2);  // 1.25

// number pow( number $base, number $exp )
// > Возведение base в степень exp
    $n = pow(2,3);  // 8

// float sqrt( float $arg )
// > возвращает квадратный корень из arg
    $n = sqrt(100);  // 10

// mixed max( array $values )
// mixed max( mixed $value1, mixed value2 [, mixed $... ] )
// > возвращает максимальный из переданных аргументов или элементов массива
    $arr = [1,2,6,3,2,6,8,43,7,4,2,6,55,3,23,6,5];
    $n = max($arr);  // 55

// mixed min( array $values )
// mixed min( mixed $value1, mixed value2 [, mixed $... ] )
// > возвращает минимальный из переданных аргументов или элементов массива
    $arr = [1,2,6,3,2,6,8,43,7,4,2,6,55,3,23,6,5];
    $n = min($arr);  // 1

// bool is_finite( float $val )
// > проверяет, является ли объект допустимым конечным числом
    $n = is_finite(100);     // TRUE
    $n = is_finite(log(0));  // FALSE

// bool is_infinite( float $val )
// > проверяет, является ли объект бесконечным числом
    $n = is_infinite(log(0));  // TRUE

// bool is_nan( float $val )
// > проверяет, является ли оъект не числом
    $n = is_nan(10);       // FALSE
    $n = is_nan(acos(8));  // TRUE

// float sin( float $arg )
// > синус
$n = sin(90);  // 0.89399666360056

// float cos( float $arg )
// > косинус
$n = cos(90);  // -0.44807361612917

// int rand( void )
// int rand( int $min, int $max )
// > генерирует случайное целое число, можно указать диапазон
// > при вызове без параметров возвращает случайное цело от 0 до getrandmax()
// > ... при вызове с параметрами от min до max включительно
    $n = rand(10,20);

// int mt_rand( void )
// int mt_rand( int $min, int $max )
// > генерирует случайное целое число методом mt (быстрее), можно указать диапазон
    $n = mt_rand(10,20);

// string number_format( float $number [, int $decimals = 0] )
// string number_format( float $number, int $decimals = 0, string $dec_point = '.', string $thousands_sep = ',')
// > возвращает число float в указанном формате
// > принимает 1 из 2-х указанных выше наборов параметров
// > $number         - исходное число float для форматирования
// > $decimals       - количество знаков после запятой
// > $dec_point      - строка, выступающая в роле той самой запятой между целыми и десятичными разрядами
// > $thousands_sep  - строка, выстапающая в роле разделителя для тысяч
    $a = number_format(105625.300);                // 105,625
    $a = number_format(105625.300,3,'.',',');      // 105,625.300
    $a = number_format(105625.300,3,'-X-','-Y-');  // 105-Y-625-X-300


// Демонстрация неточности вычислений с float
// > Суть в том, что рациональные числа вроде 0.1 или 0.7 не могут быть точно
//   представлены в 2-ичной системе. Поэтому операции с ними рождают неточности.
//   > Чтобы исключить любые неточности из вычислений, надо проводить вычисления
//     только с целыми числами.

    // 0.1 и 0.7 не могут быть точно представлены в 2-ичной системе, в результате
    //   при сложении этих чисел складываются 2 неточности, и рождают третью;
    //   получается что-то вроде: (0.1+0.7)*10 = 7.9999999922124123
        $c = (integer)( (0.1+0.7)*10 );  // 7   (а не 8, как ожидалось)

    // Как исключить любые неточности из вычислений?
    // > суть: проводить операции только с целыми числами
        $c = (integer)(0.1*10) + (integer)(0.7*10); // 8

    // если надо просто сложить 0.7 и 0.1 без умножения на 10:
    // > это работает потому что числа 1 и 7 могут быть точно представлены
    //   в двоичной системе, и никаких неточностей нет.
        $c = round( (0.1 + 0.7)*10 ) / 10;  // 0.8
        $c = (integer)($c*10);              // 8



/* --------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------

> Здесь ты найдешь все математические функции по работе с числами:
  > http://www.php.net/manual/ru/ref.math.php

> Переменные типа float лучше не использовать для точных расчетов,
  так как они имеют ограниченную точность, и могут давать не соответствующие
  ожиданиям результаты. Лучше приводить их к целым, затем уже проводить расчеты.



-------------------------------------------------- */
?>