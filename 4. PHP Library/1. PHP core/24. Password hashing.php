<?php
/* --------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
Хэширование паролей

Основное (>= PHP 5.5.0)
> password_hash          | создает хэш целевой строки
> password_get_info      | возвращает массив с инфой о хэш-функции целевого хэша
> password_verify        | верефицирует пароль по хэшу
> password_needs_rehash  | проверяет хэш на соответствие алгоритму и опциям хэширования



-------------------------------------------------- */

// string password_hash ( string $password , integer $algo [, array $options ] )
// > $password - создает хэш этой целевой строки
// > $algo     - константа, обозначающая алгоритм шифрования. Возможны 2 варианта:
//   > PASSWORD_DEFAULT
//     > Используею дефолтный для этой сборки PHP алгоритм шифрования.
//     > Для PHP 5.5.0 дефолтный алгоритм - bcrypt.
//     > Таким образом длина хэша может меняться от версии к версии, поэтому рекомендуется
//       для хранения в базе данны использовать 255-символьные ячейки.
//   > PASSWORD_BCRYPT
//     > Использовать алгоритм шифрования bcrypt
// > $options - опции шифрования. Доступны следующие опции для bcrypt:
//   > ['salt'] - без этой опции случайная соль автоматически добавляется; или ее можно указать вручну здесь;
//   > ['cost'] - по умолчанию 10. Можно указать, какую алгоритмическую цену
//                использовать.
// Вернет FALSE в случае возникновения ошибки

    // Это строка с паролем
    $str = 'This is my password';

    // Получить хэш этой строки
    // *Примечание: хэш всегда разный, т.к. каждый раз используется разная соль;
    //              чтобы сравнить исходную строку и хэш использовать ф-ию password_verify()
        $hash = password_hash($str, PASSWORD_DEFAULT);  // один из вариантов - '$2y$10$27I6Ao16KFIjkhovAfCp7.FJ406KkncEMj5w2qW7DWNzYUyqNn2rK'

// array password_get_info ( string $hash )
// > возвращает массив с инфой о хэш-функции целевого хэша
// > Содержание массива:
//   > algo      | имя константы использованного алгоритма шифрования
//   > algoName  | имя использованного алгоритма шифрования
//   > options   | опции использованного алгоритма шифрования

    // Получить массив с информацией об использованной хэш-функции по результирующему хэшу
        $arr = password_get_info($hash);

    // Посмотрим, что у нас в массиве...
        echo "<br><pre>";
        print_r($arr);
        echo "<br></pre>";
        /*
            [algo] => 1
            [algoName] => bcrypt
            [options] => Array
                (
                    [cost] => 10
                )
        */

// boolean password_verify ( string $password , string $hash )
// > верефицирует пароль по хэшу
// > $password - исходная строка
// > $hash     - ее хэш
    $res = password_verify($str, $hash);   // 1

// boolean password_needs_rehash ( string $hash , string $algo [, string $options ] )
// > проверяет хэш на соответствие алгоритму и опциям хэширования
// > $hash - хэш
// > $algo - константа, обозначающая алгоритм шифрования. Возможны 2 варианта:
//   > PASSWORD_DEFAULT
//   > PASSWORD_BCRYPT
// > $options - опции шифрования. Доступны следующие опции для bcrypt:
//   > salt - соль
//   > cost - цена
// > Возвращает TRUE, если нужно перехэшить строку для совпадения с указанным
//   алгоритмом и опциями; иначе возвращает FALSE.

    // Создать хэш и указать конкретные опции
        $str = 'какая-то строка';
        $salt = '12345abcde12345abcde12345abcde';  // должна быть от 21 символа, иначе будет проигнорирована
        $hash = password_hash($str, PASSWORD_BCRYPT, ['salt' => $salt, 'cost' => 10]);

    // Укажу не правильные опции - другой cost (возвращает TRUE)
    // *Примечание: на изменения salt не реагирует, что правильно с точки зрения безопасности
        $res = password_needs_rehash($hash, PASSWORD_BCRYPT, ['salt' => $salt, 'cost' => 9]);

    // Укажу правильные опции (возвращает FALSE)
    $res = password_needs_rehash($hash, PASSWORD_BCRYPT, ['salt' => $salt, 'cost' => 10]);





/* --------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------

> О хэшировании
  > Хэширование - преобразование входных данных в выходную битовую строку.
  > Хэш - так называют результат хэширования.
  > Для проведения хэширования используются различные алгоритмы шифрования.
  > Хэширование - это одностороннее шифрование. Можно преобразовать входной
    массив данных в хэш, но обратное преобразование выполнить не получится.
  > Хэширование одного и того же массива данных должно давать одну и ту же
    хэш-функцию (в идеале, и если не используется соль).
    > Однако иногда случаются коллизии - когда хэширование разных массивов
       данных дает одинаковые хэш-функции.
      > Однако, вероятность их, по всей видимости, настолько мала, что беспокоитсья
        об этом не стоит.
    > Если используется Соль, то для одного и того же массива входных данных
      всегда будет получатсья разный хэш. Так как же в этом случае сравнивать
      исходные данные и хэш? С помощью специальной функции.
  > Соль - случайные данные, которые добавляются ко входным данным, которые
    затем поступают в хэш-функцию, и получается хэш.
    > Соль существенно осложняет для злоумышленников возможность восстановить
      исходный пароль по хэшу.



-------------------------------------------------- */
?>











