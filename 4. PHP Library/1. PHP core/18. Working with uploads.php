<?php
/* --------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
Работа с файлами

> Загрузка файлов через HTML форму методом
  POST в произвольную папку                 | см. '18.1. Upload File'
> Загрузка массива файлов                   | см. '18.2. Upload Array of Files'
> Отслеживание прогресса загрузки
                 с помощью сессий           | см. '18.3. Upload Progress Bar'

Вспомогательные функции
> get_maxFileSizeToDownloadInBytes     | Возвращает MAX размер файла из php.ini директивы upload_max_filesize в байтах.


-------------------------------------------------- */









// -------------------> Вспомогательные функции <-------------------

    /**
     * Возвращает MAX размер файла из php.ini директивы upload_max_filesize в байтах.
     * @author German Manvelov <4gekkman@gmail.com>
     * @version 1.0
     * @return int MAX размер файла, который может принять PHP, в байтах.
     */
    function get_maxFileSizeToDownloadInBytes() {
        // Получить MAX размер файла из php.ini директивы upload_max_filesize
        // > Перевести его в байты, и вернуть.
        $filesize = ini_get('upload_max_filesize');   // размер файла
        $filesize = mb_strtolower($filesize);         // перевести в нижний регистр
        $arr = str_split($filesize, 2);               // разбить строку на массив символов по 2 байта на каждый

        // размер мог быть передан либо в байтах, либо в виде вроде: '16K' | '16M' | '16G'
        // > Атрибут value HTML формы принимает значение только в байтах, переведем же его в них
        $multiplier = 1;
        switch($arr[count($arr)-1]) {
            case 'k': $multiplier = 1024; break;
            case 'm': $multiplier = 1024*1024; break;
            case 'g': $multiplier = 1024*1024*1024; break;
        }
        if($multiplier != 1) array_pop($arr);  // если последний символ - буковка, удалить ее из массива
        $result = implode('',$arr);            // склеить массив в строку. Результат: в байтах.
        $result *= $multiplier;                // ... умножить его на полученный множитель
        return $result;                          // вернуть результат: в байтах
    }




/* --------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------


Ссылки:

  > Загрузка файлов на сервер:
      http://www.php.net/manual/ru/features.file-upload.php

  > Функции для работы с файлами:
      http://www.php.net/manual/ru/ref.filesystem.php


*****************************************************
Оглавление:


  > Ошибки
    > Чтобы избежать ошибок - как должно быть
    > Наиболее частые ошибки подробно

  > Загрузка файлов на сервер

  > Чем отличается загрузка нескольких отдельных файлов от загрузки
    массива этих файлов?
    > Загрузка нескольких отдельных файлов
    > Загрузка 1 массива нескольких файлов

  > Отслеживание прогресса загрузки файла

  > Настройка загрузки в php.ini. Директивы


*****************************************************





> Ошибки

  > Чтобы избежать ошибок - как должно быть:
    > upload_max_filesize > MAX_FILE_SIZE
    > размер_загружаемого_файла < memory_limit
    > размер_загружаемого_файла < post_max_size
    > время_выполнения_скрипта < max_execution_time
    > время_загрузки_файла < max_input_time
    > Указанные значения директив и размер файла < 2048М
    > Количество закачиваемых по 1 запросу файлов < max_file_uploads
    > Имя файла: только английские буквы и цифры.

  > Наиболее частые ошибки подробно
    > MAX_FILE_SIZE превышает upload_max_filesize
      > Опция MAX_FILE_SIZE (см. '18.1. Upload File') не должна привышать лимит,
        установленный конфигурационной директивой upload_max_filesize в php.ini.
        Увеличить значение в случае необходимости.
    > Размер файла больше memory_limit
      > Размер загружаемого файла не должен привышать лимит памяти, выделенный
        для этого скрипта, установленный конф. директивой memory_limit в php.ini.
        Увеличить значение в случае необходимости.
    > Скрипт выполняется дольше, чем max_execution_time
      > Если значение в конф. директиве max_execution_time в php.ini (30 секунд по умолчанию)
        установлено слишком маленьким, скрипт может не успеть закончить работу, и анализатор
        его вырубит. НО! Время загрузки файлов и обращения к БД не в счет. Учитывается только
        время работы самого скрипта.
        Увеличить значение в случае необходимости.
    > Файл загружается дольше, чем max_input_time
      > max_input_time - это ограничение по времени в секундах на время получения
        внешних данных (например, из БД или закачка файла клиентом на сервер).
        По умолчанию 60 секунд.
        Если файл большой, он может не успеть закачаться за отведенное время,
        и тогда процесс будет прерван.
        Увеличить значение в случае необходимости.
    > Размер файла больше, чем post_max_size
      > Должен быть больше, чем upload_max_filesize
      > memory_limit должен быть больше, чем post_max_size
      > Если размер переданных методом POST данных будет больше, чем
        post_max_size, массивы $_POST и $_FILES будут пустыми
    > В какой-нибудь из директив указан размер, превышающий 2048М = 2147483648 байт,
      что соответствует МАХ возможному числу number в 32-битном PHP
      > Влечет за собой FATAL ERROR
      > Загружать файл размером более 2048М можно по кусочкам, с помощью
        объекта XMLHttpRequest (AJAX)
    > Пришел запрос на закачку N файлов, где N > max_file_uploads
      > max_file_uploads - максимальное количество одновременно закачиваемых файлов,
        в пределах одного запроса.
    > Имя файла не на английском языке, или не цифры. Содержит любые другие символы.
    > Разработчик не должен использовать одинаковое значение атрибута name для
      обычных полей input, и для полей input для ввода файла.
    > Если не проверять достоверно тип загружаемого файла, клиент может получить
      доступ к конфеденциальной информации, расположенной в других директориях.


> Загрузка файлов на сервер
  > Данная возможность позволяет загружать как текстовые, так и двоичные файлы.
  > PHP может получать файлы из любого браузера, совместимого со стандартом RFC-1867
  > Имя файла в массиве $_FILES определяется аттрибутом name элемента input,
    открывающего проводник для загрузки файла.
  > Если имя самого файла (а не имя файла в $_FILES, о котором в предудыщум пункте),
    например, 'файл.jpg', содержит русские или другие многобайтные символы, то его
    надо перевести либо в какой-то индекс, либо транслитерировать русские символы в
    английские. Иначе файл сохранится с кракозябрами вместо имени. Можно применить
    функцию для транслитерации (см. технику "4. Transliteration (RUS to ENG) function")
  > Если пользователь не выбрал никакой файл, и нажал кнопку "Загрузить", то PHP установит:
    > $_FILES['userfile']['size'] = 0;
    > $_FILES['userfile']['tmp_name'] = '';
  > По окончании работы скрипта, если временный файл не был переименован или перемещен
    в другое место, он будет удален.
  > Этапы загрузки файла на сервер:
    1. Выбор файла в появившемся файловом проводнике.
    2. Проверка, не привышает ли МАХ размер, еще до загрузки файла.
       > Не безопасно, т.к. производится с помощью скрытого HTML элемента input,
         который клиент может легко удалить. Нужна только для удобства клиента.
    3. Загрузка файла во временную директорию, и инфы о нем в массив $_FILES
    4. Проверка, не привышает ли МАХ размер уже загруженный во временную директорию файл.
    5. Если название файла не в 1-байтовой кодировке (англ. язык), а, например, в
       2-байтовой (русский язык), то надо перевести в 1-байтовую. Иначе будут каракули
       вместо названия.
    6. Перемещение файла из временной директории в постоянную.
  > Содержимое суперглобального массива $_FILES на этапе №3:
    > [имя_файла]     - указанное в аттрибуте name элемента input, открывающего проводник для загрузки файла
      > name       - имя загружаемого файла, например: 'abc.jpg'
      > type       - тип контента, определяется по расширению файла. Например, для 'abc.jpg' - image/jpeg
      > tmp_name   - абсолютный путь ко временной папке для хранения файла, и имя временного файла (например: 'C:\php-5.5.0-Win32-VC11-x64\upload\php244E.tmp')
      > error      - код ошибки (0 - все OK);  См. коды здесь: http://www.php.net/manual/ru/features.file-upload.errors.php
      > size       - размер файла
    > [имя_другого_файла]
      ... ---//--- ...


> Чем отличается загрузка нескольких отдельных файлов от загрузки
  массива этих файлов?
  > Загрузка нескольких отдельных файлов
    > Содержимое массива $_FILES выглядит так:
      > [имя_файла]     - указанное в аттрибуте name элемента input, открывающего проводник для загрузки файла
        > name       - имя загружаемого файла, например: 'abc.jpg'
        > type       - тип контента, определяется по расширению файла. Например, для 'abc.jpg' - image/jpeg
        > tmp_name   - абсолютный путь ко временной папке для хранения файла, и имя временного файла (например: 'C:\php-5.5.0-Win32-VC11-x64\upload\php244E.tmp')
        > error      - код ошибки (0 - все OK);  См. коды здесь: http://www.php.net/manual/ru/features.file-upload.errors.php
        > size       - размер файла
      > [имя_другого_файла]
        ... ---//--- ...
  > Загрузка 1 массива нескольких файлов
    > Содержимое массива $_FILES выглядит так:
      > [имя_файла]     - указанное в аттрибуте name элемента input, открывающего проводник для загрузки файла
        > name       - массив
          > [0] => имя загружаемого файла №1, например: 'abc.jpg'
          > [1] => имя загружаемого файла №1, например: 'abc.jpg'
          > ...
        > type       - массив
          > [0] => тип контента, определяется по расширению файла №1. Например, для 'abc.jpg' - image/jpeg
          > [1] => тип контента, определяется по расширению файла №2. Например, для 'abc.jpg' - image/jpeg
          > ...
        > tmp_name   - массив
          > [0] => абсолютный путь ко временной папке для хранения файла №1, и имя временного файла (например: 'C:\php-5.5.0-Win32-VC11-x64\upload\php244E.tmp')
          > [1] => абсолютный путь ко временной папке для хранения файла №2, и имя временного файла (например: 'C:\php-5.5.0-Win32-VC11-x64\upload\php244E.tmp')
          > ...
        > error      - массив
          > [0] => код ошибки загрузки файла №1 (0 - все OK);  См. коды здесь: http://www.php.net/manual/ru/features.file-upload.errors.php
          > [1] => код ошибки загрузки файла №2 (0 - все OK);  См. коды здесь: http://www.php.net/manual/ru/features.file-upload.errors.php
          > ...
        > size       - массив
          > [0] => размер файла №1 в байтах
          > [1] => размер файла №2 в байтах
          > ...


> Отслеживание прогресса загрузки файла
  > Если директива session.upload_progress.enabled == 1, то PHP может отслживать
    прогресс загрузки файла на сервер.
  > Пока идет загрузка, приложение может посылать с помощью AJAX (XHR) запросы,
    чтобы проверить прогресс загрузки.
  > Прогресс доступен в ячейке массива $_SESSIONS с ключем:
    $key = ini_get('session.upload_progress.prefix') .
           ini_get('session.upload_progress.name');
  > В процессе закачки можно оперативно отменить ее, установив
    $_SESSION[$key]['cancel_upload'] = TRUE;
    > Это действие отменит текущий загружающийся файл, и все, шедшие за ним.
    > Однако уже загруженные файлы отменять поздно - они уже загрузились.
    > При отмене загрузки файла этим способом, в массиве $_FILES для него будет
      установлен код ошибки == 8 (UPLOAD_ERR_EXTENSION)
  > Сессия должна быть запущена до вывода формы, иначе отслеживание прогресса
    работать не будет.
  > 'hidden' элемент input в форме загрузки файлов:
    > Задает значение session.upload_progress.name в атрибуте value
    > Должен находитсья выше по тексту, чем input-элементы выбора файлов.


> Настройка загрузки в php.ini. Директивы:

   Н А З В А Н И Е                О П И С А Н И Е
------------------------------
  > file_uploads             - (0 | 1) Вкл / Выкл закачивание файлов.
                               == 1 по умолчанию.
------------------------------
  > upload_tmp_dir           - временная директория, используемая для хранения файлов во
                               время закачивания. Должна быть доступна для записи пользователю,
                               от имени которого запущен PHP.
                               == '...PHP/upload' по умолчанию.
------------------------------
  > max_input_nesting_level  - MAX грубина вложенности входных переменных ($_GET, $_POST).
                               == 64 по умолчанию
------------------------------
  > max_input_vars           - MAX кол-во переменных, которые могут быть приняты в 1-м запросе.
                               == 1000 по умолчанию
                               > На каждую из глобальных переменных $_GET, $_POST, $_COOKIE
                                 ограничение накладывается отдельно.
                               > Эта директива помогает снизить вероятность сбоя в случае
                                 атак с использованием хэш-коллизий.
                               > Ограничение применяется к каждому уровню вложенности входного
                                 многомерного массива
                               > Если входных данных больше, чем задано директивый, выбрасывается
                                 E_WARNING, и лишние переменные игноринуются.
------------------------------
  > upload_max_filesize      - максимальный размер закачиваемого файла. Единица измерения зависит
                               от формы записи (подробне об этом здесь: http://www.php.net/manual/ru/faq.using.php#faq.using.shorthandbytes )
                               == 16М по умолчанию
                               > 100       | байт
                               > 100K      | килобайт
                               > 100M      | мегабайт
                               > 100G      | гигабайт
                                  > Причем*: 1M == 1024K    (на заметку)
                                  > Внимание! Размер, указанный любым способом, PHP все равно преобразует в байты,
                                    и он не должен превышать МАХ 32-битное число в PHP: 2,147,483,648   иначе FATAL ERROR
------------------------------
  > max_file_uploads         - максимально допустимое количество одновременных закачек файлов по 1 запросу
                               == 20 по умолчанию.
------------------------------
  > memory_limit             - Указывает максимальный размер памяти, который скрипт может использовать.
                               ! Нельзя загружить файл, размер которого больше memory_limit
                               == 120M по умолчанию
                               > 100       | байт
                               > 100K      | килобайт
                               > 100M      | мегабайт
                               > 100G      | гигабайт
                                  > Причем*: 1M == 1024K    (на заметку)
                                  > Внимание! Размер, указанный любым способом, PHP все равно преобразует в байты,
                                    и он не должен превышать МАХ 32-битное число в PHP: 2,147,483,648   иначе FATAL ERROR
------------------------------
  > max_execution_time       - задает время в секундах, в течение которого скрипт должен
                               закончить работу; если нет, анализатор его вырубает.
                               > Касается только времени, используемого сами скриптом.
                               > Не в счет: обращения к БД, загрузка файлов и другие действия вне скрипта.
                               == 30 секунд по умолчанию
------------------------------
  > max_input_time           - ограничение по времени в секундах на получение входящих данных
                               > Из БД или при загрузке файла
                               == 60 секунд по умолчанию
------------------------------
  > post_max_size            - MAX допустимый размер данных, отправляемых методом POST
                               > Должен быть больше, чем upload_max_filesize
                               > memory_limit должен быть больше, чем post_max_size
                               > Если размер переданных методом POST данных будет больше, чем
                                 post_max_size, массивы $_POST и $_FILES будут пустыми

-------------------------------------------------- */








?>























