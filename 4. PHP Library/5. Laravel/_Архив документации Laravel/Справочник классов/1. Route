1. Route
Управление роутингом
Laravel 4.2

> Ссылки

    - Официальный справочник (см. Illuminate\Routing\Router) (en):
        http://laravel.com/api/4.2/

    - Хорошая статья про роутинг:
        http://culttt.com/2013/08/26/routing-laravel-4/

    - Хорошая статья по использованию фильтров в роутах (en):
        http://clivern.com/working-with-laravel-filters/

--------------------------------
Оглавление

1. Route  | Управление роутингом  | v4.2 - Illuminate\Routing\Router - router

  > get               | Ловит GET-запросы к URI, передаёт в callback. Можно применить фильтры.
  > post              | Ловит POST-запросы к URI, передаёт в callback. Можно применить фильтры.
  > match             | Ловит запросы указанными методами к URI, передаёт в callback. Можно применить фильтры.
  > any               | Ловит все запросы к URI, передаёт в callback. Можно применить фильтры.

  > controller        | Ловит все запросы к URI, передаёт в REST-контроллер. Можно применить фильтры.
  > resource          | Ловит все запросы к URI, передаёт в RESOURCE-контроллер. Можно применить фильтры.

  > group             | Создать группу роутов, которой можно назначить общие параметры

  > filter            | Создать новый фильтр. Можно использовать в роутах, группах роутов.
  > when              | Применить указанный фильтр ко всем роутам, URI которых матчится с указанной строкой (возможно использования плейсхолдеров)
  > whenRegex         | Применить указанный фильтр ко всем роутам, URI которых матчится с указанным RegExp

  > currentRouteName  | Получить имя роута изнутри его callback-функции
  > dispatch          | Отправляет запрос приложению

--------------------------------


|---------------------------------------------------------
| > get (string $uri, Closure|array|string $action)
|---------------------------------------------------------
| Ловит GET-запросы к URI, передаёт в callback. Можно применить фильтры.
|
|   $uri        | с какого URI роут ловит запросы
|   $action     | в какую функцию роут передаёт пойманные запросы
|                 - Если array, то дополнительно можно назначить фильтры.

------------------
Подоглавление:

  1. Роут на анонимную фукнцию
  2. Роут на метод контроллера
  3. Параметры роутинга
  4. Фильтрация параметров роутинга с помощью RegExp
  5. Именованные роуты

------------------

  1. Роут на анонимную фукнцию
  ====================================================================

  - Анонимная функция возвращает строку:

      Route::get('/m1/modules', function() {
          return "Привет, мир!";
      });

  - Анонимная функция возвращает представление 'someView':

      Route::get('/m1/modules', function() {
          return View::make("someView");
      });

  - Роуту назначены 'before' и 'after' фильтры:

      Route::get('/m1/modules',
        array(
          'before' =>'access',
          'after'  =>'log',
          function() {
            return View::make('someView');
          }
        )
      );

  - Сделать так, чтобы роут принимал запросы только через HTTPS-протокол:

      Route::get('/m1/modules',
        array('https', function(){
            return 'Привет, мир!';
        })
      );


  2. Роут на метод контроллера
  ====================================================================

  - На метод 'showProfile' контроллера 'UserController'

      Route::get('/m1', UserController@showProfile);

  - На метод контроллера в пространстве имён Namespace:

      Route::get('foo', 'Namespace\UserController@showProfile');


  3. Параметры роутинга
  ====================================================================

  - Поймаем запрос на URI с параметром:

      Route::get('user/{id}', function($id) {

        // Получить объект модели User с primary key == $id
        $obj = User::find($id);

        // Вернуть строку с именем (допустим, что в User есть колонка 'name'):
        return 'Привет, '.$obj->name;

      });

  - Тоже самое, только с роутом на метод контроллера:

      Route::get('user/{id}', UserController@showProfile);

  - Необязательные параметры роутинга. Если не переданы, будет null:

      Route::get('user/{id?}', function($id) {

        // Если $id не передан и равен null:
        if(is_null($id) {
          return 'Привет, незнакомец';
        }

        // Если $id передан и не равен null:
        else {
          return 'Привет, '.User::find($id)->name
        }

      });

  - Необязательные параметры роутинга с заданным по умолчанию значением.

      Route::get('user/{id?}', function($id = 'Иван') {

        // Если $id равен 'Иван' (т.е. не был передан):
        if(is_null($id) {
          return 'Привет, '.$id;  // Привет, Иван
        }

        // Если $id передан и не равен null:
        else {
          return 'Привет, '.User::find($id)->name
        }

      });



  4. Фильтрация параметров роутинга с помощью RegExp
  ====================================================================

  - Если URI роута совпадёт с указанным RegExp, роут запустится. Иначе - нет.
  - Пусть параметр {name} в этом роуте должен состоять только из латинских букв:

      Route::get('user/{name}', function($name) {

      })
      ->where('name', '[A-Za-z]+');

  - Пусть параметр {id} в этом роуте должен состоять только из цифр:

      Route::get('user/{id}', function($id) {

      })
      ->where('id', '[0-9]+');

  - Задать ограничения в этом роуте одновременно для 2-х параметров {name} и {id}:

      Route::get('user/{id}/{name}', function($id, $name)
      {

      })
      ->where(array( 'id' => '[0-9]+',
                     'name' => '[a-z]+' ))

  - Чтобы для каждого роута не прописывать ограничения, их можно задать глобально.
  - А именно, для конкретного имени параметра глобально задать конкретный RegExp.
  - Пусть параметр {id} во всех роутах должен быть цифрой:

       Route::pattern('id', '[0-9]+');


  5. Именованные роуты
  ====================================================================

  - Задать имя 'profile' для роута на анонимную функцию:

      Route::get('user/profile', array('as' => 'profile', function()
      {

          // Получить URL роута по его имени
          $url = URL::route('profile');

          // Создать новый редирект на другой именованный роут:
          $redirect = Redirect::route('nameOfAnotherRoute');

      }));

  - Задать имя 'profile' для роута на метод контроллера:

      Route::get('user/profile', array( 'as'   => 'profile',
                                        'uses' => 'UserController@showProfile')
      );


|---------------------------------------------------------
| > post (string $uri, Closure|array|string $action)
|---------------------------------------------------------
| Ловит POST-запросы к URI, передаёт в callback. Можно применить фильтры.
|
|   $uri        | с какого URI роут ловит запросы
|   $action     | в какую функцию роут передаёт пойманные запросы
|                 - Если array, то дополнительно можно назначить фильтры.

  См. примеры для "> get"
  Для post-запросов они аналогичны, надо лишь вместо 'get' подставлять 'post'



|---------------------------------------------------------
| > match (array|string $methods, string $uri, Closure|array|string $action)
|---------------------------------------------------------
| Ловит запросы указанными методами к URI, передаёт в callback. Можно применить фильтры.
|
|   $methods    | массив методов запросов, которые ловит этот роут
|   $uri        | с какого URI роут ловит запросы
|   $action     | в какую функцию роут передаёт пойманные запросы
|                 - Если array, то дополнительно можно назначить фильтры.

  1. Роут, который ловит запросы методами 'GET' и 'POST'
  ====================================================================

      Route::match(array('GET', 'POST'), '/', function()
      {
          return 'Hello World';
      });


  Дополнительно см. примеры для "> get"
  match() по сути тоже самое, только с доп. аргументом.


|---------------------------------------------------------
| > any (string $uri, Closure|array|string $action)
|---------------------------------------------------------
| Ловит все запросы к URI, передаёт в callback. Можно применить фильтры.
|
|   $uri        | с какого URI роут ловит запросы
|   $action     | в какую функцию роут передаёт пойманные запросы
|                 - Если array, то дополнительно можно назначить фильтры.

  1. Роут, который ловит запросы любыми методами
  ====================================================================

      Route::any('/', function()
      {
          return 'Hello World';
      });

  Дополнительно см. примеры для "> get"
  any() по сути тоже самое, только ловит запросы всеми методами


|---------------------------------------------------------
| > controller (string $uri, string $controller, array $names = array())
|---------------------------------------------------------
| Ловит все запросы к URI, передаёт в REST-контроллер. Можно применить фильтры.
|
|   $uri         | с какого URI роут ловит запросы
|   $controller  | имя контроллера, которому роут передаёт запросы
|   $names       | массив пар [имя метода контроллера] => [его псевдоним]

  1. Роут, который ловит все запросы и передаёт в REST-контроллер
  ====================================================================

  - Контроллер может где угодно находиться внутри папки 'app/controllers'.
  - Например, в папке 'app/controllers/my/favorit/controller'.
  - Чтобы laravel его увидел, надо выполнить команду "composer dump-autoload"

      Route::controller('/', 'MyController');


  2. Редирект на REST-роут
  ====================================================================

  - Допустим, есть у нас такой вот REST-роут.
  - В нём, разумеется, есть методв getIndex().

      Route::controller('/', 'myController', array('getIndex' => 'home'));

  - В 3-м параметры методу getIndex присвоено имя home.
  - Теперь внутри приложения к методу можно обращаться по этому имени.
  - Организуем редирект с адреса '/ivan' на home:

      Route::get('/ivan', function()
      {
          return Redirect::route('home');
      });



|---------------------------------------------------------
| > resource (string $name, string $controller, array $options = array())
|---------------------------------------------------------
| Ловит все запросы к URI, передаёт в RESOURCE-контроллер. Можно применить фильтры.
|
|   $uri         | с какого URI роут ловит запросы
|   $controller  | имя контроллера, которому роут передаёт запросы
|   $options     | можно указать, запрос к каким методам из стандартного
|                  набора методов ресурсного контроллера будет пропускать роут
|
| Стандартный набор методов ресурсного контроллера:
|
|     HTTP-Метод  Путь                        Имя метода    Имя роута
|   ------------------------------------------------------------------------
|     GET	        /resource	                  index	        resource.index
|     GET	        /resource/create	          create	      resource.create
|     POST	      /resource	                  store	        resource.store
|     GET	        /resource/{resource}	      show	        resource.show
|     GET	        /resource/{resource}/edit	  edit	        resource.edit
|     PUT/PATCH	  /resource/{resource}	      update	      resource.update
|     DELETE	    /resource/{resource}	      destroy	      resource.destroy

------------------
Подоглавление:

  1. Роут, который ловит все запросы и передаёт в RESOURCE-контроллер
  2. Расширение стандартного набора методов ресурсного контроллера
  3. Ограничить набор методов, которые роут пропускает в РК

------------------

  1. Роут, который ловит все запросы и передаёт в RESOURCE-контроллер
  ====================================================================

      Route::resource('photo', 'PhotoController');


  2. Расширение стандартного набора методов ресурсного контроллера
  ====================================================================

  - Первым делом нужно создать новый метод в классе ресурсного контроллера.
  - Затем, до регистрации РК, создать роут на этот дополнительный метод.

      Route::get('photo/my', 'PhotoController@mymethod');

  - И затем уже создать роут на ресурсный контроллер:

      Route::resource('photo', 'PhotoController');


  3. Ограничить набор методов, которые роут пропускает в РК
  ====================================================================

  - Указать набор, только методы из которого пропустит роут:
  - В примере ниже это методы 'index' и 'show':

      Route::resource('photo', 'PhotoController',
                      array('only' => array('index', 'show')));

  - Указать методы, которые роут НЕ пропустит.
  - В примере ниже это методы 'create' и 'store':

      Route::resource('photo', 'PhotoController',
                      array('except' => array('create', 'store')));


|---------------------------------------------------------
| > group (string $uri, string $controller, array $names = array())
|---------------------------------------------------------
| Создать группу роутов, которой можно назначить общие параметры
|
|   $uri         | с какого URI роут ловит запросы
|   $controller  | имя контроллера, которому роут передаёт запросы
|   $names       | ?

------------------
Подоглавление:

  1. Назначить фильтры всей группе роутов за раз
  2. Назначить пр.имён, которым будут квалиф-ться пути к контроллерам в группе
  3. Указать для группы роутов домен, с которым они будут работать
  4. Указать префикс для URI группы роутов

------------------

  1. Назначить фильтры всей группе роутов за раз
  ====================================================================

      Route::group(array('before' => 'auth', 'after' => 'log'), function()
      {

          // Роут 1. Получил фильтры 'auth' и 'log'
          Route::get('/', function() {

          });

          // Роут 2. Получил фильтры 'auth' и 'log'
          Route::get('/profile', function() {

          });

      });


  2. Назначить пр.имён, которым будут квалиф-ться пути к контроллерам в группе
  ====================================================================

  - По сути в роутах ниже, строка 'UserController@showProfile' заменяется
    на строку 'Admin/UserController@showProfile'.

      Route::group(array('namespace' => 'Admin'), function()
      {

          // Роут 1. Получил фильтры 'auth' и 'log'
          Route::get('/', 'UserController@showProfile');

          // Роут 2. Получил фильтры 'auth' и 'log'
          Route::get('/profile', 'UserController@showProfile');

      });


  3. Указать для группы роутов домен, с которым они будут работать
  ====================================================================

  - Вообще, по умолчанию, приложение работает с доменом, указанным в конфиге.
  - А именно, с доменом, указанным в 'config/app.php', в параметре 'url'.
  - Но для группы роутов можно указать иной домен.
  - Кроме того, понадобиться также настроить этот домен на веб-сервере.

      Route::group(array('domain' => 'lk.grumart.ru'), function()
      {

          // Роут 1. Ловит запросы к "lk.grumart.ru"
          Route::get('/', function() {

          });

          // Роут 2. Ловит запросы к "lk.grumart.ru/profile"
          Route::get('/profile', function() {

          });

      });

  - А вот так можно создать у себя на сайте поддомены.
  - Например, можно сделать каждому пользователю свою мини-страницу.
  - Значение {account} будет доступно в каждом роуте группы, как $account.

      Route::group(array('domain' => '{account}.myapp.com'), function() {

          Route::get('user/{id}', function($account, $id)
          {
              //
          });

      });


  4. Указать префикс для URI группы роутов
  ====================================================================

      Route::group(array('prefix' => '/catalog/'), function() {

        // Роут 1. Ловит запросы с URI '/catalog/textile'
        Route::get('/textile', 'UserController@showProfile');

        // Роут 2. Ловит запросы с URI '/catalog/textile/towels'
        Route::get('/textile/towels', 'UserController@showProfile');

      });


|---------------------------------------------------------
| > filter (string $name, string|callable $callback)
|---------------------------------------------------------
| Создать новый фильтр. Можно использовать в роутах, группах роутов.
|
|   $name         | имя фильтра
|   $callback     | функция с логикой фильтра (анонимная или строка с именем)
|
| Нюансы фильтров:
| - Фильтры не обязательно создавать в routes.php. Для них есть спец. файл 'app/filters.php'.
| - Возврат значения с помощью return из before-фильтра воспринимается, как ответ на запрос.
|   - Это значит, что в этом случае роут и after-фильтры исполнены не будут.
|
| Параметры before-фильтра, доступные в его callback-функции
|
|   $route     | Ссылка на объект-роут
|   $request   | Ссылка на объект-запрос
|   $value     | Через этот параметр можно передать в фильтр значение
|
| Параметры after-фильтра, доступные в его callback-функции
|
|   $route     | Ссылка на объект-роут
|   $request   | Ссылка на объект-запрос
|   $response  | Ссылка на объект-ответ на запрос
|   $value     | Через этот параметр можно передать в фильтр значение


------------------
Подоглавление:

  1. Создать фильтр
  2. Назначить before-фильтр роуту
  3. Назначить after-фильтр роуту
  4. Назначить 2 before-фильтра роуту
  5. Указать параметры before-фильтра, и передать ему значение
  6. Указать параметры after-фильтра, и передать ему значение

------------------

  1. Создать фильтр
  ====================================================================

      Route::filter('old', function()
      {

         ... Логика фильтра ...

      });


  2. Назначить before-фильтр роуту
  ====================================================================

  - Назначить before-фильтр роуту на анонимную функцию:

      Route::get('/user', array('before' => 'old', function(){



      }));

  - Назначить after-фильтр роуту на метод контроллера:

      Route::get('/user', array('before' => 'old', 'uses' => 'UserController@showProfile'));


  3. Назначить after-фильтр роуту
  ====================================================================

  - Назначить before-фильтр роуту на анонимную функцию:

      Route::get('/user', array('after' => 'old', function(){

      }));

  - Назначить after-фильтр роуту на метод контроллера:

      Route::get('/user', array('after' => 'old', 'uses' => 'UserController@showProfile'));


  4. Назначить 2 before-фильтра роуту
  ====================================================================

  - Вариант 1:

      Route::get('/user', array('before' => 'auth|old', function() {

      }));

  - Вариант 2:

      Route::get('user', array('before' => array('auth', 'old'), function(){

      }));


  5. Указать параметры before-фильтра, и передать ему значение
  ====================================================================

  - Создать фильтр и в его функции обозначить все его параметры

      Route::filter('age', function($route, $request, $value) {

          var_dump($route);
          var_dump($request);
          var_dump($value);

      });

  - Назначить фильтр роуту, и передать в фильтр $value == 200

      Route::get('user', array('before' => 'age:200', function() {

      }));


  6. Указать параметры after-фильтра, и передать ему значение
  ====================================================================

  - Создать фильтр и в его функции обозначить все его параметры

      Route::filter('age', function($route, $request, $response, $value) {

          var_dump($route);
          var_dump($request);
          var_dump($value);

      });

  - Назначить фильтр роуту, и передать в фильтр $value == 200

      Route::get('user', array('after' => 'age:200', function() {

      }));


|---------------------------------------------------------
| > when (string $pattern, string $name, array|null $methods = null)
|---------------------------------------------------------
| Применить указанный фильтр ко всем роутам, URI которых матчится с указанной строкой (возможно использования плейсхолдеров)
|
|   $pattern   | URI роутов с плейсхолдером, к которым применится фильтр $name
|   $name      | имя фильтра, который надо применить
|   $methods   | ограничить список методов запросов, для которых этот фильтр применится к роутам

  1. Применить фильтр ко всем роутам, у которых URI совпадает с заданным паттерном
  ====================================================================

  - Применить фильтр 'admin' ко всем роутам, у которых URI начинается с '/admin/'

      Route::when('admin/*', 'admin');


  2. Тоже самое, но ещё ограничить список методов запросов, для которых будет применяться фильтр
  ====================================================================

      Route::when('admin/*', 'admin', array('get', 'post'));


|---------------------------------------------------------
| > whenRegex (string $pattern, string $name, array|null $methods = null)
|---------------------------------------------------------
| Применить указанный фильтр ко всем роутам, URI которых матчится с указанным RegExp
|
|   $pattern   | Фильтр применится ко всем роутам, URI которых матчится с этим RegExp
|   $name      | имя фильтра, который надо применить
|   $methods   | ограничить список методов запросов, для которых этот фильтр применится к роутам

  Пока примеров нет




|---------------------------------------------------------
| > currentRouteName ()
|---------------------------------------------------------
| Получить имя роута изнутри его callback-функции
|
|   $pattern   | Фильтр применится ко всем роутам, URI которых матчится с этим RegExp
|   $name      | имя фильтра, который надо применить
|   $methods   | ограничить список методов запросов, для которых этот фильтр применится к роутам

  1. Получить имя роута из его callback-функции
  ====================================================================

      Route::get('/', function(){

        return Route::currentRouteName();

      });


|---------------------------------------------------------
| > dispatch (Request $request)
|---------------------------------------------------------
| Отправляет запрос приложению
|
|   $request      | запрос, который надо отправить
|
|

  1. Перехватить запрос, создать из него такой-же, но уже на другой URI, и послать приложению
  ====================================================================

      Route::get('/options', function(){

        // Новый URI

          $new_uri = '/settings';   // URI для нового запроса


        // Создать новый запрос

          $request = Request::create($new_uri, Request::method(), Input::all());


        // Отправить новый запрос

          $response = Route::dispatch($request)->getOriginalContent();


      });
