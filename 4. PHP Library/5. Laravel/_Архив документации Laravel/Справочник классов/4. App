4. App
Приложение
Laravel 4.2

> Ссылки

    - Официальный справочник (см. Illuminate\Foundation\Application) (en):
        http://laravel.com/api/4.2/

--------------------------------
Оглавление

4. APP  | Приложение  | v4.2 - Illuminate\Foundation\Application - app

  > environment       | получить имя стартового конфига приложения

  > before            | зарегистрировать before-фильтр приложения
  > after             | зарегистрировать after-фильтр приложения

  > abort             | возбудить исключение 404 (HttpException), можно передать данные
  > missing           | зарегистрировать callback для обработки 404 (HttpException)
  > error             | зарегистрировать callback для обработки ошибок приложения
  > fatal             | зарегистрировать callback для обработки фатальных ошибок

  > bind              | добавить переменную в IoC
  > make              | извлечь переменную из IoC
  > instance          | добавить переменную в IoC, содержащую экземпляр указанного класса
  > singleton         | добавить переменную в IoC (если это экземпляр, при послед вызовах будет возвращаться тот же самый)
  > resolving         | назначить обработчик события "извлечение" для указанного имени переменной в IoC
  > resolvingAny      | назначить обработчик события "извлечение" для всех переменных в IoC

  > register          | подключить service provider к приложению прямо во время его работы
  > detectEnvironment | указать имя конфига, из которого должен собраться экземпляр приложения

--------------------------------

|---------------------------------------------------------
| > environment ()
|---------------------------------------------------------
| Получить имя стартового конфига приложения

    $start_env_name = App::environment();


|---------------------------------------------------------
| > before (Closure|string $callback)
|---------------------------------------------------------
| Зарегистрировать before-фильтр приложения
|
|   $callback     | callback-функция-обработчик события

    app/filters.php
   ---------------------

    App::before(function($request)
    {
        //
    });


|---------------------------------------------------------
| > after (Closure|string $callback)
|---------------------------------------------------------
| Зарегистрировать after-фильтр приложения
|
|   $callback     | callback-функция-обработчик события

    app/filters.php
   ---------------------

    App::after(function($request)
    {
        //
    });


|---------------------------------------------------------
| > abort (int $code, string $message = '', array $headers = array())
|---------------------------------------------------------
| Возбудить исключение 404 (HttpException), можно передать данные
|
|   $code     | код ошибки (например: 403, 404, ...)
|   $message  | сообщение, поясняющее в чём ошибка
|   $headers  | заголовки

  App::abort('404');


|---------------------------------------------------------
| > missing (Closure $callback)
|---------------------------------------------------------
| Зарегистрировать callback для обработки 404 (HttpException)
|
|   $callback     | callback-функция-обработчик события


  1. Зарегистрировать обработчик App::missing, который ловит ошибки 404
  ===================================================================================

    App::missing(function($exception) {

      // Добавим в лог запись об ошибке

        Log::error('Произолша ошибка, код: '.$code);


      // Допустим, у нас по URI == '/error' доступен документ для обработки ошибок

        $view = "/error";


      // Допустим, этот массив данных мы хотим передать в документ

        $data = array('ivan' => 10);


      // Вернуть документ $view, к котором можно сообщить об ошибке
        return Response::view($view, $data, 404);

    });


|---------------------------------------------------------
| > error (Closure $callback)
|---------------------------------------------------------
| Зарегистрировать callback для обработки ошибок приложения
|
|   $callback     | callback-функция-обработчик события

  1. Зарегистрировать обработчик App::error, который ловит ошибки 401, 403, 404, 500
  ===================================================================================

    App::error(function(Exception $exception, $code){

      // Будем обрабатывать только эти ошибки

        if (!in_array($code, array(401, 403, 404, 500))){
           return;
        }


      // Добавим в лог запись об ошибке

        Log::error('Произолша ошибка, код: '.$code);


      // Допустим, у нас по URI == '/error' доступен документ для обработки ошибок

        $view = "/error";


      // Допустим, этот массив данных мы хотим передать в документ

        $data = array('ivan' => 10);


      // Ловим ошибки и передаём во $view с массивом $data
      switch ($code) {

         case 401:
         return Response::view($view, $data, $code);

         case 403:
         return Response::view($view, $data, $code);

         case 404:
         return Response::view($view, $data, $code);

         case 500:
         return Response::view($view, $data, $code);

      }
    }


|---------------------------------------------------------
| > fatal (Closure $callback)
|---------------------------------------------------------
| Зарегистрировать callback для обработки фатальных ошибок
|
|   $callback     | callback-функция-обработчик события

  App::fatal(function($exception) {

    ... обработка фатальных ошибок ...

  });


|---------------------------------------------------------
| > bind (string $abstract, Closure|string|null $concrete = null, bool $shared = false)
|---------------------------------------------------------
| Добавить переменную в IoC
|
|   $abstract    | какое имя будет у переменной в IoC
|   $concrete    | значение, которым надо инициализировать новую переменную в IoC
|   $shared      | если true, то тогда это будет аналог singleton (та же переменная на все вызовы)

  App::bind('apple', function() {
    return 123;
  });


|---------------------------------------------------------
| > make (string $abstract, array $parameters = array())
|---------------------------------------------------------
| Извлечь переменную из IoC
|
|   $abstract    | значение переменной с каким именем извлечь из IoC
|   $parameters  | можно передать параметры (если, допустим, в IoC лежит функция)

  1. Добавить переменную с ф-ией в IoC, а затем извлечь, и вызвать с параметрами
  ===============================================================================

    App::bind('apple', function($app, $param) {

      return $param['ivan'];    // 10

    }, true);   // singleton


    App::make('apple', array('ivan' => 10));


|---------------------------------------------------------
| > instance (string $abstract, mixed $instance)
|---------------------------------------------------------
| Добавить переменную в IoC, содержащую экземпляр указанного класса
|
|   $abstract    | значение переменной с каким именем извлечь из IoC
|   $instance    | имя класса, чей экземпляр будет добавлен в IoC

    $foo = new Foo;
    App::instance('foo', $foo);


|---------------------------------------------------------
| > singleton ()
|---------------------------------------------------------
| Добавить переменную в IoC (если это экземпляр, при послед вызовах будет возвращаться тот же самый)

  1. Добавить переменную с ф-ией в IoC, а затем извлечь, и вызвать с параметрами
  ===============================================================================

    App::singleton('apple', function($app, $param) {

      return $param['ivan'];    // 10

    });   // singleton


    App::make('apple', array('ivan' => 10));



|---------------------------------------------------------
| > resolving (string $abstract, Closure $callback)
|---------------------------------------------------------
| Назначить обработчик события "извлечение" для указанного имени переменной в IoC
|
|   $abstract    | значение переменной с каким именем извлечь из IoC
|   $callback    | callback-функция-обработчик

    App::resolving('foo', function($foo)
    {
        //
    });


|---------------------------------------------------------
| > resolvingAny (string $abstract, Closure $callback)
|---------------------------------------------------------
| Назначить обработчик события "извлечение" для указанного имени переменной в IoC
|
|   $abstract    | значение переменной с каким именем извлечь из IoC
|   $callback    | callback-функция-обработчик

    App::resolvingAny(function($object)
    {
        //
    });


|---------------------------------------------------------
| > register (string $serviceprovider)
|---------------------------------------------------------
| Подключить service provider к приложению прямо во время его работы

  App::register('FooServiceProvider');


|---------------------------------------------------------
| > detectEnvironment (array|string|closure $envs)
|---------------------------------------------------------
| Указать имя конфига, из которого должен собраться экземпляр приложения

  1. Указать приложению использовать конфиг myEnvironment для создания экземпляра
  ================================================================================

    $env = $app->detectEnvironment(function()
    {
        return 'myEnvironment';
    });

  2. Указать приложению использовать конфиг C1 на компе с именем A1, и C2 для компа A2
  ====================================================================================

    $env = $app->detectEnvironment(array(

      'C1' => array('A1'),
      'C2' => array('A2'),

    ));
















