10. Mail
Почта
Laravel 4.2

> Ссылки

    - Официальный справочник классов (см. illuminate\mail) (en):
        http://laravel.com/api/4.2/

    - Официальный справочник Laravel про Mail:
        http://laravel.com/docs/4.2/mail

    - Статья "Sending Email with Laravel 4" на culttt.com (en):
        http://culttt.com/2014/04/14/sending-email-laravel-4/

    - Оф. сайт SwiftMailer:
        http://swiftmailer.org/


--------------------------------
Оглавление

10. Mail  | Почта  | v4.2 - illuminate\mail - mailer

//|---------------------------|//
//|                           |//
//|          Mailer           |//
//|                           |//
//|---------------------------|//

  /////-------------------------/////
  /////         Основное        /////
  /////-------------------------/////

  > send                | Отправить новое сообщение, используя представление
  > queue               | Добавить новое сообщение в очередь для отправки
  > later               | Добавить новое сообщение в очередь для отправки через n секунд
  > pretend             | Направлять все сообщения в лог laravel
  > isPretending        | Проверить, включена ли опция pretend
  > failures            | Получить массив проваленных получателей

  /////-------------------------/////
  /////      Дополнительно      /////
  /////-------------------------/////

  > laterOn             | Добавить новое сообщение в указанную очередь для отправки через n секунд
  > queueOn             | Добавить новое сообщение в указанную очередь для отправки
  > alwaysFrom          | установить "from" по умолчанию для всех писем
  > plain               | ?
  > handleQueuedMessage | Обработать работу добавленного в очередь сообщения
  > getViewFactory      | Получить экземпляр Factory (view factory)
  > getSwiftMailer      | Получить экземпляр Swift_Mailer
  > setSwiftMailer      | Установить экземпляр Swift_Mailer
  > setLogger           | Установить экземпляр записывалки в лог
  > setQueue            | Установить экземпляр QueueManager
  > setContainer        | Установить экземпляр IoC контайнера Container


//|---------------------------|//
//|                           |//
//|          Message          |//
//|                           |//
//|---------------------------|//

  /////-------------------------/////
  /////         Основное        /////
  /////-------------------------/////

  > to              | указать получателей сообщения
  > from            | указать значение "from" сообщение
  > attach          | прикрепить файл к сообщению
  > embed           | вставить файл в сообщение, и получить CID
  > embedData       | вставить данные в сообщение, и получить CID
  > subject         | указать тему сообщения

  /////-------------------------/////
  /////      Дополнительно      /////
  /////-------------------------/////

  > cc              | добавить в сообщение копию carbon
  > sender          | указать значение "sender" сообщение
  > returnPath      | установить "return path" сообщения
  > bcc             | добавить в сообщение слепую копию carbon
  > replyTo         | указать значение "reply to" сообщение
  > priority        | указать уровень приоритета сообщения
  > attachData      | прикрепить данные к сообщению
  > getSwiftMessage | получить экземпляр Swift_Message






--------------------------------


///////////////////////===============================///////////////////////
///////////////////////                               ///////////////////////
///////////////////////            Mailer             ///////////////////////
///////////////////////                               ///////////////////////
///////////////////////===============================///////////////////////


|---------------------------------------------------------
| > send()
|---------------------------------------------------------
| - Отправить новое сообщение, используя представление
| - void send(string|array $view, array $data, Closure|string $callback)
| - Параметры:
|
|   $view         | путь к представлению (корень в папке View) - будет телом письма
|   $data         | массив с данными, которые будут доступны по ключам в представлении
|   $callback     | анонимная фукнция, внутри которой идёт настройка сообщения

  - Отправим новое сообщение.
  - Будем использовать view по адресу: "Views/emails/test"
  - Передадим во view 2 переменные: name == 'ivan' и age == 18

      Mail::send('emails/test', array('name'=>'ivan', 'age'=>'18'), function($message)
      {

          // ... настройка сообщения ...

      });

  - Минусы этого способа в том, что сервер "зависает", пока его отправляет.
  - Поэтому лучше отправлять сообщения "фоном".
  - Сделать это можно методом queue.


|---------------------------------------------------------
| > queue()
|---------------------------------------------------------
| - Добавить новое сообщение в очередь для отправки
| - mixed queue(string|array $view, array $data, Closure|string $callback, string $queue = null)
| - Параметры:
|
|   $view         | путь к представлению (корень в папке View) - будет телом письма
|   $data         | массив с данными, которые будут доступны по ключам в представлении
|   $callback     | анонимная фукнция, внутри которой идёт настройка сообщения
|   $queue        | имя очереди, в которую добавить сообщение (если не указано, добавляет во очередь по умолчанию)

  - Отправим новое сообщение.
  - Будем использовать view по адресу: "Views/emails/test"
  - Передадим во view 2 переменные: name == 'ivan' и age == 18

      Mail::queue('emails/test', array('name'=>'ivan', 'age'=>'18'), function($message)
      {

          // ... настройка сообщения ...

      });

  - Благодаря метода queue сервер не "подвисает", пока отправляет сообщение.


|---------------------------------------------------------
| > later()
|---------------------------------------------------------
| - Добавить новое сообщение в очередь для отправки через n секунд
| - mixed later(int $delay, string|array $view, array $data, Closure|string $callback, string $queue = null)
| - Параметры:
|
|   $delay        | кол-во секунд отсрочки отправки письма
|   $view         | путь к представлению (корень в папке View) - будет телом письма
|   $data         | массив с данными, которые будут доступны по ключам в представлении
|   $callback     | анонимная фукнция, внутри которой идёт настройка сообщения
|   $queue        | имя очереди, в которую добавить сообщение (если не указано, добавляет во очередь

  - Отправим новое сообщение.
  - Будем использовать view по адресу: "Views/emails/test"
  - Передадим во view 2 переменные: name == 'ivan' и age == 18
  - Но сообщение отправим не сразу, а через час.

      Mail::later(3600, 'emails/test', array('name'=>'ivan', 'age'=>'18'), function($message)
      {

          // ... настройка сообщения ...

      });

  - Сообщение будет отправлено через 1 час поссле срабатывания этой функции.


|---------------------------------------------------------
| > pretend()
|---------------------------------------------------------
| - Направлять все сообщения в лог laravel
| - void pretend(bool $value = true)
| - Параметры:
|
|   $value        | включить или выключить режим pretend (true / false)

  - Допустим, мы хотим, чтобы сообщения на самом деле не отправились.
  - А попадали в лог Laravel.
  - Тогда мы включаем ему режим pretend:

      Mail::pretend(true);

  - Его всегда можно и выключить:

      Mail::pretend(false);


|---------------------------------------------------------
| > isPretending()
|---------------------------------------------------------
| - Проверить, включена ли опция pretend
| - bool isPretending()

  - Проверим, включён ли режим pretend:

    $is = Mail::isPretending();


|---------------------------------------------------------
| > failures()
|---------------------------------------------------------
| - Получить массив проваленных получателей
| - array failures()

  - Получим массив сообщений, отправка которых провалилась:

    $arr = Mail::failures();



---------- По требованию ----------

  > laterOn             | Добавить новое сообщение в указанную очередь для отправки через n секунд
  > queueOn             | Добавить новое сообщение в указанную очередь для отправки
  > alwaysFrom          | установить "from" по умолчанию для всех писем
  > plain               | ?
  > handleQueuedMessage | Обработать работу добавленного в очередь сообщения
  > getViewFactory      | Получить экземпляр Factory (view factory)
  > getSwiftMailer      | Получить экземпляр Swift_Mailer
  > setSwiftMailer      | Установить экземпляр Swift_Mailer
  > setLogger           | Установить экземпляр записывалки в лог
  > setQueue            | Установить экземпляр QueueManager
  > setContainer        | Установить экземпляр IoC контайнера Container





///////////////////////===============================///////////////////////
///////////////////////                               ///////////////////////
///////////////////////            Message             ///////////////////////
///////////////////////                               ///////////////////////
///////////////////////===============================///////////////////////


|---------------------------------------------------------
| > to()
|---------------------------------------------------------
| - указать получателей сообщения
| - $this to(string|array $address, string $name = null)
| - Параметры:
|
|   $address        | строка с email-адресом получателя
|   $name           | имя получателя

  - Допустим у нас есть объект с пользователем $user.
  - Отправим новое сообщение.
  - Будем использовать view по адресу: "Views/emails/test"

      Mail::queue('emails/test', array(), function($message) use($user)
      {

          // Укажем email и имя получателя:
          $message->to($user->email, $user->name);

      });


|---------------------------------------------------------
| > from()
|---------------------------------------------------------
| - указать значение "from" сообщение
| - $this from(string $address, string $name = null)
| - Параметры:
|
|   $address        | строка с email-адресом отправителя
|   $name           | имя отправителя

      Mail::queue('emails/test', array(), function($message) use($user)
      {

          // Укажем email и имя отправителя
          $message->from('me@gmail.com', 'Иван');

      });


|---------------------------------------------------------
| > attach()
|---------------------------------------------------------
| - прикрепить файл к сообщению
| - $this attach(string $file, array $options = array())
| - Параметры:
|
|   $file        | путь к файлу, который надо прикрепить к сообщению
|   $options     | массив с опциями

      Mail::queue('emails/test', array(), function($message) use($user)
      {

          // Прикрепим к сообщению файл
          // - Путь к файлу: $pathToFile
          // - Отображаемое имя: $display
          // - MIME-тип: $mime
          $message->attach($pathToFile, array('as' => $display, 'mime' => $mime));

      });


|---------------------------------------------------------
| > embed()
|---------------------------------------------------------
| - вставить файл в сообщение, и получить CID
| - string embed(string $file)
| - Параметры:
|
|   $file        | путь к файлу, который надо прикрепить к сообщению

  - Представим, что мы хотим вставить в сообщение картинку.
  - Эта операция производится в коде представления.
  - Пусть у нас есть картинка по адресу $pathToFile.
  - Тогда это делается так в не blade-файле:

      view.php
     ----------------------
      <body>

        <img src="<?php echo $message->embed($pathToFile); ?>">

      </body>

  - И вот так в blade-файле:

      view.blade.php
     ----------------------
      <body>

        <img src="{{ $message->embed($pathToFile) }}">

      </body>


|---------------------------------------------------------
| > embedData()
|---------------------------------------------------------
| - вставить данные в сообщение, и получить CID
| - string embedData(string $data, string $name, string $contentType = null)
| - Используется, если данные уже в памяти, и не хочется создавать доп.файлы.
| - Параметры:
|
|   $data        | данные в памяти
|   $name        | имя для вставляемого файла
|   $contentType | можно указать тип контента

      <body>

        <img src="{{ $message->embedData($data, 'image.jpg') }}">

      </body>


|---------------------------------------------------------
| > subject()
|---------------------------------------------------------
| - указать тему сообщения
| - $this subject(string $subject)
| - Параметры:
|
|   $subject        | строка с темой сообщения

      Mail::queue('emails/test', array(), function($message) use($user)
      {

          // Назначим тему сообщения
          $message->subject('Привет, как поживаешь?');

      });















