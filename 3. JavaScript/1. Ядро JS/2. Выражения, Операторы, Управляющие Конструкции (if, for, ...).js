/* --------------------------------------------------
 ---------------- О Г Л А В Л Е Н И Е ----------------
 Выражения, Операторы, Управляющие Конструкции

> Выражения
  > Выражение - это все, что угодно, имеющее значение

> Операторы
  > Арифметика                                | + - * / %   унарный_- унарный_+
  > Сравнение                                 | = == === != !== > < >= <=
  > Унарное присвоение                        | += -= *= /= %=
  > Операторы для работы со строками          | .= .
  > Тернарный оператор                        | a ? b : c
  > Оператор ,                                | ,
  > Инкремент и декремент                     | X++ ++X    X-- --X
  > Логические операторы                      | && || !

> Управляющие конструкции
  > If - Else
  > While
  > Do - While
  > For each ... in
  > For ... in
  > Break
  > Continue
  > label
  > Switch
  > Return



 -------------------------------------------------- */

// Выражение - это все, что угодно, имеющее значение
    var a, b, c, r;
    b = a = 5;  // эквивалентно  |  a = 5; b = 5;

// Операторы
    // Арифметика
        a = 1 + 2;      // 3
        a = 2 * 3;      // 6
        a = 3 / 2;      // 1.5
        a = 10 % 3;     // 1
        b = +a;         // 1
        b = -a;         // -1

    // Сравнение
        a = 1; b = 2; c = 1;
        r = a == c;      // true  |  мягкое сравнение
        r = a === c;     // true  |  жесткое сравнение
        r = a != b;      // true  |  не равно
        r = a !== b;     // true  |  жесткое не равно
        r = a > b;       // false |  больше
        r = a < b;       // true  |  меньше
        r = b >= a;      // true  |  больше равно
        r = b <= a;      // false |  меньше равно

    // Унарное присвоение
        a = 1;      // 1
        a += 5;     // a = a + 5;
        a -= 5;     // a = a - 5;
        a *= 2;     // a = a * 5;
        a /= 2;     // a = a / 5;
        a %= 2;     // a = a % 5;

    // Операторы для работы со строками
        a = 'Привет'; b = ', Мир!';
        a += b;                     // 'Привет, Мир!'
                                    // тоже, что и:     a = a + b;

    // Тернарный оператор
        r = (2 > 1) ? 10 : 20;   // (если 2 > 1, то вернуть 10; иначе 20)

    // Оператор ,
    // > может объединять несколко выражений, и возвращает результат последнего
    // > скобки обязательны, иначе не сработает.
        r = (a = 5, b = 10, c = 'Лондон');    // Лондон

    // Инкремент и декремент
        // числа
            a = 1; b = a++;    // b = 1
            a = 1; b = ++a;    // b = 2
        // буквы
        // > Этот механизм не работает, как в PHP
            a = 'A';   // 'A'
            r = ++a;   // NaN
        // логические значения
            a = true;  r = ++a;   // 2
            a = false; r = ++a;   // 1

    // Логические операторы
        // И
            // если в выражении нет значений == false, то возвращает последнее
            //   найденное значение == true с начала строки; иначе false
            a = 1 && 2 && 3 && 4 && 0 && 10;              // 0
            a = '' && 0 && null && 'Катя' && '0' && 10;   // ''

        // Или
            // возвращает первое найденное значение == true с начала строки, или false
            a = 1 || 2 || 3 || 4 || 0 || 10;              // 1
            a = '' || 0 || null || 'Катя' || '0' || 10;   // 'Катя'
        // Не
            a = !false;                                   // true


// Управляющие конструкции
    // If - Else
        if( 2>1 ) {
            a = 10;
        } else {
            a = 20;
        }
            // a = 10

    // While
        a = 10;
        while(a > 0) {
            a--;
        }
            // a = 0

    // Do - While
        a = 0;
        do {
            a++;
        } while(a < 10);
            // a = 10

    // For each ... in  (устарело, использовать for ... in вместо этого)
       // !! уже не работает, потому что устарело !!

    // For ... in
        // Объект класса Object
        a = { x: 10, y:20, z:30};
        for(var i in a) {
            console.log(i);  // Выводит по очереди:  x  y  z
        }
        // Объект класса Array
        a = [10,20,30];
        for(var i in a) {
            console.log('Ключ: '+i);         // 0  1  2
            console.log('Значение: '+a[i]);  // 10 20 30
        }

    // Break
    while(a < 1000000) {
        a++;
        break;
    }

    // Continue
        for(i=0; i<=10; i++) {
            if( a > 5) {
                continue;
            }
        }

    // label
    // > Как выходить (или continue'ить) из нескольких вложенных циклов
        loop1:
        for(var i=0; i<10; i++) {
            loop2:
            for(var j=0; j<10; j++) {
                if(j>5) {
                    break loop1;
                }
                if(i>5) {
                    continue loop2;
                }
            }
        }

    // Switch
        a = 3; b = '';
        switch(a) {
            case 1:   b+='один '; break;
            case 2:   b+='два '; break;
            case 3:   b+='три ';
            case 4:   b+='четыре '; break;
            default:  b+='Дефолт '; break;
        }
        console.log(b);  // три четыре   (потому что после case 3 не стоит break)

    // Return
        function returnDemo(x) {
            return x*x;
        }
        console.log(returnDemo(10));  // 100




/* --------------------------------------------------
 ---------------- И Н Ф О Р М А Ц И Я ----------------

 > Операторы
   > Полная справка об операторах: https://developer.mozilla.org/ru/docs/JavaScript/Reference/Operators
   > 3 типа операторов
     > Унарный              |  $а++
     > Бинарный             |  $a + $b
     > Тернарный            |  $a ? $b : $c
   > Операнды в выражении вычисляются согласно приоритету оператора
     > Таблица приоритетов здесь: https://developer.mozilla.org/ru/docs/JavaScript/Reference/Operators/Operator_Precedence
   > Логические операторы
     > Результатом выражения с логическими операторами в JavaScript будет
       либо false, либо первое попавшееся не false-значение
       > В отличие от PHP, где результатом выражения с логическими
         операторами будет TRUE или FALSE

 -------------------------------------------------- */