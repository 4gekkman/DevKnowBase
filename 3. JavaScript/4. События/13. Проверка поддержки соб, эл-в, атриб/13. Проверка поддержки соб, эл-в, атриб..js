/* --------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
JavaScript -> События
13. Проверка поддержки соб, эл-в, атриб.


	>




-------------------------------------------------- */










/* --------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------


Ссылки:


	> Глава 'Проверка поддержки браузером'
		учебника по JavaScript от Ильи Кантора:
				http://learn.javascript.ru/detect-support



*****************************************************
Оглавление:


	> Введение
	> Проверка поддержки браузерам события X
	> Проверка поддкржки HTML-элементов - с помощью методов, свойств
	> Проверка поддержки атрибута HTML-элемента


*****************************************************


> Введение
	> Время идет, и браузеры постепенно начинают поддерживать все новые
		и новые возможности - события, элементы, атрибуты.
	> Но производителей браузеров много. И каждый себе на уме, включает
		поддержку того или иного новшества не зависимо от других,
		не согласованно, не синхронно.
	> И хотя нововведения зачастую бывают очень удобны в использовании, но
		нам - программистам - не следует забывать о том, что решения наши должны
		быть кроссбраузерными.
		> Поэтому нам требуется четко понимать, как в коде для браузера, в котором
			он запущен, определить - поддерживается ли данный элемент/событие/атрибут
			в этом браузере, или нет?


> Проверка поддержки браузерам события X
	> Допустим, появилось какое-нибудь новое событие X. Очень удобное. Но
		оно может не поддерживатсья в каких-то браузерах. Какова будет оптимальная
		архитектура решения?
	> Оптимальная архитектура решения - есть 2 варианта:

		> Вариант 1 - подойдет в 95% случаев.
			1. Получить ссылку или создать элемент, который заведомо поддерживает
				 событие X. Например, создать эл-т input.
			2. Проверить, существует ли свойство-событие onX у элемента input:

				 	if(input.X) { ... }

		> Вариант 2 - подойдет в остальных 5% случаев
			> Существуют события, такие как DOMContentLoaded, для которых нет
				соответствующего свойства-события onX. И если не удается найти
				решение, как его проверить явно, то подойдет эта архитектура.
			> Суть - вообще не проверять его поддержку. А вместо этого продублировать
				функционал таким образом, что в каждом браузере что-нибудь да сработает.


> Проверка поддкржки HTML-элементов - с помощью методов, свойств
	> Допустим, мы хотим проверить, поддерживает ли браузер HTML-элемент
		canvas.
	> Архитектура решения такая:
		1. Посмотреть, есть ли у элемента какие-то специальные методы или св-ва.
			 Например, их можно найти в спецификации W3.
		2. Получить ссылку на эл-т или создать его, и проверить наличие
			 этих самых свойств и методов из п.1.
	> Пример:

		Если это canvas, то у него есть метод getContext
		-----
			var support = 'getContext' in document.createElement('canvas');
			if(support) {
				... сработает, если support - это canvas ...
			};


> Проверка поддержки атрибута HTML-элемента
	> Допустим, мы хотим проверить, поддерживает ли HTML-элемент input
		значение "range" атрибута type.
	> Для этого надо присвоить такой атрибут и проверить, сохранился ли он.
	> Пример:

		Если эл-т input поддерживает атрибут type='range', то он сохранится:
		-----
			var input = document.createElement('input');
			input.setAttribute('type', 'range');

			if(input.type === 'range') {
				... сработает, если значение 'range' сохранилось в атрибуте type
						эл-та input, а значит поддерживается им ...
			}





-------------------------------------------------- */


















