/* --------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
JavaScript -> События
1. События, обработчики, объект-событие




	// Рабочие примеры см. по адресу:
			0. Practical samples and techniques ->
			2. Events






-------------------------------------------------- */







/* --------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------


Ссылки:


	> Глава "Введение в браузерные события" учебника по JavaScript
		от Ильи Кантора:
				http://learn.javascript.ru/introduction-browser-events

	> Глава "Получение объекта события" учебника по JavaScript
		от Ильи Кантора:
				http://learn.javascript.ru/obtaining-event-object




*****************************************************
Оглавление:


	> Общая информация о событиях
	> Обработчики событий
	> Способы назначать обработчики событий
	> Свойство this внутри обработчика ссылается на текущий элемент
	> Получение объекта-события



*****************************************************


> Общая информация о событиях
	> Событие - сигнал от браузера о том, что что-то произошло.
	> Собятия помогают организовать определенную реакцию на действия
	 	пользователя.

> Обработчики событий
	> Обработчик событий это JS-код, который выполняется, когда наступает
		указанное событие.
	> Обработчиком может быть:
		- JS-код в строке.
		- JS-функция.
	> Рекомендуется использовать JS-функцию, а не JS-код.

> Способы назначать обработчики событий

	> Список способов:
		- Через HTML-атрибут
		- Через свойство объекта DOM
		- С помощью метода e.attachEvent (для IE<=8)
		- С помощью метода e.addEventListener (все современные браузеры, кроме IE<=8)

	> Назначение обработчика с помощью HTML-атрибута
		> Пример:

				<button onclick="jsFunc();"></button>

	> Назначение обработчика через свойство объекта DOM
		> Недостаток этого способа назначения обработчика:
			- Таким образом нельзя назначить для 1-го события несколько
				обработчиков, а это часто нужно делать.
				Эту проблему решают способы, описанные ниже.
		> Пример:

			Назначить в кач-ве обработчика анонимную функцию
				-----
				var e = document.getElementById('myelement');
				e.onclick = function() {
					... код обработчика ...
				};

			Назначить в кач-ве обработчика существующую функцию
				-----
				var e = document.getElementById('myelement');
				var myFunc = function() {
					... код обработчика ...
				};
				e.onclick = myFunc;		// !Передаем не результат ф-ии, а ссылку на неё.

	> Назначение обработчика с помощью метода e.attachEvent (для IE<=8)
		> Это аналог addEventListener, только для IE<=8.
		> Кроссбраузерный пример назначать/удалять функцию-обработчик
			события см. ниже.

	> Назначение обработчика с помощью метода addEventListener
		> Не работает в IE<=8.
		> element.addEventListener( event, handler, phase)
			> event - имя события без приставки 'on-'. Например: 'click'.
			> handler - ссылка на функцию-обработчик.
			> phase - в какой фазе распространения будет поймано события
				> По умолчанию false. Можно опускать.
		> Особенности:
			- Можно поставить любое кол-во обработчиков.
			- Нельзя получить все назначенные обработчики из элемента.
			- Браузер не гарантирует сохранение порядка выполнения обработчиков.
				Они могут быть назначены в 1 порядке, а выполнены в другом.
		> Пример - кроссбраузерный способ назначить и удалить обработчик события:


				var addEvent, removeEvent;

				if (document.addEventListener) { // проверка существования метода
					addEvent = function(elem, type, handler) {
						elem.addEventListener(type, handler, false);
					};
					removeEvent = function(elem, type, handler) {
						elem.removeEventListener(type, handler, false);
					};
				} else {
					addEvent = function(elem, type, handler) {
						elem.attachEvent("on" + type, handler);
					};
					removeEvent = function(elem, type, handler) {
						elem.detachEvent("on" + type, handler);
					};
				}

				...
				// использование:
				addEvent(elem, "click", function() { alert("Привет"); });


	> 2 кроссбраузерные функции для назначения/удаления обработчика
		события у элемента:

				// Добавление функции-обработчика указанному эл-ту
				//		Аргументы:
				//			- element		| ссылка на элемент
				//			-	event			| имя события без приставки "on"
				//			- handler		| ссылка на функцию-обработчик
				//			- phase			| фаза, в которой ловить событие (только для addEventListener, в IE<=8 не работает)
				//		Возвращает:
				//			- ничего
				function addEvent(element, event, handler, phase) {

					// Проверить, существует ли в этом браузере метод addEventListener
					// - Если да, то использовать его.
					// - Если нет, значит это старый IE, и использовать attachEvent

						// Если да, то использовать его.
						if (document.addEventListener) {
							element.addEventListener(event, handler, phase);
						}

						// Если нет, значит это старый IE, и использовать attachEvent
						else {
							element.attachEvent("on" + event, handler);
						}

				}

				// Удаление функции-обработчика у указанного эл-та
				//		Аргументы:
				//			- element		| ссылка на элемент
				//			-	event			| имя события без приставки "on"
				//			- handler		| ссылка на функцию-обработчик
				//		Возвращает:
				//			- ничего
				function removeEvent(element, event, handler, phase) {

					// Проверить, существует ли в этом браузере метод addEventListener
					// - Если да, то использовать removeEventListener.
					// - Если нет, значит это старый IE, и использовать detachEvent

						// Если да, то использовать removeEventListener.
						if (document.addEventListener) {
							element.removeEventListener(event, handler, phase);
						}

						// Если нет, значит это старый IE, и использовать detachEvent
						else {
							element.detachEvent("on" + event, handler);
						}

				}


> Свойство this внутри обработчика ссылается на текущий элемент
	> Внутри обработчика через ключевое слово this содержит ссылку на
		текущий элемент.
	> Пример:

		Вывести в консоль внут. HTML элемента, на который кликнули
			-----
			var e = document.getElementById('myelement');
			e.onclick = function() {
				console.log(this.innerHTML);	// выведет HTML, который внутри этого элемента
			};

		Скрыть элемент, на который кликнули
			-----
			var e = document.getElementById('myelement');
			e.onclick = function() {
				this.style.display = none;
			};


> Получение объекта-события
	> Базовая информация
		> При возникновении события в его обработчике могут понадобитсья различные
			детали об этом событии. Например, если это было событие click, то
			могут понадобиться координаты курсора во время клика.
		> Все доступные данные о произошедшем событии хранятся в объекте-событии.
		> Получить доступ к объекту-событию из обработчика события можно как
			показано в примере ниже - надо передать обработчику 1 аргумент, и
			в этом аргументе будет лежать ссылка на объект-событие:

				e.onclick = function(event) {
					console.log(event);					// объект-событие
					console.log(event.clientX);	// клиентская координата X клика относ. окна браузера
					console.log(event.clientY);	// клиентская координата Y клика относ. окна браузера
				};

	> IE<=8 вместо передачи параметра обработчику события создает глобальный
		объект window.event. Обработчик может обратитсья к нему:

			e.onclick = function() {
				console.log(window.event);
			};

	> Кроссбраузерное получение события:

			e.onclick = function(event) {
				event = event || window.event;
			};




-------------------------------------------------- */





















