/* --------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
JavaScript -> События
2. Всплытие, перехват, действ. брауз. по умолч.



	> Наглядная демонстрация 3-х стадий распространения события







-------------------------------------------------- */


var rect1,
		rect2,
		rect2;

rect1 = document.getElementById('div1');
rect2 = document.getElementById('div2');
rect3 = document.getElementById('div3');


	// Наглядная демонстрация 3-х стадий распространения события

		// Назначить функции-перехватчики 1-му квадрату:
			// ... для стадии перехвата
			rect1.addEventListener('click',function(){
				console.log('1 - перехват');
			},true);

			// ... для стадии всплытия
			rect1.addEventListener('click',function(){
				console.log('1 - всплытие');
			});


		// Назначить функции-перехватчики 2-му квадрату:
			// ... для стадии перехвата
			rect2.addEventListener('click',function(){
				console.log('2 - перехват');
			},true);

			// ... для стадии всплытия
			rect2.addEventListener('click',function(){
				console.log('2 - всплытие');
			});


		// Назначить функции-перехватчики 3-му квадрату:
			// ... для целевой стадии
			rect3.addEventListener('click',function(){
				console.log('3 - цель');
			});













/* --------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------


Ссылки:


	> Глава "Всплытие и перехват" учебника по JavaScript
		от Ильи Кантора:
				http://learn.javascript.ru/bubbling-and-capturing

	> Глава "Действия браузера по умолчанию" учебника по JavaScript
		от Ильи Кантора:
				http://learn.javascript.ru/default-browser-action




*****************************************************
Оглавление:


	> Где можно подробнее почитать о распространении событий
	> Кратко о всплытии событий
	> Перехват события
	> this - ссылка на элемент, в котором перехвачено событие
	> event.target - ссылка на элемент, в котором изначально возникло событие
	> Остановить всплытие может любой перехватчик события
	> 3 стадии распространения события

	> Действия браузера "по умолчанию" в ответ на то или иное события
	> Действия браузера, которые нельзя отменить

	> Кроссбраузерный способ отменить и всплытие, и действия браузара "по умолчанию"



*****************************************************


> Где можно подробнее почитать о распространении событий:
	> В моем справочнике по клиентскому JS по адресу:

		"Клиентский браузерный JS - справочник + оглавление по объектам" ->
		статья "О способности событий "всплывать" вверх по дереву DOM"


> Кратко о всплытии событий
	> Процесс, который называют всплытием события:
			Сработав в элементе А, событие последовательно сработает и во всех
			его предках вверх по дереву DOM.
	> События всплывают до window включительно.
	> Способностью всплывать обладат большинство событий, но есть исключения:
		- События focus, blur и scroll не всплывают.
		- Событие load, возникающее в элемента всплывает, но только
			до Document, а не до Window. А в Window событие load возбуждается,
			только когда будет полностью загружен весь документ.


> Перехват события

	> Обработчик события.
		> Чтобы перехватить событие E в элементе X - требуется для события
			E в элементе X назначить функцию, которая обработает событие,
			если оно возникнет. Такую функцию называют функцией-обработчиком
			события E.

	> Перехват при всплытии
		> Т.К. имеет место быть процесс всплыти события, то событие можно
			перехватывать на каждом элементе, через которые оно всплывает.
		> Например:
			> есть 3 элемента: X,Y,Z.
			> Где Y - родитель для X, а Z - родитель для Y.
			> Мы ждем событие E. И каждому из X,Y,Z назначаем по отдельной
				функции-обработчику.
			> Событие возникает в X. Срабатывает ф-ия обработчик в X.
			> Событие всплывает в Y. Срабатывает ф-ия обработчик в Y.
			> Событие всплывает в Z. Срабатывает ф-ия обработчик в Z.


> this - ссылка на элемент, в котором перехвачено событие

	> Получить ссылку на элемент, в котором перехвачено событие,
		из функции-перехватчика этого события можно 2-мя способами:
		- this
		- event.currentTarget  	| тут лежит тоже, что в this

	> Проблема в IE<=8
		> Если функция-перехватчик назначена через attachEvent, то получить
			ссылку на элемент, в котором перехвачено событие, из функции-перехватчика
			неполучится ни одним из 2-х способов.
		> Поэтому лучше назначать обработчик, где это возможно, через
			свойство объекта.

	> В примере выше this будет указывать на объект, в котором сработала
		функция-перехватчик события. Т.Е. сначала на X, затем на Y, затем на Z.


> event.target - ссылка на элемент, в котором изначально возникло событие

	> Получить ссылку на элемент, в котором ИЗНАЧАЛЬНО возникло событие,
		а не в котором оно перехвачено (this, event.currentTarget),
		из функции-перехватчика этого события можно следующим способом:
		- event.target

	> В примере выше, в каком бы из элементов X,Y,Z ни срабатывала
		функция-перехватчик события:
		- this и event.currentTarget - будут содержать ссылку на текущий элемент,
			в котором событие перехвачено.
		- event.target - будет содержать ссылку на элемент, в котором событие
			возникло изначально, и это будет всегда одна и та же ссылка.

	> В старых IE<=8 нет свойства event.target, вместо него там event.srcElement.

	> Кроссбраузерный способ получить target-элемент:

			e.onclick = function(event) {

				// Кроссбраузерно получить событие
				event = event || window.event;

				// Кроссбраузерно получить target-элемент
				var target = 	event && event.target ||
											event.srcElement;

			};


> Остановить всплытие может любой перехватчик события

	> Даже если остановить всплытие события E на уровне элемента X,
		все обработчики события E на этом уровне все равно сработают.
		> Любая функция-перехватчик события может остановить процесс
			всплытия события, закончив его на уровне этого элемента.
		> Если в элементе X назначено несколько функций-перехватчиков
			одного и того же события E, и одна из них прекращает всплытие
			события, то остальные функции все равно сработают. Это логично,
			ведь браузер не гарантирует взаимный порядок выполнения этих
			обработчиков.

	> Пример того, когда может потребоваться останавливать процесс всплытия:
		1. 	На странице по правому клику показывается с помощью JS специальное
				контекстное меню.
		2. 	На странице есть элемент A, у которого по правому клику открывается
				своё, отличающееся от того, которое в п.1, контекстное меню.
		3. 	В обработчике события - правого клика -  для контекстного меню
				из п.2. нам надо будет остановить всплытие этого события, чтобы
				вместе с контекстным меню из п.2. не возникло одновременно и
				контекстное меню из п.1.

	> Остановить всплытия можно 1-м из 2-х способов:
		- event.stopPropagation();   	| для всех браузеров, кроме IE<=8
		- event.cancelBubble = true;	| для IE<=8

		> Кроссбраузерный способ остановить всплытие:

				element.onclick = function(event) {

					// Кроссбраузерно получить событие
					event = event || window.event;

					// Кроссбраузерно остановить всплытие
					event.stopPropagation ? event.stopPropagation() :
																	(event.cancelBubble=true);
				}


> 3 стадии распространения события

	> См. иллюстрацию: "3 стадии распространения события"

	> 3 стадии:
		- Стадия перехвата (недоступна в IE<=8)
		- Стадия цели
		- Стадия всплытия

	> Стадия перехвата
		> Фаза перехвата напоминает фазу всплытия, только распространяется
			в обратном направлении. В первую очередь вызываются перехватывающие
			обработчики объекта Window, затем перехватывающие обработчики объекта
			Document, затем body и так далее вниз по дереву DOM.
		> Перехватывающие обработчики, зарегистрированные в самом целевом
			объекте не вызываются!
		> Фаза перехвата недоступна для IE<=8.
		> В фазе перехвата участвуют только события, зарегистрированные
			с помощью функции addEventListener(). Для этого 3-м аргументом
			надо передать true:

				e.addEventListener('click', funcHandler, true);

	> Стадия цели
		> Вызов обработчика событий в целевом объекте.

	> Стадия всплытия
		> Про всплытие было несколько разделов выше.



> Действия браузера "по умолчанию" в ответ на то или иное события

	> Действия браузера "по умолчанию" в ответ на то или иное событие
		и всплытие события взаимоно независимы.

	> Возникновение многих событий влечет за собой действия браузера
		"по умолчанию". Например:
		- Клик по ссылке инициирует переход на новый URL
		- Нажатие на отправить в форме посылает её на сервер
		- Нажащие ПК мыши вызывает стандартное контекстное меню
		- и т.д.

	> Есть 3 основных способа отменить действия браузера "по умолчанию"
		в ответ на возникновение события. Оба способа реализуются в теле
		функции-перехватчика этого события:
		- event.preventDefault()			| для всех браузеров, кроме IE <=8
		- event.returnValue = false		| для IE <=8
		- return false в ф-ии перехватчике 	| не работает, если обработчик назначен
																					через addEventListener/attachEvent.

	> О способе через return false в ф-ии перехватчике
		> Суть способа в том, чтобы в ф-ии перехватчике с помощью return
			вернуть false, и тогда действия браузера "по умолчанию" в ответ
			на возникшее события будут отменены.
		> Не работает, если обработчик назначен через addEventListener/attachEvent.
			Т.Е. этот способ подходит только для обработчиков, назначенных через
			свойства объекта вида "on...". Например, "onclick".
		> Возвращать true или иное значение смысла нет, они никак не
			обрабатываются.
		> Пример:

				element.onclick = function(event) {
					// ... код обработчика ...
					return false;
				}

		> Опасность при использовании готовой, а не анонимной функции
			в качестве обработчика:
			> Дело в том, что если использовать заготовленную, а не анонимную
				функцию в кач-ве обработчика события, то она будет автоматически
				завернута в анонимную.
			> Ну и чтобы наш return false сработал, и действия браузера "по умолчанию"
				в ответ на событие были отменены, именно эта самая анонимная функция
				и должна вернуть false.
			> Как правильно и неправильно:

				JS
				.....
					function handler() {
						return false;
					}

				HTML - как правильно
				.....
					<a href='http://w3.org' onclick='return handler()'>w3.org</a>

				HTML - как неправильно
				.....
					<a href='http://w3.org' onclick='handler()'>w3.org</a>

	> Кроссбраузерный способ через event.preventDefault() и
		event.returnValue = false:

			element.onclick = function(event) {

				// Кроссбраузерно получить объект-событие
				event = event || window.event

				// Кроссбраузерно отменить действия браузера "по умолчанию" в ответ
				// на возникновение события:
				event.preventDefault ? event.preventDefault() :
															(event.returnValue=false);
			}


> Действия браузера, которые нельзя отменить
	> Некоторые действия браузера "по умолчанию" происходят ДО вызова
		функции-перехватчика. Такие действия нельзя отменить.
	> Например:
		- При клике по ссылке происходит фокусировка. Большинство браузеров
			выделяют такую ссылку пунктирной границей. Фокусировку нельзя
			предотсратить из обработчика onfocus, потому что он вызывается
			уже после того, как она произошла.



> Кроссбраузерный способ отменить и всплытие, и действия браузара "по умолчанию"


		function stop(e) {

			// Кроссбраузерно получить объект-событие
			event = event || window.event

			// Кроссбраузерно остановить всплытие
			event.stopPropagation ? event.stopPropagation() :
															(event.cancelBubble=true);

			// Кроссбраузерно отменить действия браузера "по умолчанию" в ответ
			// на возникновение события:
			event.preventDefault ? event.preventDefault() :
														(event.returnValue=false);
		}













-------------------------------------------------- */





















