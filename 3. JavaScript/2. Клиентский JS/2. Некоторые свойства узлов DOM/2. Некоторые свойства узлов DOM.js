/* ---------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
Клиентский браузерный JS.
2. Некоторые свойства узлов DOM

	> nodeType			| содержит цифровое представление 1 из 12-ти типов

	> nodeName			| имя тега элемента, свойство объекта Node
	> tagName				| имя тега элемента, свойство объекта Element

	> innerHTML			| содержимое узла типа Element, без тегов, свойство объекта Element
	> outerHTML			| [Нестандартное св-во!] содержимое узла типа Element, с тегами, свойство объекта Element

	> nodeValue			| содержимое узла, свойство объекта Node
	> data					| содержимое узла, свойство объекта CharacterData



> Узнать тип узла                                         | e1 = e2.nodeType;
> Узнать название тега-элемента                           | e1 = e2.tagName;
> Узнать назвние узла                                     | e1 = e2.nodeName;
> Доступ на чтение/запись к содержимому тега-элемента     | e1 = e2.innerHTML;
> --//--, только с тегами и позволяет заменить весь узел  | e1 = e2.outerHTML;





-------------------------------------------------- */

var e,e2;





//nodeType			| содержит цифровое представление 1 из 12-ти типов
e = document.getElementById('li');		// Это HTML-элемент li
	console.log(e.nodeType);			// 1

e2 = e.nextSibling;										// А это текстовый узел справа от него
	console.log(e2.nodeType);			// 3


//nodeName			| имя тега элемента, свойство объекта Node
console.log(e.nodeName);		// 'LI'
console.log(e2.nodeName);		// '#text'


//tagName				| имя тега элемента, свойство объекта Element
console.log(e.tagName);			// 'LI'
console.log(e2.tagName);		// 'undefined' - потому что e2 - это текстовый узел, а не Element,
														// 							 и у текстового узла такого свойства нет


//innerHTML			| содержимое узла типа Element, без тегов, свойство объекта Element
console.log(e.innerHTML);				// 'Элемент списка'
e.innerHTML = 'Hello, Robert!';
console.log(e.innerHTML);				// 'Hello, Robert!'


//outerHTML			| [Нестандартное св-во!] содержимое узла типа Element, с тегами, свойство объекта Element
	// Чтение
	console.log(e.outerHTML);				// '<li id="li">How do you do today?</li>'

	// Запись
	//> При записи через outerHTML, создается новый узел,
	//  а в старой переменной остается старый узел
	console.log(e.outerHTML = 'How do you do today?');		// 'How do you do today? '
	console.log(e.outerHTML);															// '<li id="li">Hello, Robert!</li>'


//nodeValue			| содержимое узла, свойство объекта Node
//> Используется для получения содержимого любого узла, кроме
//  Element, Text, Comment.



//data					| содержимое узла, свойство объекта CharacterData
//> Используется для получения содержимого узлов Text, Comment
e = document.getElementById('ol');
	console.log(e.nextSibling.data);		// 'комментарий'












/* ---------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------

Ссылки:


	> Глава "Свойства узлов: тип, тег, содержимое и другие" учебника по JavaScript
		от Ильи Кантора:
				http://learn.javascript.ru/basic-dom-node-properties



*****************************************************
Оглавление:


	> 12 типов узлов DOM
	> Имя тега, возвращаемое nodeName/tagName, ПОЧТИ всегда в верхнем регистре
	> Тонкости свойства Element.innerHTML
		> В IE<=9 в табличных элементах innerHTML - ПОЧТИ везде только для чтения.
		> В экспрешене "e.innerHTML += значение" происходит перезапись
		> Вставленный через innerHTML <script> не выполнится
		> Если script или style находится вначале innerHTML, IE<=8 уберет их



*****************************************************





> 12 типов узлов DOM
	> Всего есть 12 типов узлов DOM:

		Имя															Цифровое обозначение
		- ELEMENT_NOD										1
		- ATTRIBUTE_NODE								2
		- TEXT_NODE											3
		- CDATA_SECTION_NODE						4
		- ENTITY_REFERENCE_NODE					5
		- ENTITY_NODE										6
		- PROCESSING_INSTRUCTION_NODE		7
		- COMMENT_NODE									8
		- DOCUMENT_NODE									9
		- DOCUMENT_TYPE_NODE						10
		- DOCUMENT_FRAGMENT_NODE				11
		- NOTATION_NODE									12

	> Если выделить 2 самых важных типа, то это будут:
		- ELEMENT_NOD										1
		- TEXT_NODE											3


> Имя тега, возвращаемое nodeName/tagName, ПОЧТИ всегда в верхнем регистре
	> Браузер может обрабатывать документ в HTML или в XML режиме. Так вот,
		когда он обрабатывает его в XML-режиме, регистр имени тега сохраняется
		точно таким, как указано в документе. Например: 'bOdY'.
	> Во всех случаях, кроме:
		- При наличии в ответе на запрос заголовка:
			'Content-Type: application/xml+xhtm'
		- При получении документа с помощью объекта XMLHttpRequest.
	> В любом случае, лучше на регистр не полагаться, а воспользоваться,
		например, функцией toLowerCase();


> Тонкости свойства Element.innerHTML
	> В IE<=9 в табличных элементах innerHTML - ПОЧТИ везде только для чтения.
		> Это касается элементов из этого списка:
			COL, COLGROUP, FRAMESET, HEAD, HTML, STYLE, TABLE, TBODY, TFOOT,
			THEAD, TITLE, TR.
		> В частности для IE9 - записывать значение в innerHTML можно только
			для элементов ячеек: TD, TH.
	> В экспрешене "e.innerHTML += значение" происходит перезапись
		> Что происходит:
			1. Удаляется старое значение innerHTML
			2. На его место ставится новое значение, которое состоит из
				старого значения, и добавленного к нему значения, которое было
				справа от знака +=.
			> То есть, происходит не добавление нового значеняи к старому, на что
				мы хотели бы рассчитывать, а вот такая вот перезапись.
		> Чем это плохо
			> Так как новое значение innerHTML записывается с нуля, то все
				изображения и другие ресурсы будут перезагружены. И если в этом
				элементе было много текста и ресурсов, то эта перезагрузка очень
				заметна.
				> Поэтому, в подобном случае лучше innerHTML не использовать для
					добавления содержимого.
	> Вставленный через innerHTML <script> не выполнится
		> Если вставить HTML-элемент script в другой элемент, воспользовавшись
			свойством Element.innerHTML, то этот скрипт не будет выполнен.
		> Пример:

			Этот скрипт не будет выполнен:
			-----
				document.body.innerHTML += '<script>alert(1)</scr'+'ipt>';

	> Если script или style находится вначале innerHTML, IE<=8 уберет их
		> Сабж.


-------------------------------------------------- */










