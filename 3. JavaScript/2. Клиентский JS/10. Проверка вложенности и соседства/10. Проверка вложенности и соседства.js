/* ---------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
Клиентский браузерный JS.
10. Проверка вложенности и соседства







-------------------------------------------------- */
















/* ---------------------------------------------------
---------------- И Н Ф О Р М А Ц И Я ----------------


Ссылки:


	> Глава "Проверка вложенности и соседства" учебника по JavaScript от Ильи Кантора:
				http://learn.javascript.ru/compare-document-position



*****************************************************
Оглавление:

	> Общая информация
	> Метод contains - позволяет проверить, является ли узел X потомком узла Y
	> Метод compareDocumentPosition - проверить, какой узел выше/ниже в DOM: X или Y
	> Кроссбраузерная реализация compareDocumentPosition




*****************************************************



> Общая информация
	> В этом учебном документе будут обсуждаться 2 проблемы:
		- Как проверить, является ли узел X потомком узла Y.
		- Как проверить, какой узел выше, а какой ниже в DOM: X или Y?


> Метод contains - позволяет проверить, является ли узел X потомком узла Y
	> Возвращает true, если nodeA содержит nodeB, или nodeA == nodeB.
	> Работает во всех браузерах, включая IE.
	> Синтаксис:

			var result = nodeA.contains(nodeB);


> Метод compareDocumentPosition - проверить, какой узел выше/ниже в DOM: X или
	> Синтаксис:

			var result = nodeA.compareDocumentPosition(nodeB);

	> Возвращает битовую маску, биты которой означают следующее:

		Маска			Число			Значение
			000000		0					nodeA == nodeB
			000001		1					узлы в разных док-тах (или 1 из них не в документе)
			000010		2					nodeB предшествует nodeA
			000100		4					nodeA предшествует nodeB
			001000		8					nodeB содержит nodeA
			010000		16				nodeA содержит nodeB
			100000		32				зарезервировано для браузера

		> Понятие узел X предшествует узлу Y означает, что что узел X встречается раньше
			в процессе прямого обхода дерева. При прямом обходе каждый узел посещается
			до того, как посещены его потомки.
		> Самый простой способ посмотреть, как выглядит число в 2-ой системе отсчета:

				var x = 20;
				console.log(x.toString(2));		// 10100

		> Как это работает - 3 кейса:

				X - левый сосед Y
				-----
					Y.compareDocumentPosition(X)		| 2 = 10		(узел X предшествует узлу Y)
					X.compareDocumentPosition(Y)		| 4 = 100		(узел Y предшествует узлу X)


				X - родитель для Y, а Y - потомок X
				-----
					X.compareDocumentPosition(Y)		| 20 = 10100
																						> Тут 2 бита:
																							- 4:  (узел X предшествует узлу Y)
																							- 16:	(узел X содержит узел Y)

					Y.compareDocumentPosition(X)		| 10 = 1010
																						> Тут 2 бита:
																							- 2:  (узел Y предшествует узлу X)
																							- 8:	(узел X содержит узел Y)

				X и Y не состоят в родственных связых, Y в документе идет позже X
				-----
					X.compareDocumentPosition(Y)		| 4 = 100 (узел X предшествует узлу Y)

		 > Пример:

		 		var nodeA = document.body;
				var nodeB = document.body.children[0];

				if( nodeA.compareDocumentPosition(nodeB) & 16 ) {
					console.log(nodeA +' содержит ' + nodeB);
				}


> Кроссбраузерная реализация compareDocumentPosition

	> Что с IE<=8
		> Не поддерживает compareDocumentPosition.
		> Но у него есть node.sourceIndex - возвращает номер элемента node в порядке
			прямого обхода дерева DOM. Только для узлов элементов.

	> Кроссбраузерный вариант compareDocumentPosition:
		> Кроссбраузерно работает только для узлов типа Element, потому что функция
			node.sourceIndex (IE<=8) работает только для таких узлов.

				// Кроссбраузерный вариант compareDocumentPosition
				// > Возвращает НЕ битовую маску, а сразу цифру.
				function compareDocumentPosition(a, b) {
					return a.compareDocumentPosition ?
						a.compareDocumentPosition(b) :
							(a != b && a.contains(b) && 16) +
								(a != b && b.contains(a) && 8) +
								(a.sourceIndex >= 0 && b.sourceIndex >= 0 ?
									(a.sourceIndex < b.sourceIndex && 4) +
										(a.sourceIndex > b.sourceIndex && 2) :
									1);
				}








-------------------------------------------------- */