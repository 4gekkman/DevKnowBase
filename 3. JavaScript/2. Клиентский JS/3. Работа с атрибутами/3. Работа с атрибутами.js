/* ---------------------------------------------------
---------------- О Г Л А В Л Е Н И Е ----------------
Клиентский браузерный JS.
3. Работа с атрибутами


	Атрибуты, как свойства объекта HTMLElement

		> Пример


	Атрибуты, как элементы коллекции Element.attributes

		> hasAttribute		| проверить наличие заданного атрибута в attributes
		> getAttribute		| получить значение атрибута из attributes
		> setAttribute		|	установить значение атрибута в attributes
		> removeAttribute	| удалить атрибут из attributes

	Некоторые особенности синхронизация 2-х вышеописанных видов атрибутов

		> id							|	пример нормальной синхронизации в обе стороны
		> href						|	пример синхронизации с неодинаковыми значениями в результате
		> checked					| пример полного отсутствия синхронизации
		> value						| пример синхронизации в 1-ну сторону
		> className/class	| пример не одинаковых названий для атрибута-свойства
													и атрибута-элемента коллекции






> Как добавить свое свое свойство или функцию в узел DOM?

Работа с аттрибутами узла DOM
> Получить псевдо-массив с атрибутами узла DOM?       | atrArray = e.attributes;
> Проверить наличие указанноо атрибута в узле DOM     | x = e.hasAttribute('');
> Получить значение атрибута по его имени             | x = e.getAttribute('');
> Установить значение атрибута                        | e.setAttribute(name,value);
> Удалить атрибут по его имени                        | e.removeAttribute('');


-------------------------------------------------- */

var e = document.getElementById('myImg');
var a;


/* Атрибуты, как свойства объекта HTMLElement
================================*/


// Пример
//> В этом примере HTML-элементу img присваивается в виде свойства
//  атрибут src, содержащий URL-адрес картинки, и картинка в итоге
//  отображается в браузере.
e.src = 'http://www.gandex.ru/upl/oboi/u755_8289_bridge_falls.jpg';






/* Атрибуты, как элементы коллекции Element.attributes
================================*/



//setAttribute		|	установить значение атрибута в attributes
//> Установить атрибут width картинки равным 300px
e.setAttribute('width',"300");


//hasAttribute		| проверить наличие заданного атрибута в attributes
//> В примере ниже методом hasAttribute мы проверяем наличие:
// 	- сначала заданного в HTML-коде атрибута alt,
// 	- затем заданного в качестве свойства объекта HTMLElement атрибута src
//  - затем заданного с помощью setAttributes() атрибута width
console.log(e.hasAttribute('alt'));		// true
console.log(e.hasAttribute('src'));		// true  -  т.е. метод видит и такой атрибут
console.log(e.hasAttribute('width'));	// true


//getAttribute		| получить значение атрибута из attributes
console.log(e.getAttribute('alt'));			// 'Альтернативный текст'
console.log(e.getAttribute('src'));			// 'http://www.gandex.ru/upl/oboi/u755_8289_bridge_falls.jpg'
console.log(e.getAttribute('width'));		// '300'


//removeAttribute	| удалить атрибут из attributes
e.removeAttribute('alt');
console.log(e.hasAttribute('alt'));		// false




/* Некоторые особенности синхронизация 2-х вышеописанных видов атрибутов
================================*/


//id			| пример нормальной синхронизации в обе стороны
//> Стандартные (не пользовательские) атрибуты-свойства синхронизируются
//	с атрибутами-элементами коллекциями.
	document.body.setAttribute('id','myBody');
	console.log(document.body.id);		// 'myBody' - произошла синхронизация


//href		| пример синхронизации с неодинаковыми значениями в результате
//> ... однако синхронизация не гарантирует одинакового значения
//> Это происходит потому, что атрибут-элемент коллекции href может
// 	быть любой строкой, а атрибут-свойство href должен быть полным URL
//  согласно спецификации W3C
a = document.getElementById('myLink');

	a.href = '/';
	console.log(a.getAttribute('href'));	// '/'
	console.log(a.href);									// 'http://localhost:63342/'

//checked		| пример полного отсутствия синхронизации
//> В данном случае вообще никакой синхронизации не происходит
e = document.getElementById('myCheck');

	e.checked = true;
	console.log(e.checked);										// true
	console.log(e.getAttribute('checked'));		// null
	console.log(e.hasAttribute('checked'));		// false

	e.checked = false;
	e.setAttribute('checked','true');
	console.log(e.checked);										// false
	console.log(e.getAttribute('checked'));		// true
	console.log(e.hasAttribute('checked'));		// true


//value		| пример синхронизации в 1-ну сторону
e = document.getElementById('myInput');

	// Атрибут-свойство синхронизируется с атрибутом-элементом коллекции attributes
	e.setAttribute('value','new');
	console.log(e.value);									// 'new'
	console.log(e.getAttribute('value'));	// 'new'

	// Атрибут-элемент коллекции attributes не синхронизируется с атрибутом-элементом
	e.value = 'old';
	console.log(e.value);									// 'old'
	console.log(e.getAttribute('value'));	// 'new'


//className/class	| пример не одинаковых названий для атрибута-свойства и атрибута-элемента коллекции
	document.body.setAttribute('class','big red boom');
	console.log(document.body.className);								// 'big red boom'








/*// Как добавить свое свое свойство или функцию в узел DOM
document.body.my = 5;
document.body.showmy = function() {
    document.write("<br>"+this.my);
};
document.body.showmy();

// Работа с аттрибутами узла DOM
    // Как получить псевдо-массив с атрибутами узла DOM?
    var ar = []; ar = document.getElementById('Иван').attributes;
    for(var i=0; i<ar.length; i++)
        write(ar[i].name);         // вывести все атрибуты на экран

    // Проверить наличие указанноо атрибута в узле DOM
    var x = document.body.children[0].hasAttribute('id');
    write(x);  // true

    // Получить значение атрибута по его имени
    x = document.body.children[0].getAttribute('id');
    write(x);  // Иван

    // Установить значение атрибута
    document.body.children[0].setAttribute('color', 'red');
    x = document.body.children[0].getAttribute('color');
    write(x);

    // Удалить атрибут по его имени
    document.body.children[0].removeAttribute('color');
    if(!document.body.children[0].hasAttribute('color'))
        write("Атрибут color удален");*/


/* ---------------------------------------------------
 ---------------- И Н Ф О Р М А Ц И Я ----------------


Ссылки:


	> Глава "Атрибуты и "свои" свойства" учебника по JavaScript
		от Ильи Кантора:
				http://learn.javascript.ru/attributes-and-custom-properties

	> Подробно про атрибуты читай в другом моем справочнике:

			Клиентский браузерный JS - справочник + оглавление по объектам.js ->
			искать по фразе "Доступ к атрибутам HTML-элемента"



*****************************************************
Оглавление:


	> Где можно узнать основную информацию об атрибутах (ссылка)
	> Атрибуты, как элементы свойства коллекции Element.attributes,
		работают неправильно в IE<=8
	> О синхронизации вышеописанных видов атрибутов
	> Особенности поведения старых IE касательно синхронизации
	> Когда надо использовать атрибуты-свойства, а когда атрибуты-элементы коллекции?
	> Пользовательские атрибуты с данными (data-...)

	> Функции для работы с классами
		> checkClass		| проверить наличие класса у элемента
		> addClass			| добавить класс элементу
		> removeClass		| удалить класс у элемента


*****************************************************





> Где можно узнать основную информацию об атрибутах (ссылка)
	> См. ссылку в ссылках.


> Атрибуты, как элементы коллекции Element.attributes,
	работают неправильно в IE<=8:
  - В них существуют только методы getAttribute и setAttribute.
  - Фактически, они работают с атрибутами, как со свойствами объекта
  	HTMLElement, а не как с элементами коллекции Element.attributes

> О синхронизации вышеописанных видов атрибутов
	- Стандартные (не пользовательские) атрибуты-свойства синхронизируются
		с атрибутами-элементами коллекциями.
	- Но при этом свойство не всегда равно атрибута (см. пример с href)
	- Некоторые атрибуты синхронизируются только в одну сторону (см. пример
		с value).
	- Некоторые атрибуты вообще не синхронизируются
	- Есть только 2 исключения - несовпадения имен атрибутов-свойств и
		атрибутов-элементов коллекции:
		- атрибуту class соответствует свойство className.
		- атрибуту for элемента label соответствует свойство htmlFor.

> Особенности поведения старых IE касательно синхронизации
	> IE<=8 синхронизируют все свойства и атрибуты, а не только стандартные.
	> В IE<=7 атрибуты-свойства и атрибуты-элементы коллекции - это одно и
		тоже. Отсюда возникаюр различные казусы, потому что для этих двух
		понятий прописано различно поведение в спецификации W3C, и как поведет
		себя браузер в некоторых случаях предугадать невозможно.
		> Например, в IE<=8 изменение атрибута-элемента коллекции class не
			изменяет класс элемента. Поэтому рекомеднуется всегда использовать
			атрибут-свойство className, чтобы избежать этой проблемы.

> Когда надо использовать атрибуты-свойства, а когда атрибуты-элементы коллекции?
	> В 98% случаев в прикладных JS-скриптах используют атрибуты в виде
		свойств объекта HTMLElement, а не альтернативу.
		Оставшиеся 2% это:
		> Когда нужно получить пользовательский HTML-атрибут, потому что он
			не синхронизирован со свойством.
		> Когда нужно получить именно значение атрибута, потому что в свойстве
			уже совсем не то (href для ссылки) или оно изменилось (value у input).
		> Когда нужно получить список всех атрибутов, включая пользовательские,
			используя коллекцию attributes.

> Пользовательские атрибуты с данными (data-...)
	> Иногда нужно прикрепить к элементу некоторые дополнительные
		данные. Стандарт HTML5 определяет для этого способ - пользовательские
		'data-...' атрибуты. Они должны:
		- Начинатсья с 'data-'.
		- Имя их должно быть полностью в нижнем регистре.
	> Эти data-атрибуты с данными не оказывают влияния на представление
		элементов, в которых присутствуют, и обеспечивают стандартный способ
		включения дополнительных данных без нарушения стандартов.
	> Как получить доступ к data-атрибутам:
		> Объект Element.dataset
			> Определен стандартом HTML5 (но проверку браузерами надо проверять).
			> Содержит свойства, имена которых соответствуют всем data-атрибутам
				данного элемента, но без приставки 'data-'.
		> С помощью метода getAttribute()

				var myData = element.getAttribute('data-mydata');


> Функции для работы с классами

	// Проверить наличие класса cls у элемента el
	// > Возвращает true, если у элемента есть класс cls. Иначе - false.
	function checkClass(el, cls) {
		for(var c = el.className.split(' '),i=c.length-1; i>=0; i--) {
			if (c[i] == cls) return true;
		}
		return false;
	}

	> Добавить класс cls в элемент el:
	function addClass(el, cls) {
		for(var c = el.className.split(' '),i=c.length-1; i>=0; i--) {
			if (c[i] == cls) return
		}

		el.className += ' '+cls
	}

	> Удалить класс cls у элемента el:
	function removeClass(el, cls) {
		for(var c = el.className.split(' '),i=c.length-1; i>=0; i--) {
			if (c[i] == cls) c.splice(i,1)
		}

		el.className = c.join(' ')
	}











 -------------------------------------------------- */
