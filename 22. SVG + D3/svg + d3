////=============================================////
////                                             ////
////                    SVG + D3                 ////
////                                             ////
////=============================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  // SVG //
  //-----//

    # Туториал по SVG от w3schools
        http://www.w3schools.com/svg/default.asp

    # Mozilla Developer Network - SVG
        https://developer.mozilla.org/ru/docs/Web/SVG

    # SVG tutorial, example and demonstration site
        http://carto.net


  // D3 //
  //----//

    // Официальные ресурсы D3 //
    //------------------------//

      # Официальный репозиторий D3 на github
          https://github.com/mbostock-bower/d3-bower

      # Официальный сайт D3
          https://d3js.org/

      # Официальная документация (wiki) для D3 (D3 v3.*)
          https://github.com/d3/d3/wiki

      # Официальная документация (wiki) для D3 (D3 v4.*)
          https://github.com/d3/d3/blob/master/README.md#api-reference

      # Официальная галерея примеров для D3
          https://github.com/d3/d3/wiki/Gallery

      # Модули D3
          https://github.com/d3

    // Компоненты и плагины D3 //
    //-------------------------//

      # Компоненты
          https://github.com/d3/d3/wiki/API-Reference

      # Плагины
          https://github.com/d3/d3-plugins


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////

  # A. SVG: основы

    А1. Основы SVG

  # Б. D3: основы + справочник

    Б1. Основы D3.js
    Б2. D3-модуль: selections (svg v4.*)

  # В. D3: наработки



////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Основы SVG

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение

  # Что такое SVG

    ▪
    ▪
    ▪

--------------------------------------

> Ссылки

  # Статьи по основам SVG
      https://svg-art.ru/
      https://developer.mozilla.org/ru/docs/Web/SVG

  # Туториал от w3schools.com по SVG
      http://www.w3schools.com/svg/default.asp

> Введение
  - В этой главе рассмотрим, что такое SVG в принципе.
  - И дадим небольшой туториал по SVG для наглядной демонстрации основ.

> Что такое SVG

  •


Б1. Основы D3.js

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение

  # Введение в D3: это JS-библиотека
  # Введение в D3: html + css + svg
  # Введение в D3: главной целью является визуализация данных
  # Введение в D3: кроссбраузерность, поддержка всеми кроме IE<=8

  # Основы D3: привязка произвольных данных к DOM
  # Основы D3: это не швейцарский нож, а направленный инструмент
  # Основы D3: повторное использование кода через компоненты и плагины
  # Основы D3: выборки
  # Основы D3: динамический свойства
  # Основы D3: enter & exit
  # Основы D3: transitions
  # Основы D3: нет автопрефиксера для браузерных префиксов

--------------------------------------

> Ссылки

> Введение
  - Цель этой главы сформировать общее представление о d3.
  - Получить цельную, общую картину мелким планом без лишних деталей.

> Введение в D3: это JS-библиотека
  - D3.js является js-библиотекой.
  - Используется для манипулирования документами на основе данных.
  - То есть, берутся какие-то элементы из DOM, и с ними проводятся манипуляции.

> Введение в D3: html + css + svg
  - Под капотом D3 использует html, css и svg.
  - Таким образом, D3 и canvas не имеют ничего общего.

> Введение в D3: главной целью является визуализация данных
  - D3 создана для удобной визуализации данных.

> Введение в D3: кроссбраузерность, поддержка всеми кроме IE<=8
  - Библиотека D3 является кроссбраузерной.
  - D3 поддерживается всеми современными браузерами.
  - D3 не поддерживается IE8 и ниже.

> Основы D3: привязка произвольных данных к DOM
  - В HTML есть понятие Document Object Model (DOM).
  - По сути, это структура документа, стстоящая из элементов.
  - D3 позволяет привязывать произвольные данные к элементам DOM.
  - Например, можно сгенерировать таблицу из массива чисел.
  - Или, например, создать бар-график на основе тех же данных.

> Основы D3: это не швейцарский нож, а направленный инструмент
  - D3 не является монолитным фреймворком, стремящемся решать все проблемы.
  - Он заточен лишь для решения 1-й задачи: 

      Эффективная манипуляция документами на основе данных.

  - Благодаря этому, D3 работает чрезвычайно быстро.
  - И может работать даже с огромными массивами данных.
  - Поддерживает динамическиеизменения и анимацию.

> Основы D3: повторное использование кода через компоненты и плагины
  - В D3 продумана тема повторного использования кода.
  - Ссылки на репозитории с ними см.в ссылках этого документа.

> Основы D3: выборки
  - Это типа D3-коллекций DOM-элементов.
  - С которыми потом с помощью D3 можно производить манипуляции.
  - Например, изменим "color" всех DOM-элементов p на "white":

      d3.selectAll("p").style("color", "white");

  - Получять эти коллекции можно, используя различные признаки.
  - Включая class, id, значения атрибутов, содержание.

> Основы D3: динамический свойства
  - Стили, атрибуты и прочие св-ва в D3 могут быть функциями.
  - Это даёт широкие возможности, и позволяет заготавливать эти функции.
  - В D3 есть множество подобного рода заготовленных функций.
  - Например, раскрасим случайным образом все DOM-элементы p:

      d3.selectAll("p").style("color", function() {
        return "hsl(" + Math.random() * 360 + ",100%,50%)";
      });  

> Основы D3: привязка данных к выборкам
  - К выборке можно привязать данные.
  - Чтобы потом на основе этих данных модифицировать выборку.
  - Однажды привязав данные, повторно можно их не привязывать.
  - Например, при обновлении выборки этого делать уже не обязательно.
  - Пример:

      d3.selectAll("p")
          .data([4, 8, 15, 16, 23, 42])
          .style("font-size", function(d) { return d + "px"; });  

> Основы D3: enter & exit
  - В D3 есть так называемые enter и exit выборки.
  - С их помощью можно создавать новые узлы для входящих данных.
  - И удалять старые узлы, которые больше не нужны.
  - Итак, домустим у нас есть данные, привязанные к выборке.
  - Каждый элемент в массиве данных связан с соотв.узлом из выборки.
  - Если узлов меньше, чем данных, то лишние эл-ты попадают в выборку enter.
  - Которую можно инициировать, добавив туда элементов. Пример:

      d3.select("body").selectAll("p")
        .data([4, 8, 15, 16, 23, 42])
        .enter()
        .append("p")
        .text(function(d) { return "I’m number " + d + "!"; });  

  - Если забыть об enter/exit элементах, то при работе с выборками будут 
    учитываться лишь те элементы, для которых есть данные.
  - Общим паттерном является разбить изначальную выборку на 3 части:

      ▪ Updating nodes
      ▪ Entering nodes to add
      ▪ Exiting nodes to remove

  - Пример:

        // Update…
        var p = d3.select("body").selectAll("p")
            .data([4, 8, 15, 16, 23, 42])
            .text(function(d) { return d; });

        // Enter…
        p.enter().append("p")
            .text(function(d) { return d; });

        // Exit…
        p.exit().remove();  

> Основы D3: transitions
  - D3 имеет встроенный функционал переходов (transitions) из CSS3.
  - Так что при изменении данных всё может плавно изменяться.
  - Это приминимо как к примитивным, так и к составным значениям.
  - Например, можно плавно изменить цвет фона документа на чёрный:

      d3.select("body").transition()
          .style("background-color", "black");  

> Основы D3: нет автопрефиксера для браузерных префиксов
  - Многие привыкли работать с CSS с автопрефиксером.
  - Однако, в D3 автопрефиксинга нет, нужно иметь это в виду.


Б2. D3-модуль: selections (svg v4.*)

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение
  # Справочник

    • Selecting Elements

      ▪ d3.selection        | Получить выборку из 1-го корневого элемента DOM [document.documentElement]
      ▪ d3.select           | Получить выборку из 1-го эл-та [по DOM-ссылке / 1-й по списку по селектору]
      ▪ d3.selectAll        | Получить выборку из N эл-тов [по массиву DOM-ссылок / по селектору]
      ▪ selection.select    | Получить выборку из N эл-тов на основе другой выборки [по селектору / по анонимной функции]
      ▪ selection.selectAll | Получить выборку из N эл-тов на основе другой выборки [по селектору / по анонимной функции]
      ▪ selection.filter    | Провести фильтрацию выборки [по селектору / по анонимной функции]
      ▪ selection.merge     | Объединить выборки [не произвольные, обычно ENTER + UPDATE]
      ▪ d3.matcher          | Возвращает функцию, которая возвращает true, если эл-т this соответствует указанному селектору [для внутреннего использования D3]
      ▪ d3.selector         | Возвращает функцию, которая возвращает первый для this элемент-потомок, соотв-ий указанному селектору [для внутреннего использования D3]
      ▪ d3.selectorAll      | Возвращает функцию, которая возвращает все для this элементы-потомки, соотв-щие указанному селектору [для внутреннего использования D3]
      ▪ d3.window           | Возвращает окно-владельца для указанного узла

    • Modifying Elements

      ▪ selection.classed   |
      ▪ selection.style     |
      ▪ selection.property  |
      ▪ selection.text      |
      ▪ selection.html      |
      ▪ selection.append    |
      ▪ selection.insert    |
      ▪ selection.remove    |
      ▪ selection.sort      |
      ▪ selection.order     |
      ▪ selection.raise     |
      ▪ selection.lower     |
      ▪ d3.creator          |

    • Joining Data

      ▪ selection.data      |
      ▪ selection.enter     |
      ▪ selection.exit      |
      ▪ selection.datum     |

    • Handling Events

      ▪ selection.on        |
      ▪ selection.dispatch  |
      ▪ d3.event            |
      ▪ d3.customEvent      |
      ▪ d3.mouse            |
      ▪ d3.touch            |
      ▪ d3.touches          |

    • Control Flow

      ▪ selection.each      |
      ▪ selection.call      |
      ▪ selection.empty     |
      ▪ selection.nodes     |
      ▪ selection.node      |
      ▪ selection.size      |

    • Local Variables

      ▪ d3.local            |
      ▪ local.set           |
      ▪ local.get           |
      ▪ local.remove        |
      ▪ local.toString      |

    • Namespaces

      ▪ d3.namespace        |
      ▪ d3.namespaces       |

--------------------------------------

> Ссылки

  # Ссылка на соотв.раздел документации D3 v4.*
      https://github.com/d3/d3/blob/master/README.md#selections-d3-selection

> Ведение
  - Это справочник по модулю Selections библиотеки D3 v4.*.

> Справочник

//--------------------//
// Selecting Elements //
//--------------------//

  // d3.selection //
  //--------------//
  // - d3.selection()
  // - Получить выборку из 1-го корневого элемента DOM [document.documentElement].

    • Проверка, является ли переменная D3-выборкой

      var selection = d3.selectAll("p");
      var is = selection instanceof d3.selection();   // true/false

    • Расширить прототип selection (например, добавить метод checked для проверки состояния чекбоксов)

      ▪ Расширить

          d3.selection.prototype.checked = function(value) {
            return arguments.length < 1
                ? this.property("checked")
                : this.property("checked", !!value);
          };
          d3.selectAll("input[type=checkbox]").checked(true);

      ▪ Использовать

          d3.selectAll("input[type=checkbox]").checked(true);

  // d3.select //
  //-----------//
  // - d3.select(selector)
  // - Получить выборку из 1-го эл-та [по DOM-ссылке / 1-й по списку по селектору].
  // - Если таковых найдено не будет, вернёт пустую выборку.
  // - Если такувых будет найдено много, вернёт лишь 1-й из них.

    • Если selector является css-селектором
      - Получить выборку из 1-го найденный элемента "a"

        var anchor = d3.select("a");

    • Если selector не является строкой
      - Тогда это должна быть DOM-ссылка (или функция, её возвращающая).
      - Пример ниже окрасит шрифт всех эл-тов "p" в документе в красный цвет:

          d3.selectAll("p").on("click", function() {
            d3.select(this).style("color", "red");
          });

  // d3.selectAll //
  //--------------//
  // - d3.selectAll(selector)
  // - Получить выборку из N эл-тов [по массиву DOM-ссылок / по селектору].
  // - Если ничего не найдёт, вернёт пустую выборку.

    • Если selector является css-селектором
      - Получить все элементы "p" в документе:

          var paragraph = d3.selectAll("p");

    • Если selector не является строкой
      - Тогда это должен быть массив ссылок на DOM-узлы.
      - Это полезно, когда таковой имеется.
      - Это также может быть псевдо-массив, как NodeList или argumetns.
      - Например, this.childNodes в обработчике событий, или document.links.
      - Например, покрасить все ссылки в красный цвет:

          d3.selectAll(document.links).style("color", "red");

  // selection.select  //
  //-------------------//
  // - selection.select(selector).
  // - Получить выборку из N эл-тов на основе другой выборки [по селектору / по анонимной функции].
  // - Для каждого эл-та из selection, выбрать среди его потомков 1-й
  //   элемент, который соответствует указанному selector.
  // - Если selector пуст или null, все эл-ты в новой выборке тоже будут пустые.
  // - Если эл-т из текущей выборки имеет связанные данные, то новый элемент,
  //   полученный среди его потомков, тоже будет связан с этими данными.
  // - Если для эл-та X найдено среди его потомков > 1 элементов, соответствующих
  //   selector, будет взят лишь 1-й из них.

    • Если selector является css-селектором
      - Для каждого эл-та "p" в док-те выбрать среди его потомков 1-й эл-т "b":

          var b = d3.selectAll("p").select("b");

    • Если selector не является css-селектором
      - А является функцией, она будет выполнена для каждого эл-та выборки.
      - В функцию будут переданы: d (данные), i (индекс), nodes и this (DOM-ссылка на текущий эл-т).
      - Функция должна возвращать 1-ин элемент.
      - Для каждого эл-та "p" в док-те выбрать 1-го предыдущего соседа:

          var previous = d3.selectAll("p").select(function() {
            return this.previousElementSibling;
          });

  // selection.selectAll //
  //---------------------//
  // - selection.selectAll(selector).
  // - Получить выборку из N эл-тов на основе другой выборки [по селектору / по анонимной функции].
  // - Для каждого эл-та из selection, выбрать среди его потомков ВСЕ
  //   элементы, которые соответствуют указанному selector.
  // - То есть, на 1-им элемент в selection м.б. найдено N элементов-потомков,
  //   соответствующих selector. Они будут сгруппированы по своим топовым узлам.
  // - Если соответствующих selector элементов для эл-та из selection не найдено,
  //   или если selector пуст или null, группа для этого индекса тоже будет пустая.
  // - Элементы в новой выборке не наследуют данные от элементов в старом.
  //   Используй selection.data для распространения данных в эл-ты новой выборки.

    • Если selector является css-селектором
      - Для каждого эл-та "p" в док-те выбрать среди его потомков ВСЕ эл-ты "b":

          var b = d3.selectAll("p").selectAll("b");

    • Если selector не является css-селектором
      - А является функцией, она будет выполнена для каждого эл-та выборки.
      - В функцию будут переданы: d (данные), i (индекс), nodes и this (DOM-ссылка на текущий эл-т).
      - Функция должна возвращать массив элементов (или псевдо-массив, вроде NodtList или arguments).
      - Или же пустой массив, если нет соответствующих элементов.
      - Для каждого эл-та "p" в док-те выбрать 1-ых предыдущего и следующего соседей:

          var sibling = d3.selectAll("p").selectAll(function() {
            return [
              this.previousElementSibling,
              this.nextElementSibling
            ];
          });

  // selection.filter //
  //------------------//
  // - selection.filter(filter).
  // - Провести фильтрацию выборки [по селектору / по анонимной функции].
  // - Вернёт новую выборку, содержащую лишь элементы, прошедшие фильтрацию.
  // - При этом индексы не сохраняются.

    • Если filter является css-селектором
      - Получить все эл-ты "tr" в документе, отфильтровать все нечётные:

          var even = d3.selectAll("tr").filter(":nth-child(even)");

      - Это примерно тоже самое, что сделать вот так:

          var even = d3.selectAll("tr:nth-child(even)");

    • Если selector не является css-селектором
      - А является функцией, она будет выполнена для каждого эл-та выборки.
      - В функцию будут переданы: d (данные), i (индекс), nodes и this (DOM-ссылка на текущий эл-т).
      - Получить все эл-ты "tr" в документе, отфильтровать все нечётные:

          var even = d3.selectAll("tr").filter(function(d, i) { return i & 1; });

      - Это примерно тоже самое, что сделать вот так:

          var even = d3.selectAll("tr").select(function(d, i) { return i & 1 ? this : null; });

  // selection.merge //
  //-----------------//
  // - selection.merge(other).
  // - Объединить выборки [не произвольные, обычно ENTER + UPDATE].
  // - Возвращает новую выборку, объединяя выботки selection с other.
  // - Результирующая выборка имеет то же число групп и родителей, что и selection.
  // - Обычно этот метод используется для объединения выборок enter и update после data-join.
  //   Мосле модификации эл-тов в выборках enter и update, можно их
  //   объединить, и выполнять операции сразу на всех эл-х выборки enter+update.

    • UPDATE

        var circle = svg.selectAll("circle").data(data) // UPDATE
            .style("fill", "blue");

    • EXIT

        circle.exit().remove();   // EXIT

    • ENTER, ENTER + UPDATE

        circle.enter().append("circle") // ENTER
          .style("fill", "green")
          .merge(circle)                // ENTER + UPDATE
          .style("stroke", "black");

  // d3.matcher //
  //------------//
  // - d3.matcher(selector).
  // - Возвращает функцию, которая возвращает true, если эл-т this соответствует указанному селектору [для внутреннего использования D3].
  // - Автопрефиксинг для браузерных префиксов не поддерживается.

    • Например, эти 2 выражения эквивалентны:

        var div = selection.filter("div");
        var div = selection.filter(d3.matcher("div"));

  // d3.selector //
  //-------------//
  // - d3.selector(selector).
  // - Возвращает функцию, которая возвращает первый для this элемент-потомок, соотв-ий указанному селектору [для внутреннего использования D3].

    • Например, эти 2 выражения эквивалентны:

        var div = selection.select("div");
        var div = selection.select(d3.selector("div"));

  // d3.selectorAll //
  //----------------//
  // - d3.selectorAll(selector).
  // - Возвращает функцию, которая возвращает все для this элементы-потомки, соотв-щие указанному селектору [для внутреннего использования D3].

    • Например, эти 2 выражения эквивалентны:

        var div = selection.selectAll("div");
        var div = selection.selectAll(d3.selectorAll("div"));

  // d3.window //
  //-----------//
  // - d3.window(node).
  // - Возвращает окно-владельца для указанного node.


