////==================================================////
////                                                  ////
////                      Vagrant                     ////
////                                                  ////
////==================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  // Официальные ресурсы //
  //---------------------//

    # Официальный сайт Vagrant
        https://www.vagrantup.com

    # Официальный репозиторий боксов для Vagrant
        https://atlas.hashicorp.com/boxes/search



////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # A.  Vagrant

    А1. Что такое Vagrant
    А2. Установка Vagrant
    А3. Вводный инструктаж
    А4. Справочник по CLI
    А5. Работа с Vagrantfile
    А6. Инициализатор Docker

  # Б.  Рецепты и наработки

    Б1. Организация NFS на windows с помощью vagrant-плагина


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////

А1. Что такое Vagrant

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Что такое Vagrant
    # Какая мне польза от Vagrant

  --------------------------------------

  > Ссылки

    # Оф.обзорные статьи про Vagrant
        https://www.vagrantup.com/docs/
        https://www.vagrantup.com/docs/why-vagrant/

  > Введение
    - Это обзорная глава про Vagrant.

  > Что такое Vagrant
    - CLI для управления виртуальными машинами.
    - Позволяет настраивать, воспроизводить и портировать рабочие среды.
    - Работает со следующими провайдерами:

      • VirtualBox
      • VMware
      • AWS
      • любым другим провайдером

    - Работает со следующими инструментами для provisioning:

      • Шелл-скрипты
      • Chef
      • Puppet
      • ...и другие.

    - С помощью последних можно авто-ки устанавливать и настраивать софт на ВМ.

  > Какая мне польза от Vagrant

    • Среда для выполнения Docker
      - Docker работает нативно только на Linux.
      - А я использую в повседневной жизни Windows.
      - Поэтому работать с Docker могу только через ВМ с Linux.
      - Из коробки Docker идёт с Docker Machines на boot2docker.
      - Но этот дистрибутив не поддерживает UTF8, и весьма урезан.
      - Разумнее воспользоваться Vagrant и собрать свой Linux.

    • Среда для локальной разработки
      - Выше я упоминул, что в повседневной жизни использую Windows.
      - А разработку сегодня вести комфортно только на Linux.
      - Поэтому для ведения разработки необходима ВМ с Linux.
      - Нет необходимости на каждый проект создавать отдельную ВМ.
      - Docker Compose позволяет изолировать проекты на 1-й ВМ.

    • Одинаковая локальная среда для всей команды
      - При кооп.разработке можно передать коллегам Vagrantfile.
      - И они получат готовую для разработки среду с Docker.

    • Возможность показывать работы друзьям и клиентам
      - Используя функцию Vagrant Share.


А2. Установка Vagrant

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Установка на Windows

  --------------------------------------

  > Ссылки

    # Оф.статья об установке Vagrant
        https://www.vagrantup.com/docs/installation/

  > Введение
    - В этой главе описана установка Vagrant.

  > Установка на Windows

    1. Перейти на страницу загрузок
      - https://www.vagrantup.com/downloads.html

    2. Скачать версия для Windows
      - Если у тебя 64-разрядная система, то её.

    3. Установить Vagrant
      - Выполнив скачанный файл.


А3. Вводный инструктаж

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Инициация проекта
    # Vagrant-боксы

      • Базовые образы - боксы
      • Репозиторий для боксов
      • Из чего состоит имя бокса
      • Как скачать бокс
      • Применить бокс в Vagrantfile

    # Запуск ВМ и доступ через SSH

      • Запуск ВМ
      • Подключение в ВМ через SSH

    # Общие папки

      • Общие синхронизирующиеся папки
      • Общие папки по умолчанию
      • Настройка общих папок

    # Инициализация бокса (provisioning)

      • Что такое инициализация
      • Когда происходит инициализация
      • Как явно указать не делать инициализацию
      • Пример инициализации с помощью bash-скриптов

    # Работа с сетями

      • Пробрасываемые по умолчанию порты
      • Проброс портов

    # Vagrant Share

      • Регистрация в HashiCorp Atlas и аутентификация
      • Применение Vagrant Share

    # Завершение работы с ВМ

      • Приостановка (suspend)
      • Остановка (halt)
      • Удаление (destroy)

  --------------------------------------

  > Ссылки

    # Оф.раздел документации с вводным инструктажом
        https://www.vagrantup.com/docs/getting-started/

  > Введение
    - Это глава с вводным поверхностным инструктажом по Vagrant.
    - В ней мы пробежимся по всему Vagrant, не вдаваясь в детали.

  > Инициация проекта
    - Итак, ты решил создать новый vagrant-проект.
    - Выбери какую-нибудь папочку, и выполни там:

        vagrant init

    - Vagrant создаст в этой папочке свеженький Vagrantfile.
    - Он наполнен массой комментариев и примеров использования.
    - Зачем нужен Vagrantfile:

      • Пометить корневой каталог vagrant-проекта
        - Многие настройки vagrant относительны этого каталога.

      • Указать бокс и настроить его
        - В нём можно указать, какой бокс использовать на ВМ.
        - Можно установить на него всякие программы.
        - Можно выполнить на нём всякие действия.

  > Vagrant-боксы

    • Базовые образы - боксы
      - Тебе не захочется делать ВМ с нуля, это процесс непростой.
      - Лучше используй уже готовые базовые образы. Их называют "боксами".
      - Новый vagrant-проект всегда начинается с выбора бокса.

    • Репозиторий для боксов
      - У корпорации HashiCorp (разработчика Vagrant) есть репозиторий для боксов.
      - Создатели боксов могут закачивать туда свои боксы.
      - А пользователи могут их оттуда в любое время скачивать.
      - Посмотреть, что имеется в наличии, можно у них на сайте:

          https://atlas.hashicorp.com/boxes/search

    • Из чего состоит имя бокса
      - Оно делится на 2 части: [вендор]/[название].
      - Например: hashicorp/precise64

    • Как скачать бокс
      - Для этого можно использовать команду vagrant box add.
      - Бокс будет скачан и доступен для многократного использования.
      - Например, скачаем бокс "hashicorp/precise64":

          vagrant box add hashicorp/precise64

    • Применить бокс в Vagrantfile
      - Для этого не обязательно самому скачивать бокс.
      - Vagrant сам бы его скачал в случае отсутствия.
      - В Vagrantfile можно указать лишь 1-ин бокс.
      - Например, укажем бокс "hashicorp/precise64":

          Vagrant.configure("2") do |config|
            config.vm.box = "hashicorp/precise64"
          end

  > Запуск ВМ и доступ через SSH

    • Запуск ВМ
      - Запустить ВМ можно командой: vagrant up
      - Её надо выполнить в корне vagrant-проекта или выше по дереву.

    • Подключение в ВМ через SSH
      - Подключиться к ВМ через SSH можно командой: vagrant ssh
      - Её надо выполнить в корне vagrant-проекта или выше по дереву.

  > Общие папки

    • Общие синхронизирующиеся папки
      - Можно синхронизировать указанные папки на гесте и хосте.

    • Общие папки по умолчанию
      - При создании проекта vagrant по умолчанию создаёт 1 общую папку.
      - Это папка проекта на стороне хоста, и папка /Vagrant на стороне геста.

    • Настройка общих папок
      - Читай про это в разделе: "А5. Работа с Vagrantfile".

  > Инициализация бокса (provisioning)

    • Что такое инициализация
      - Автоматическая настройка бокса при первом запуске.
      - Установка пакетов, выполнение различного рода команд.
      - Чтобы после запуска система приобрела желаемый вид.

    • Когда происходит инициализация

      ▪ При первом vagrant up
      ▪ При vagrant up с опцией --provision
      ▪ При vagrant provision на работающей среде
      ▪ При vagrant reload --provision

    • Как явно указать не делать инициализацию
      - С помощью опции --no-provision

    • Пример инициализации с помощью bash-скриптов
      - Положем в корень vagrant-проекта bash-скрипт bootstrap.sh.
      - В нём мы установим nginx в бокс:

          #!/usr/bin/env bash

          apt-get update
          apt-get install -y nginx

      - Затем настроим инициализацию в Vagrantfile.
      - Укажем тип инициализации: shell.
      - Укажем путь к шелл-скрипту относительно корня проекта.
      - Для этого, добавим следующее в Vagrantfile:

          config.vm.provision :shell, path: "bootstrap.sh"

      - Теперь запустим ВМ с помощью: vagrant up
      - В терминале должен отображаться весь вывод от инициализации.
      - После запуска подключимся к ВМ через ssh: vagrant ssh
      - Проверим сервер введя: curl 127.0.0.1

  > Работа с сетями

    • Пробрасываемые по умолчанию порты
      - Vagrant автоматичеси пробрасывает порт 22 на гесте на 2222 на хосте.
      - Это порт для SSH-соединений.

    • Проброс портов
      - Можно пробросить порты между гестом и хостом.
      - Пробросим порт 80 с геста на порт 8080 на хосте.
      - Для этого надо добавить в Vagrantfile следующее:

          config.vm.network :forwarded_port, guest: 80, host: 8080

      - Предполагая, что ВМ с прошлых примеров запущена, перезагрузим её.
      - Для этого выполним: vagrant reload
      - При загрузке машины она выводит список пробрасываемых портов.
      - Теперь стартовая страница nginx д.б. доступна по адресу localhost:8080.

  > Vagrant Share

    • Регистрация в HashiCorp Atlas и аутентификация
      - Для применения Vagrant Share надо зарегистрироваться на их сайте.
      - Создать аккаунт: https://atlas.hashicorp.com/account/new
      - Затем нужно аутентифицироваться через CLI:

          vagrant login

    • Применение Vagrant Share
      - С помощью VS можно сделать ВМ доступной из интернета.
      - На твой сайт на ВМ сможет зайти кто угодно.
      - С помощью VS можно показать свой сайт друзьям или заказчикам.
      - Чтобы запустить VS нужно выполнить:

          vagrant share

      - Запустится демон, и выдаст URL примерно такого вида:

          http://stifling-cony-7190.vagrantshare.com

      - Попробуй с планшета зайти на сайт, и увидишь приветствие nginx.
      - Не пользуйся проброшенными на хост портами, а пользуйся гест-портами.
      - В данном случае, сервер nginx доступен с портом 80.
      - Чтобы закончить сеанс VS, нажми:

          ctrl-c

  > Завершение работы с ВМ

    • Приостановка (suspend)
      - Перевод виртуальной машины в спящий режим.
      - Команды:

          vagrant suspend   | перевести в спящий режим
          vagrant up        | разбудить

    • Остановка (halt)
      - Аккуратно выключить виртуальную машину.
      - Команды:

          vagrant halt      | аккуратно выключить
          vagrant up        | включить

    • Удаление (destroy)
      - Тотальное удаление виртуальной машины.
      - Что произойдёт:

        ▪ Остановка ВМ
        ▪ Удаление всех жёстких дисков ВМ (и данных на них)

      - Команды:

          vagrant destroy   | тотально удалить ВМ
          vagrant up        | создать новую ВМ


А4. Справочник по CLI

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Опция -h
    # Справочник API CLI Vagrant

      • Часто используемые

        - init          | Создать в текущем каталоге шаблонный Vagrantfile
        - up            | Создать и настроить ВМ на основе Vagrantfile, или включить остановленную ВМ
        - halt          | Аккуратно останавливает работающую ВМ
        - destroy       | Остановить и тотально удалить виртуальную машину
        - ssh           | Подключиться к текущей работающей ВМ по SSH
        - provision     | Запустить инициализацию для текущей работающей ВМ
        - reload        | Сделать vagrant halt, затем vagrant up

      • Информационные

        - status        | Получить статус машин под управлением Vagrant
        - port          | Вывести список всех проброшенных на хост портов текущей ВМ.
        - version       | Вывести версию установленного Vagrant, и последнюю доступную версию
        - ssh-config    | Вывести информацию для организации SSH-подключения к текущей ВМ

      • Расшаривание ВМ

        - login         | Аутентифицироваться на сервере HashiCorp's Atlas
        - share         | Запустить сессию Vagrant Share, расшарив ВМ для интернета
        - connect       | Получить статический IP для взаимодействия с ВМ из интернета.

      • Прочие

        - box           | Управление боксами (add, remove, etc)
          ▪ add         |   добавить бокс
          ▪ list        |   вывести список всех имеющихся боксов
          ▪ outdated    |   проверить, не устарел ли текущий бокс
          ▪ remove      |   удалить бокс
          ▪ repackage   |   переупаковать бокс
          ▪ update      |   обновить текущий бокс
        - destroy       | Остановить и тотально удалить виртуальную машину
        - global-status | Вывести статус всех активных сред на системе для текущего пользователя
        - login         | Аутентифицироваться на сервере HashiCorp's Atlas
        - package       | Упаковать текущую работающую VirtualBox-среду в бокс
        - plugin        | Управление плагинами (install, list, etc)
          ▪ install     |   установить плагин
          ▪ license     |   лицензия на плагин
          ▪ list        |   список установленных плагинов
          ▪ uninstall   |   удалить плагин
          ▪ update      |   обновить плагин
        - powershell    | Открыть powershell-соединение с ВМ, если она его поддерживает
        - provision     | Запустить инициализацию для текущей работающей ВМ
        - rdp           | Запустить RDP-клиент для удалённой desktop-сессии с гестом (только Windows)
        - resume        | Разбудить ВМ из спящего (suspended) режима
        - snapshot      | Управление снэпшотами ВМ (push, pop, save, restore, list, delete)
        - suspend       | Поместить текущую ВМ в спящий режим

  --------------------------------------

  > Ссылки

    # Оф.раздел документации с CLI-справочником
        https://www.vagrantup.com/docs/cli/

  > Введение
    - В этой главе справочник по API CLI Vagrant.
    - Весь API доступен через единую команду vagrant.

  > Опция -h
    - С помощью -h можно получить справку по конкретной команде.
    - Например, справка по команде vagrant init:

        vagrant init -h

  > Справочник API CLI Vagrant

    // box //
    //-----//
    // - Управление боксами (add, remove, etc)

      • Список субкоманд

        ▪ add         | добавить бокс
        ▪ list        | вывести список всех установленных в Vagrant боксов
        ▪ outdated    | проверить, не устарел ли текущий бокс
        ▪ remove      | удалить указанный бокс
        ▪ repackage   | переупаковать бокс
        ▪ update      | обновить текущий бокс

      • add

        ▪ Формат

            vagrant box add ADDRESS

        ▪ Общая информация
          - Добавить бокс с указанным адресом в Vagrant.
          - Адрес может быть одним из 3-ёх:

            ▪ Адрес типа: "hashicorp/precise64"
            ▪ Path или URL к боксу в каталоге: https://atlas.hashicorp.com/boxes/search
            ▪ Прямой URL к файлу бокса
              - В этом случае надо указать флаг --name.
              - И versioning/updates не будут работать.

        ▪ Докачка
          - В случае ошибки или ctrl-c
          - Если вдруг скачивание будет прервано.
          - Vagrant попатается докачать при следующем запросе к боксу.
          - Через 6 часов после 1-го запроса попытки докачать прекратятся.

        ▪ Опции

          ▪ --box-version VALUE   | версия или ограничение в формате semver
          ▪ --cacert CERTFILE     | сертификат для CA
          ▪ --capath CERTDIR      | каталог сертификата для CA
          ▪ --cert CERTFILE       | клиентский сертификат для исп-ия при скачке
          ▪ --clean               | удалить временные файлы для того же URL (недокаченные образы)
          ▪ --force               | скачать и перезаписать существующий бокс с тем же именем
          ▪ --insecure            | не проверять SSL-сертификаты для HTTPS-URL
          ▪ --provider PROVIDER   | подходит ли бокс для указанного провайдера

        ▪ Опции при работе с файлами-боксами

          ▪ --checksum VALUE      | контрольная сумма для сверки с оной бокса
          ▪ --checksum-type TYPE  | тип контрольной суммы: "md5", "sha1", and "sha256"
          ▪ --name VALUE          | логическое имя бокса для помещения в config.vm.box

      • list
        - Вывести список всех установленных в Vagrant боксов

      • outdated

        ▪ Общая информация
          - Проверить, не устарел ли текущий бокс.

        ▪ Опции

          ▪ --global  | проверить все установленные боксы, не только текущий

      • remove

        ▪ Формат

            vagrant box remove NAME

        ▪ Общая информация
          - Удалить указанный бокс.

        ▪ Опции

          ▪ --box-version VALUE | версии или ограничения удаляемых боксов в формате semver
          ▪ --all               | удалить все установленные в Vagrant боксы
          ▪ --force             | удалить даже используемые в настоящий момент боксы
          ▪ --provider VALUE    | удалить только боксы для указанного провайдера

      • repackage
        - Переупаковать указанный бокс и положить в текущий каталог.
        - Имя, провайдера и версию можно извлечь с помощью vagrant box list.
        - При установке бокса Vagrant сохраняет его внутри себя.
        - Оригинальный *.box нигде не присутствует.
        - А эта команда поможет извлечь этот самый *.box из установленного.
        - Формат:

            vagrant box repackage NAME PROVIDER VERSION

      • update

        ▪ Общая информация
          - Обновить текущий бокс, если есть обновления.
          - Можно также обновить не текущий, а указанный бокс.
          - Для этого надо воспользоватсья опцией --box.
          - Обновление бокса не обновит уже работающу ВМ.
          - Чтобы изменения вступили в силу, надо:

            ▪ vagrant destroy
            ▪ vagrant up

        ▪ Опции

          ▪ --box VALUE       | обновить указанный бокс
          ▪ --provider VALUE  | провайдер-специфичное обновление

    // connect //
    //---------//
    // - Получить статический IP для взаимодействия с ВМ из интернета.

      • Формат

          vagrant connect NAME

      • Что делает
        - Создаёт статический IP для взаимодействия с ВМ из интернета.
        - Любой TCP-трафик на этот IP попадает в ВМ.

      • Как это работает

        ▪ Петя может общаться через IP с Васиной машиной
          - Вася у себя на ноутбуке запустил ВМ и выполнил vagrant share.
          - И получил адрес типа: http://nervous-otter-6538.vagrantshare.com
          - Часть адреса "nervous-otter-6538" является UID расшаренной ВМ.
          - Петя у себя на ноутбуке запускает:

              vagrant connect nervous-otter-6538

          - В ответ получает IP для общения с Васиной машиной.

        ▪ Промежуточная ВМ
          - После vagrant connect создаётся mini-ВМ.
          - Она подключается к сетевому интерфейсу хоста.
          - И резервирует на нём IP.
          - Все TCP-пакеты через этот IP проксируются на ВМ Васи.

        ▪ Сущность этого подключения
          - Допусним на ВМ работает веб-сервер NGINX.
          - И с геста проброшен порт 80 на хостовский 81.
          - А vagrant connect дал IP 172.16.0.2
          - Тогда подключиться к веб-серверу Петя сможет так:

              http://172.16.0.2:81

        ▪ SSH-ключи в опасности
          - Любой подключившийся может стыбзить SSH-ключи.
          - Поэтому давать подключаться надо только тем кому доверяешь.

      • Опции

        ▪ --disable-static-ip | не создавать mini-ВМ, использовать SOCKS proxy address
        ▪ --static-ip IP      | указать конкретный IP из диапазона 172.16.0.0/16
        ▪ --ssh               | подключить к расшаренной ВМ через ssh

    // destroy //
    //---------//
    // - Остановить и тотально удалить виртуальную машину.
    // - Удаляет все связанные с этой ВМ ресурсы.
    // - Все данные на ВМ будут потеряны.

      • Опции

        ▪ -f   --force   | не спрашивать подтверждения перед удалением

      • Сам бокс не удаляется
        - Его надо удалять вручную командой vagrant box remove.

    // global-status //
    //---------------//
    // - Вывести статус всех активных сред на системе для текущего пользователя.
    // - Все данные будут базироваться на кэше, но не на реальном состоянии.

      • Можно увидеть ID машин
        - ID типа a1b2c3.
        - Эти ID можно использовать для управления ВМ.
        - Такими командами, как: up, halt, destroy.

      • Опции

        ▪ --prune   | удаляет неверные записи из списка

    // halt //
    //------//
    // - Аккуратно останавливает работающую ВМ.

      • Опции

        ▪ -f  --force   | если мягко выключить не выйдет, сделать poweroff

    // init //
    //------//
    // - Создать в текущем каталоге шаблонный Vagrantfile.

      • Формат

          vagrant init [box-name] [box-url]

      • Пояснения к параметрам формата

        ▪ [box-name]  | значение для config.vm.box в Vagrantfile
        ▪ [box-url]   | значение для config.vm.box_url в Vagrantfile

      • Опции

        ▪ --force         | перезаписать любой существующий Vagrantfile в текущем каталоге
        ▪ --minimal       | не наполнять Vagrantfile комментами и примерами
        ▪ --output FILE   | указать другое имя для Vagrantfile

    // login //
    //-------//
    // - Аутентифицироваться на сервере HashiCorp's Atlas.

      • Сначала надо зарегистрироваться
        - Сначала надо зайти к ним на сайт и там зарегистрироваться
        - По адресу: https://atlas.hashicorp.com/account/new
        - И только потом можно будет аутентифицироваться.

      • Опции

        ▪ --check   | проверить, аутентифицирован ты или нет
        ▪ --logout  | сделать logout
        ▪ --token   | вручную назначить токен для Atlas login

    // package //
    //---------//
    // - Упаковать текущую работающую VirtualBox-среду в бокс.

      • Опции

        ▪ --base NAME         | упаковать машину под управлением VirtualBox с указанным UUID
        ▪ --output NAME       | имя бокса на выходе, по умолчанию: package.box.
        ▪ --include x,y,z     | дополнительные файлы для упаковки в бокс
        ▪ --vagrantfile FILE  | упаковать vagrantfile вместо с боксом

      • Примечение по vagrantfile
        - Он будет неявно применяться к основанным на боксе ВМ.
        - При vagrant up.

    // plugin //
    //--------//
    // - Управление плагинами (install, list, etc)

      • Список субкоманд

        ▪ install     | установить плагин
        ▪ license     | лицензия на плагин
        ▪ list        | список установленных плагинов
        ▪ uninstall   | удалить плагин
        ▪ update      | обновить плагин

      • install

        ▪ Формат

            vagrant plugin install <name>...

        ▪ Про <name>

          ▪ Имя
            - Если <name> это имя плагина, устанавливает из репчика.
            - Обычно, из RubyGems.
            - Если указано много имён, устанавливает много плагинов.

          ▪ Путь к файлу
            - Если <name> это сабж, устанавливает оттуда плагин.

        ▪ Если плагин уже установлен
          - Переустановит его последнюю версию.

        ▪ Опции

          ▪ --entry-point ENTRYPOINT  | указать entrypoint для плагина
          ▪ --plugin-clean-sources    | очистить все определённые ранее источники
          ▪ --plugin-source SOURCE    | добавить источник для извленчения плагина
          ▪ --plugin-version VERSION  | какой версии плагин установить (формат semver)

      • license

        ▪ Формат

            vagrant plugin license <name> <license-file>

      • list
        - Список установленных плагинов, информация о них.

      • uninstall

        ▪ Формат

            vagrant plugin uninstall <name> [<name2> <name3> ...]

        ▪ Что делает
          - Удаляет плагины с указанными именами.
          - Все зависимости плагинов (если не нужны) тоже удаляются.

      • update

        ▪ Формат

            vagrant plugin update [<name>]

        ▪ Что делает
          - Обновляет установленные в Vagrant плагины.
          - Если указано имя, то обновляется только этот плагин.
          - Если же он не установлен, команда не будет его устанавливать.

    // port //
    //------//
    // - Вывести список всех проброшенных на хост портов текущей ВМ.

      • Опции

        ▪ --guest PORT        | проверить проброску только для этого порта геста
        ▪ --machine-readable  | вывести в формате для применения в скрипте, а не для чтения человеком

    // powershell //
    //------------//
    // - Открыть powershell-соединение с ВМ, если она его поддерживает.

      • Опции

        ▪ -с COMMAND   --command COMMAND  | выполнить указанную команду на ВМ

    // provision //
    //-----------//
    // - Запустить инициализацию для текущей работающей ВМ.

      • Полезно для инкрементальной разработки bash-скриптов
        - Создаёшь файл-скрипт.
        - Добавляешь, как инициализатор в Vagrantfile.
        - Делаешь небольшое изменение в скрипте.
        - Выполняешь vagrant provision.
        - Смотришь, какой получается вывод.
        - Так и продолжаешь, пока не добьёшься успеха.

      • Опции

        ▪ --provision-with x,y,z  | запускать только указанные инициализаторы

    // rdp //
    //-----//
    // - Запустить RDP-клиент для удалённой desktop-сессии с гестом (только Windows).
    // - Работает только с Windows.

      • Пример

          vagrant rdp -- "screen mode id:i:0" "other config:s:value"

    // reload //
    //--------//
    // - Сделать vagrant halt, затем vagrant up.

      • Применение изменений в Vagrantfile
        - Часто reload применяется именно для этого.
        - При этом инициализаторы не будут запущены снова.
        - Для их запуска надо использовать опцию --provision.

      • Опции

        ▪ --provision             | выполнить при перезагрузке все инициализаторы
        ▪ --provision-with x,y,z  | выполнить при перезагрузке лишь указанные инициализаторы



    // resume //
    //--------//
    // - Разбудить ВМ из спящего (suspended) режима.

      • Пример

          docker suspend  | поместить текущую ВМ в спящий режим
          docker resume   | разбудить текущую ВМ из спящего режима

    // share //
    //-------//
    // - Запустить сессию Vagrant Share, расшарив ВМ для интернета.

      • 3-ри режима

        ▪ HTTP-sharing
          - Создаёт URL, который можно дать кому угодно.
          - Этот URL ведёт прямо на твою ВМ.
          - Любой (даже без Vagrant) может общаться с ВМ через этот URL.
          - Это позволяет показывать свою работу друзьям/коллегам/клиентам.
          - Для этого надо просто выполнить:

              vagrant share

        ▪ SSH sharing

          ▪ Общая информация
            - Позволяет подключиться к твоей ВМ из интернета через SSH.
            - Надо сначала расрашить свою ВМ с помощью vagrang share.
            - Затем дать UID своей ВМ на сервере Atlas желающему подключиться.
            - Он с помощью vagrant connect UID --ssh подключается.

          ▪ Как извлечь UID
            - Вася у себя на ноутбуке запустил ВМ и выполнил vagrant share.
            - И получил адрес типа: http://nervous-otter-6538.vagrantshare.com
            - Часть адреса "nervous-otter-6538" является UID расшаренной ВМ.
            - Петя у себя на ноутбуке запускает:

                vagrant connect nervous-otter-6538

            - В ответ получает IP для общения с Васиной машиной.

        ▪ General sharing
          - Позволяет любому подключиться через expsed-порты к ВМ.
          - Используя команду vagrant connect.

    // snapshot //
    //----------//
    // - Управление снэпшотами ВМ (push, pop, save, restore, list, delete).

      • Субкоманды

        ▪ push      | сделать снэпшот и добавить его в хранилище снэпшотов
        ▪ pop       | восстановить состояние ВМ из push'ed снэпшота
        ▪ save      | сохранить новый именованный снэпшот
        ▪ restore   | восстановить ВМ из именованного снэпшота
        ▪ list      | вывести список всех снятых снэпшотов
        ▪ delete    | удалить именованный снэпшот

      • push

        ▪ Аналог save, только без имени
          - Это алиас для vagrant snapshot save
          - Позволяет снять не именованный снэпшот.

            ! Не используй push/pop совместно с save/restore.

      • pop

        ▪ Восстановить ВМ из последнего не именованного снэпшота
          - Сабж.

            ! Не используй push/pop совместно с save/restore.

      • save

        ▪ Формат

            vagrant snapshot save NAME

        ▪ Снять именованный снэпшот
          - Указав NAME.
          - А если не указать, будет не именованный снэпшот (аналог save).

            ! Не используй push/pop совместно с save/restore.

      • restore

        ▪ Формат

            vagrant snapshot restore NAME

        ▪ Восстановиться из именованного снэпшота
          - Указав NAME.

      • list
        - Вывести список всех взятых снэпшотов.

      • delete

        ▪ Формат

            vagrant snapshot delete NAME

        ▪ Удалить именованный снепшот
          - Указав NAME.

    // ssh //
    //-----//
    // - Подключиться к текущей работающей ВМ по SSH.

      • Два -- в команде
        - В случае наличия, любые аргументы после передаются исполняемому файлу ssh.
        - Это позволяет передавать дополнительные команды.

      • Опции

        ▪ -c COMMAND   --command COMMAND  | выполняет 1-ну команду, выводит STDOUT и STDERR, и выходит
        ▪ -p           --plain            | подключается по SSH без автоаутентификации, оставляя это пользователю

      • Фоновый режим для COMMAND
        - Не прокатит, сеанс будет почти сразу завершён.
        - Т.К. этот демон будет наследником шелла.
        - А Vagrant завершит шелл после завершения COMMAND.
        - И наследник шелл тоже завершится.
        - Чтобы прокатило, надо сделать detach процесса от шелла.
        - Например, командой nohup.

    // ssh-config //
    //------------//
    // - Вывести информацию для организации SSH-подключения к текущей ВМ.
    // - Там IP, порт, адрес приватного ключа, и прочее.

      • Пример

          vagrant ssh-config

      • Опции

        ▪ --host NAME   | имя хоста для выводимой конфигурации

    // status //
    //--------//
    // - Получить статус машин под управлением Vagrant.

      • Примечание
        - Можно случайно забыть, какие ВМ работают, какие нет...
        - Эта команда поможет вспомнить.


    // suspend //
    //---------//
    // - Поместить текущую ВМ в спящий режим.

      • Пример

          docker suspend  | поместить текущую ВМ в спящий режим
          docker resume   | разбудить текущую ВМ из спящего режима

    // up //
    //----//
    // - Создать и настроить ВМ на основе Vagrantfile, или включить остановленную ВМ.

      • Опции

        ▪ --[no-]destroy-on-error | при первом vagrant up [не]уничтожить ВМ при критических ошибках, по умолчанию уничтожить
        ▪ --[no-]install-provider | пытаться ли установить отсутствующего провайдера, по умолчанию да
        ▪ --[no-]parallel         | разрешить запускать параллельно несколько машин, если провайдер позволяет
        ▪ --provider x            | использовать для запуска указанного провайдера, по умолчанию virtualbox
        ▪ --provision             | запустить все инициализаторы
        ▪ --provision-with x,y,z  | запустить лишь указанные инициализаторы

    // version //
    //---------//
    // - Вывести версию установленного Vagrant, и последнюю доступную версию

      • Пример

          vagrant version


А5. Работа с Vagrantfile

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Общая информация

      • Основные функции Vagrantfile
      • Размещение Vagrantfile на github
      • Vagrantfile использует синтаксис Ruby
      • Когда и где Vagrant ищет Vagrantfile
      • Порядок загрузки и объединение Vagrant-файлов

    # Версии конфигурации

      • Что такое версия конфигурации
      • На 2016-03-06 доступны версии 1 и 2
      • Зачем нужная версия конфигурации

    # Несколько трюков

      • Ограничить min версию Vagrant для Vagrantfile
      • Применить немного отличающиеся bash-инициаторы при много-машинном Vagrantfile
      • Перезаписать локаль хоста в SSH-сессии

    # Справочник по config.vm

      • Часто используемые
        - box                           | базовый образ (бокс)
        - box_url                       | url для поиска по нему базового образа (бокса)
        - box_version                   | какую версию бокса качать (semver)
        - communicator                  | способ подключения к гесту (по умолчанию ssh, но д.б. изменено на winrm для windows-гестов)
        - network                       | настраивает сеть на ВМ (проброс портов и прочее)
        - provision                     | настроить инициаторы
        - synced_folder                 | настроить общие папки
        - post_up_message               | какое сообщение показать после vagrant up

      • Прочие
        - boot_timeout                  | таймаут включения ВМ в сек., 300 по умолчанию
        - box_check_update              | сообщать пользователю в случае наличия обновления бокса при каждом vagrant up
        - box_download_checksum         | контрольная сумма бокса
        - box_download_checksum_type    | тип контрольной суммы бокса
        - box_download_client_cert      | путь к сертификату для использования при загрузке бокса
        - box_download_ca_cert          | путь к CA сертификату для использования при загрузке бокса
        - box_download_ca_path          | путь к каталогу с CA сертификатом для использования при загрузке бокса
        - box_download_insecure         | не верифицировать SSL-сертификаты с сервера
        - box_download_location_trusted | все http-редиректы будут расценены, как заслуживающие доверия
        - graceful_halt_timeout         | таймаут в сек.для мягкой остановки ВМ (60 сек. по умолчанию)
        - guest                         | название гостовой ОС (:linux по умолчанию), но вообще то оно автоматически определяется
        - hostname                      | имя хоста для геста, nil (отсутствует) по умолчанию
        - provider                      | провайдер-специфичные настройки
        - usable_port_range             | диапазон портов, которые Vagrant может использовать для разруливаний коллизий, и т.д.

    # Справочник по config.ssh

      • Часто используемые

        - username                      | username по умолчанию для SSH ("vagrant" по умолчанию)
        - password                      | password по умолчанию для SSH (лучше использовать key-based auth)
        - host                          | host/ip по умолчанию для SSH (по умолчанию пусто)
        - port                          | port по умолчанию для SSH (по умолчанию 22)
        - insert_key                    | (==true) если true, vagrant автоматом создаст пару ключей для SSH-соединений, заменив небезопасный ключ внутри ВМ
        - private_key_path              | путь к private key для SSH, по умолчанию путь к созданному автоматом ключу от ВМ

      • Прочие

        - guest_port                    | port на гесте, некоторые шерстят проброшенные порты с геста на хост, чтобы найти нужный
        - forward_agent                 | (==false) если true, agent forwarding over SSH connections is enabled
        - forward_x11                   | (==false) если true, X11 forwarding over SSH connections is enabled
        - forward_env                   | массив переменных среды хоста для передачи гесту, пример: config.ssh.forward_env = ["CUSTOM_VAR"]
        - proxy_command                 | проксирование ssh-соединения
        - pty                           | (==false) использовать pty для инициализации
        - shell                         | (bash -l) какой shell использовать для выполнения команд от Vagrant
        - sudo_command                  | (sudo -E -H %c) команда для применения при выполнении команды sudo

    # Справочник по config.vagrant

      - host                          | (:detect) тип хост-машины с Vagrant

    # Справочник по config.winrm [это для геста-windows, заполнить по запросу]

      - username                      |
      - password                      |
      - host                          |
      - port                          |
      - guest_port                    |
      - transport                     |
      - basic_auth_only               |
      - execution_time_limit          |

  --------------------------------------

  > Ссылки

    # Оф.раздел документации про Vagrantfile
        https://www.vagrantup.com/docs/vagrantfile/

    # Оф.раздел документации про общие папки
        https://www.vagrantup.com/docs/synced-folders/

    # Оф.раздел документации про сетевые аспекты
        https://www.vagrantup.com/docs/synced-folders/

    # Оф.раздел документации про provisioning
        https://www.vagrantup.com/docs/provisioning/

  > Введение
    - Это глава про работу с Vagrantfile.

  > Общая информация

    • Основные функции Vagrantfile

      ▪ Определить базовый бокс
      ▪ Определить инициализаторы
      ▪ Пробросить порты
      ▪ Назначить общие каталоги

    • Размещение Vagrantfile на github
      - Позволит другим разработчикам его использовать.
      - И поднять у себя точно такую же виртуальную машину.

    • Vagrantfile использует синтаксис Ruby
      - Однако знание Ruby совсем не обязательно для работы с ним.

    • Когда и где Vagrant ищет Vagrantfile

      ▪ Когда Vagrant ищет Vagrantfile
        - Vagrant ищет его при каждом использовании команды vagrant

      ▪ Где Vagrant ищет Vagrantfile
        - В текущем каталоге, и во всех каталогах выше, до корня дерева.
        - Это позволяет запускать vagrant из любого каталога твоего
          проекта, если Vagrantfile лежит в корне проекта.

    • Порядок загрузки и объединение Vagrant-файлов

      ▪ Объединение
        - Vagrant загружает не 1, а все найденные Vagrant-файлы.
        - Затем он их объединяет, получая 1 результирующий.
        - Данные из каждого последующего обладают бОльшим приоритетом.
        - Новые данные либо заменяют старые, либо сливаются с ними.

      ▪ Порядок поиска и загрузки Vagran-файлов

        1. Vagrantfile, упакованный вместо с боксом

        2. Vagrantfile в твоём домашнем каталоге
          - По умолчанию, в ~/.vagrant.d
          - Это позволяет определить кое-какие умолчательные значения.

        3. Vagrantfile из каталога проекта
          - Это тот vagrant-файл, который ты редактируешь чаще всего.

        4. Multi-machine overrides

        5. Provider-specific overrides

  > Версии конфигурации

    • Что такое версия конфигурации
      - При vagrant init созданный сегодя файл содержит такой блок:

          Vagrant.configure("2") do |config|
            # ...
          end

      - Цифра 2 в нём означает версию конфигурации.

    • На 2016-03-06 доступны версии 1 и 2
      - На сегодня доступны следующие версии конфигурации:

        ▪ 1
        ▪ 2

    • Зачем нужная версия конфигурации
      - Чтобы сохранять обратную совместимость Vargrant-файлов.
      - Можно в нём определить 2 блока:

          Vagrant.configure("1") do |config|
            # ...
          end

          Vagrant.configure("2") do |config|
            # ...
          end

      - В зависимости от версии Vagrant, будет применён только один.
      - Причём, у каждой версии есть свой набор валидных команд.

  > Несколько трюков

    • Ограничить min версию Vagrant для Vagrantfile
      - Чтобы этот Vagrantfile не работал с Vagrant версии меньше указанной.
      - Это можно сделать так:

          Vagrant.require_version ">= 1.3.5", "< 1.4.0"

    • Применить немного отличающиеся bash-инициаторы при много-машинном Vagrantfile
      - Есть Vagrantfile для запуска N машин.
      - И надо применить к ним, скажем, разные bash-скрипты.ъ
      - Принцип, как это сделать, такой:

          (1..3).each do |i|
            config.vm.define "node-#{i}" do |node|
              node.vm.provision "shell",
                inline: "echo hello from node #{i}"
            end
          end

    • Перезаписать локаль хоста в SSH-сессии
      - Обычно, локаль окружения хоста передаётся гесту.
      - Если гест её не поддерживает, могут быть проблемы.
      - Один из вариантов, перезаписать локаль в Vagrantfile:

          ENV["LC_ALL"] = "en_US.UTF-8"

          Vagrant.configure("2") do |config|
            # ...
          end

  > Справочник по config.vm
  > Справочник по config.ssh
  > Справочник по config.winrm
  > Справочник по config.vagrant
    - См.оглавление.


А6. Инициализатор Docker

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Принцип работы
    # Опции

      - build_image
      - pull_images
      - run

    # Сборка образа
    # Закачка образа
    # Старт контейнеров

  --------------------------------------

  > Ссылки

    # Оф.документ по инициализатору Docker
        https://www.vagrantup.com/docs/provisioning/docker.html

  > Введение
    - В Vagrant есть специальный тип инициализаторов Docker.
    - Он может:

      • Установить Docker
      • Скачать docker-образы
      • Запускать docker-контейнере при vagrant up

    - Этот инициализатор м.б. использован одновременно с другими.

  > Принцип работы
    - У инициализатора docker есть ряд опций.
    - Все они являются не обязательными.
    - Укажешь опции, или нет, инициализатор всё равно установит docker.
    - Но только в том случае, если он ещё не установлен.

  > Опции

    # build_image
      - Собрать образ из DockerFile.

    # pull_images
      - Скачать docker-образ.
      - Это не запустит контейнер, а лишь скачает образ.

    # run
      - Запустить контейнер.
      - Это можно указать лишь раз.

  > Сборка образа

    • Пример

        config.vm.provision "docker" do |d|
          d.build_image "/vagrant/app"
        end

    • Пояснения
      - Аргумент "/vagrant/app" это путь к контексту сборки.

  > Закачка образа

    • Пример №1

        config.vm.provision "docker",
          images: ["ubuntu"]

    • Пример №2

        config.vm.provision "docker" do |d|
          d.pull_images "ubuntu"
          d.pull_images "vagrant"
        end

  > Старт контейнеров

    • Производится при каждом vagrant up
      - Сабж.

    • Пример №1

        config.vm.provision "docker" do |d|
          d.run "rabbitmq"
        end

    • Пример №2

        config.vm.provision "docker" do |d|
          d.run "ubuntu",
            cmd: "bash -l",
            args: "-v '/vagrant:/var/www'"
        end

    • Пример №3
      - Запуск 2-х одинаковых контейнеров с разными именами.

        config.vm.provision "docker" do |d|
          d.run "db-1", image: "user/mysql"
          d.run "db-2", image: "user/mysql"
        end

    • Опции

      ▪ image             | образ (идёт 1-ым аргументом, но м.б. передан как параметр
      ▪ cmd               | команда для запуска в контейнере, перезаписывает CMD в DockerFile
      ▪ args              | доп.аргменты (raw) для docker run
      ▪ auto_assign_name  | если true (по умолчанию), имя идёт 1-ым аргументом run
      ▪ daemonize         | если true, применяется флаг -d
      ▪ restart           | политика рестарта для контейнера, по умолчанию "always".


Б1. Организация NFS на windows с помощью vagrant-плагина

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение
  # Пошаговая инструкция

--------------------------------------

> Ссылки

  # Официальный репозиторий плагина vagrant-winnfsd
      https://github.com/winnfsd/vagrant-winnfsd

> Введение
  - По умолчанию vagrant не поддерживает на Windows передачу данных через NFS.
  - А поскольку это так, то все IO-операции работают чрезвычайно медленно.
  - Описанный плагин призван исправить положение.

> Пошаговая инструкция

  1. Перейди в терминале в каталог с боксом vagrant
    - Это там, где лежит файл Vagrantfile.

  2. Установи плагин
    - Для этого выполни:

        vagrant plugin install vagrant-winnfsd

  3. Внеси правки в Vagrantfile

    ▪ В строках настроек общих папок укажи тип "NFS"
      - Пример:

          config.vm.synced_folder "C:/WebDev", "/c/WebDev", type: "nfs"

    ▪ Организуй специальную сеть для NFS
      - Вот так:

          config.vm.network "private_network", type: "dhcp"

  4. Обновлять плагин можно так:

      vagrant plugin update vagrant-winnfsd
