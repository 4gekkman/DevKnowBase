////==================================================////
////                                                  ////
////                      Docker                      ////
////                                                  ////
////==================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  // Официальные ресурсы //
  //---------------------//

    # Официальный сайт Docker
        https://www.docker.com/

    # Оф.панель управления и хаб Docker
        https://hub.docker.com/

    # Серия оф.вводных видео-тренингов по Docker
        https://training.docker.com/self-paced-training

    # Официальная документация Docker
        https://docs.docker.com/

  // Видео //
  //-------//

    # Плейлист от LearnCode по базовым принципам Docker
        https://www.youtube.com/playlist?list=PLoYCgNOIyGAAzevEST2qm2Xbe3aeLFvLc

  // Текст //
  //-------//

    # 350+ полезных статей про Docker
        https://habrahabr.ru/company/1cloud/blog/275015/

    # Docker for PHP Developers
    # - Efficient Nginx, PHP, and MySQL development environments with Docker
    # - Подробнейшая, потрясающая статья про Docker from JOSH LOCKHART
        http://www.newmediacampaigns.com/blog/docker-for-php-developers

    # Laravel 5 with dockerized Gulp, PHP-FPM, MySQL and nginx
    # Краткий how-to
        http://harshjv.github.io/blog/laravel-5-with-dockerized-gulp-php-fpm-mysql-and-nginx/


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Docker

    А1. Архитектура Docker

  # Б.  Рецепты и наработки

    Б1. ...







////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Архитектура Docker

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Что такое Docker

      - Вводная информация
      - Изолированные контейнеры

    # Как можно использовать Docker

      - Быстрая разработка приложений
      - Лёгкое разворачивание и масштабирование
      - Более эффективное использование серверного железа

    # Главные компоненты Docker
    # Клиент-серверная архитектура Docker

      - Клиент-серверная
      - Иллюстрация
      - Подробнее о сервере и клиенте

    # Образы, контейнеры, репозиторий

      - Docker-образы
      - Docker-контейнеры
      - Docker-репозиторий

    # Как работает Docker

      - Вводная информация
      - Как работают Docker-образы, ФС union

        - Слои: вводная информация
        - Слои: причина быстрой работы Docker
        - Каждый Docker-образ наследует от некого базового образа
        - Инструкции для создания образов, DockerFile

      - Как работает Docker-репозиторий
      - Как работают Docker-контейнеры
      - Что происходит при run контейнера

  --------------------------------------

  > Ссылки

    # Оф.статья "Understand the architecture"
        https://docs.docker.com/engine/understanding-docker/

  > Введение
    - В этой главе описана архитектура Docker.
    - Её прочтение должно сформировать чёткое представление об оной.

  > Что такое Docker

    # Вводная информация
      - Открытая платформа для разработки, доставки и запуска приложений.
      - Он позволяет отделить приложение от инфраструктуры.
      - И рассматривать последнюю, как управляемое отдельное приложение.
      - Docker сокращает цикл между написанием/использованием кода,
        и позволяет быстрее:

          # Разрабатывать
          # Тестировать
          # Разворачивать

      - Что позволяет Docker'у обеспечивать подобные преимущества:

          # Использование технологий контейнеризации ядра Linux
          # Наличие инструментов ускорения рабочего процесса, позволяющих
            удобно и быстро управлять приложением, и разворачивать его

    # Изолированные контейнеры
      - Docker позволяет запускать почти любое приложение в контейнере.
      - При этом приложение надёжно изолировано от других контейнеров.
      - Изоляция и безопасность позволяют запускать N контейнеров на 1 хосте.
      - Контейнеры же очень легковесны, ведь они не отягощены гипервизорами.
      - Легковесность контейнеров позволяют получать больше от серверного железа.
      - Примеры того, для чего можно использовать контейнеры:

          # Размещать в них приложения/компоненты
          # Передавать контейнеры членам команды для дальнейшей разработки/тестирования
          # Разворачивать приложения на продакшн-серверах: в датацентрах/облаках

  > Как можно использовать Docker

    # Быстрая разработка приложений
      - Docker является отличным инструментом для улучшения процесса разработки.
      - Команда разработчиков может собрать среду приложения локально из контейнеров.
      - Все члены команды при этом используют на 100% гарантированно идентичную среду.
      - Когда придёт время развернуть приложение, можно использовать эту же самую среду.

    # Лёгкое разворачивание и масштабирование
      - Docker-контейнеры по природе своей очень портативны.
      - Их можно запускать на localhost/в дата-центре/в облаке/на виртуалке/и т.д.
      - Портативность и легковесность контейнеров позволяют легко балансировать нагрузку.
      - С учётом всего этого, скорость работы Docker м.б. близка к realtime.

    # Более эффективное использование серверного железа
      - Docker является более эффективной альтернативой виртуальным машинам.
      - Имея в виду, что Docker потребляет намного меньше ресурсов.
      - Особенно ярко это проявляется при применении на забитом до отказа сервере.

  > Главные компоненты Docker
    - Docker состоит из 2-ух главных компонентов:

      # Docker
        - Платформа для контейнеризации с открытым исходным кодом.

      # Docker Hub
        - Software-as-a-Service платформа.
        - Она позволяет хранить и управлять Docker-контейнерами.
        - Это как GitHub, но только для Docker-образов.

  > Клиент-серверная архитектура Docker

    # Клиент-серверная
      - В Docker применяется клиент-серверная архитектура:

        # Docker-сервер
          - Это демон, который отвечает за управление Docker-контейнерами.
          - За их создание / работу / перемещение / ... .

        # Docker-клиент
          - Это CLI-приложение для взаимодействие с Docker-сервером.

      - Docker-сервер и Docker-клиент могут работать в 1-й системе.
      - А можно с помощью Docker-клиента управлять удалённым Docker-сервером.
      - Клиент и сервер взаимодействуют через сокеты посредством RESTful API.

    # Иллюстрация

                         |--------------|
                         | Client       | Клиент может находитсья на host-машине.
                         |              | А может вне её, на каком-нибудь другом компе.
                         | docker build | Клиент имеет CLI-API для управления сервером.
                         | docker pull  |
                         | docker run   |
                         |--------------|
                                |
                                |
       |------------------------|----------------|      |---------------------------|
       | DOCKER_HOST            |                |      |  Docker Hub (репозиторий) |
       |                       \|/               |      |                           |
       |    |------------------------------|     |      |      |------------|       |
       |    |         Docker daemon        |----------------   |   Images   |       |
       |    |------------------------------|     |      |  |   |------------|       |
       |                                         |      |  |                        |
       |                                         |      |  |      |------|          |
       |                                         |      |  |      | img1 |          |
       |    |------------|    |------------|     |      |  |      |------|          |
       |    | Containers |    |   Images   |     |      |  |---                     |
       |    |------------|    |------------|     |      |      \->|------|          |
       |                                         |      |         | img2 |          |
       |      |--------|         |------|      -------------------|------|          |
       |      |--------|         | img1 |     /  |      |                           |
       |                         |------|    /   |      |---------------------------|
       |      |--------|                    |    |
       |      |--------|         |------|<--|    |        Это SAAS от создателей Docker.
       |                         | img2 |        |        Репозитогий готовых образов для него.
       |      |--------|         |------|        |        Это как GitHub, но только для Docker-образов.
       |      |--------|                         |        Сервер их может отсюда подтягивать.
       |                                         |        А может их сюда и загружать.
       |-----------------------------------------|

         Это host-машина, где запускается Docker-сервер.
         Хост-машиной всегда должен быть именно Linux.


    # Подробнее о сервере и клиенте

      ## Docker-сервер (демон)
        - Docker-сервер запускается на host-машине.
        - Пользователь напрямую не взаимодействует с ним прямо.
        - А взаимодействует чере CLI Docker-клиента.

      ## Docker-клиент
        - Представляет из себя CLI-приложение.
        - Это основной интерфейс для взаимодействия с Docker-сервером.

  > Образы, контейнеры, репозиторий

    # Docker-образы
      - Представляют из себя read-only шаблоны.
      - Например, образ может содержать Ubuntu + Nginx.
      - Образы используются для создания контейнеров.
      - Можно применить метафору: образ - класс, контейнер - объект.
      - Образы можно создавать / обновлять / скачивать с DH / заливать на DH.
      - Docker-образы представляют BUILD-компонент Docker'а.

    # Docker-контейнеры
      - Можно применить метафору: контейнер - каталог.
      - В каждом каталоге необходимые для работы приложения данные.
      - Чтобы приложение заработало, надо собрать вместе эти каталоги.
      - Каждый Docker-контейнер создаётся из Docker-образа.
      - Контейнеры могут быть: run / started / stopped / moved / deleted.
      - Docker-контейнеры представляют RUN-компонент Docker'а.

    # Docker-репозиторий
      - Docker-репозиторий называется Docker Hub.
      - В Docker-репозитории хранятся Docker-образы.
      - Как обычно, есть публичные и приватные репозитории (последние платные).
      - В нём уже существует огромное количество готовых к использованию образов.
      - Можно самому создавать образы, и размещать их в Docker Hub.
      - Docker-репозиторий представляет DISTRIBUTION-компонент Docker'а.

  > Как работает Docker

    # Вводная информация
      - Итак, что мы уже знаем о работе Docker:

        1. Вы можете собирать Docker-образы с вашими приложениями.
        2. Вы можете создавать Docker-контейнеры из Docker-образов,
           и запускать ваши приложения из первых.
        3. Вы можете заливать/скачивать Docker-образы на/с Docker Hub.

      - Рассмотрим работу всех этих компонентов по отдельности и вместе.

    # Как работают Docker-образы, ФС union

      ## Слои: вводная информация
        - Docker-образы представляют из себя read-only шаблоны.
        - Каждый образ состоит из набора слоёв.
        - Docker использует файловую систему union для комбинирования
          всех этих слоёв в единый образ.
        - ФС union умеет комбинировать файлы и каталоги из разных
          файловых систем, называемых ветками по её внутренней терминологии,
          таким образом, что накладываясь друг на друга они образуют
          единую работающую файловую систему.

      ## Слои: причина быстрой работы Docker
        - Одна из главных причин легковесности Docker, это слои.
        - Давайте представим, что вы решили изменить один Docker-образ,
          к примеру, заменить PHP v5.6 на PHP v7.0.
        - Для этого вам потребуется лишь обновить слой, добавляющий PHP в образ,
          но не потребуется полностью пересобирать весь образ, как было бы
          в том случае, если бы вы имеле дело с образом для виртуальной машины.

      ## Каждый Docker-образ наследует от некого базового образа
        - Примеры самых базовых образов: "ubuntu", "fedora".
        - В качестве базового образа может выступать ЛЮБОЙ образ.
        - Docker всегда берёт базовые образы с Docker Hub.

      ## Инструкции для создания образов, DockerFile
        - Представим, вы решили создать собственный образ на базе "ubuntu".
        - Процесс создания представляет процесс накладывания на него новых слоёв.
        - Каждый слой накладывается с помощью отдельной инструкции.
        - Инструкции могут выполнять действия типа:

          ### Запустить команду
          ### Добавить файл или каталог
          ### Создать переменную среды
          ### Указать список процессов к запуску при старте контейнеров из этого образа

        - Инструкции для создания образа описываются в DockerFile.
        - Он используется, когда вы приказываете клиенту создать новый образ.
        - Команда build берёт базовый образ, применяет к нему инструкции
          из DockerFile, и возвращает результирующий образ.

    # Как работает Docker-репозиторий
      - Docker-репозиторий называется Docker Hub, он хранит Docker-образы.
      - Название, по всей вероятности, придумали, вдохновляясь названием GitHub.
      - Любой свой образ вы можете залить/скачать на/с Docker Hub.
      - Используя CLI клиенты можно искать и качать образы с Docker Hub.
      - В Docker Hub есть публичные и приватные репозитории.
      - Последние платные, и исключены из публичного поиска.

    # Как работают Docker-контейнеры
      -

    # Что происходит при run контейнера
      -












