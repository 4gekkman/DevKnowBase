////==================================================////
////                                                  ////
////                       Bower                      ////
////                                                  ////
////==================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  // Официальные ресурсы //
  //---------------------//

    # Официальный сайт Bower
        http://bower.io/

  // Видео //
  //-------//

    # Обзор про Bower от Sorax
        https://www.youtube.com/watch?v=swUFx9p0M7g

    # Руководство по Bower от Loftblog
        https://www.youtube.com/playlist?list=PLY4rE9dstrJwqwHBF4KFMIo9U0HKIR3UP

  // Текст //
  //-------//

    # Статья про Bower из журнала Хакер
        http://nano.sapegin.ru/all/bower

    # Создание и поддержание собственного bower-пакета (en)
        http://bob.yexley.net/creating-and-maintaining-your-own-bower-package/


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Bower

    А1. Вводная информация
    А2. Установка Bower
    А3. Конфиг Bower-пакета bower.json
    А4. Настройка Bower
    А5. Замечания при программном выполнении bower
    А6. API
    А7. Разработка bower-пакетов


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Вводная информация

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # О пакетных менеджерах
    # Что такое Bower
    # Bower лишь устанавливает и отслеживает зависимости
    # Что могут содержать bower-пакеты
    # Отличие Bower от NPM

      - NPM
      - Bower
      - Недостатки NPM для фротенд, которые устраняет Bower

        1) Возможность наличия нескольких версий одного пакета
        2) Подключение одного и того же пакета из разных мест

    # Bower оптимизирован под frontend
    # Что делает Bower

  --------------------------------------

  > Ссылки

  > Введение
    - Это глава с общей информацией о Bower.

  > О пакетных менеджерах
    - Определение:

        Пакетный менеджер, это программный комплекс, позволяющий управлять
        процессами установки, удаления, настройки, обновления различных
        компонентов программного обеспечения.

    - Эти самые компоненты обычно называют пакетами.
    - В этих пакетах также обычно хранятся их метаданные, вроде
      имени пакета, его версии, описания, данных разработчика и т.д.
    - Эти пакеты хранятся на удалённых серверах в хранилищах-репозиториях.
    - Пакетные менеджеры сейчас распространены повсеместно:

        Frontend            Bower

        Android             Google Play
        iOS                 AppStore
        Windows Phone       Windows Phone Store

        Linux               Apt
        MAC                 MAC AppStore
        Windows             Windows Store

        PHP                 Composer
        Ruby                RubyGems / Bundler
        Python              pip
        Node.js             NPM

        Playstation         Playstation Store
        XBox                XBox Live
        PC Игры             Steam

        Sublime             Package Control
        Chrome              Chrome Web Store

  > Что такое Bower
    - Bower это пакетный менеджер для frontend-разработчиков.
    - Слово "Bower" переводится с английского, как "беседка".
    - Сайты состоят из множества вещей: фреймворки, библиотеки,
      ресурсы, утилиты и так далее.
    - С помощью Bower можно управлять всеми этими зависимостями.
    - Отслеживание, установка, обновление всех этих пакетов и их
      зависимостей, отслеживание нужных версий - делать всё это
      вручную было утомительно, поэтому и был создан bower.

  > Bower лишь устанавливает и отслеживает зависимости
    - Не следует путать bower с такими приложениями, как gulp / grunt.
    - Bower это пакетный менеджер, он не занимается такими вещами, как
      конкатенация, минификация, модификация и т.д.
    - Bower просто загружает правильные версии требуемых пакетов,
      и их зависимостей, в указанный каталог, и всё.

  > Что могут содержать bower-пакеты
    - HTML, CSS, JavaScript, шрифты, изображение, и так далее.

  > Отличие Bower от NPM

    # NPM
      - Это пакетный менеджер для NodeJS, серверного JS.
      - Дерево зависимостей: иерархическое.
      - Возможность наличия разных версий одного пакета: есть.
      - Пример:

          /project
            /node_modules
              /m1
                /node_modules
                  /m3
                    /node_modules
                    index.js
                index.js
            index.js

    # Bower
      - Это пакетный менеджер для frontend.
      - Дерево зависимостей: плоское.
      - Возможность наличия разных версий одного пакета: нет.
      - Пример:

          /project
            /bower_components
              /m1
              /m2
              /m3
              ...

    # Недостатки NPM для фротенд, которые устраняет Bower

      1) Возможность наличия нескольких версий одного пакета
        - Если подключить jQuery разных версий к html-документу, будут ошибки.
        - NPM допускает наличие в дереве зависимостей разных версий пакета.
        - Одно это автоматически приводит к невозможности использования NPM для фронтенд.
        - В Bower данный недостаток устранён.
        - Вслучае конфликта зависимостей, Bower просто не станет
          устанавливать не совместимый с уже установленными пакет.

      2) Подключение одного и того же пакета из разных мест
        - Это следствие иерархической структуры дерева зависимостей NPM.
        - Клиенту придётся загружать N раз ресурсы из одного и того же пакета.
        - Даже при том, что это будет один и тот же пакет, одной и той же версии.
        - Из-за этого возрастает нагрузка на сервер, замедляется работа сайта.
        - В Bower данный недостаток устранён.

  > Bower оптимизирован под frontend
    - Допустим, многие пакеты зависят от пакета "jQuery".
    - В этом случае Bower скачает пакет "jQuery" лишь 1 раз.
    - Эта особенность известна, как "плоское дерево зависимостей".
    - И она помогает уменьшить время загрузки страницы, снизить нагрузку на сервер.

  > Что делает Bower
    - Он находит, скачивает и сохраняет требуемые пакеты и их зависимости.
    - Он отслеживает пакеты и их зависимости, указанные файле-манифесте
      "bower.json".
    - То, как вы используете эти пакеты, полностью лежит на вас.
      Bower не имеет к этому никакого отношения. Его работа - найти,
      скачать пакеты и их зависимости. Всё.
    - Bower обеспечивает механизм хуков для того, чтобы вам было
      удобно встроить его в свой workflow.


А2. Установка Bower

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Установка Bower

  --------------------------------------

  > Ссылки

    # Откуда скачать NodeJS + NPM
        https://nodejs.org/en/

  > Введение
    - Bower по своей сути является NodeJS-приложением с CLI.
    - Поэтому он устанавливается через NPM глобально.

  > Установка Bower
    - Перед установкой Bower, надо установить NodeJS + NPM.
    - Затем, установить Bower через NPM глобально:

        npm install -g bower


А3. Конфиг Bower-пакета bower.json

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Справочник

      - name              | Имя пакета
      - description       | Описание пакета
      - main              | Массив точек подключения, по 1-й для каждого типа ресурса
      - dependencies      | Список пакетов-зависимостей данного пакета
      - devDependencies   | Список пакетов-зависимостей данного пакета, необходимых лишь в процессе разработки
      - moduleType        | Тип модуля в JS-точке подключения из "main"
      - keywords          | Используются при поиске пакета по ключевым словам
      - authors           | Данные автора или авторов пакета
      - license           | Лицензия
      - ignore            | Список файлов пакета, которые не устанавливаются при install
      - private           | Запретить к публикации
      - homepage          | URL сайта пакета (по умолчанию, github-репозиторий пакета)
      - repository        | Репозиторий, где искать пакет
      - resolutions       | В случае конфликта устанавливать эти версии пакетов

  --------------------------------------

  > Ссылки

    # Оф.документация по bower.json
        https://github.com/bower/spec/blob/master/json.md

  > Введение
    - Файл bower.json используется, как конфиг bower-пакета.
    - По аналогии с package.json в NPM или composer.json в Composer.
    - Он содержит json с рядом св-в, позволяющих всё настроить, см.их ниже.
    - Обязательным является лишь одно поле: "name".

  > Справочник

    # name
      - Имя пакета.
      - Единственное обязательное поле.
      - Должно отвечать этим требованиям:

        - Уникальность
        - Формат в slug style: "one-two-three"
        - В нижнем регистре: ^[a-z0-9]+[-a-z0-9.]*$
        - Два - или . подряд запрещены
        - <= 50 символов

    # description
      - Описание пакета.
      - Может состоять из любых символов.
      - Должно быть <= 140 символов.
      - По описанию пакета в т.ч. осуществляется его поиск.
      - Описание отображается в результатах поиска пакетов в CLI bower.

    # main

      ## Главное
        - Массив точек подключения, по 1-й для каждого типа ресурса.
        - Представь, ты подключил к проекту такой пакет:

            /package
              /js
                motion.js
                run.js
                walk.js
              /sass
                motion.scss
                run.scss
                walk.scss
              /img
                motion.png
                walk.png
                run.png
              /fonts
                icons.woff2
                icons.woff
              /dist
                movement.js
                movement.min.js
                movement.css
                movement.min.css

        - И у тебя есть некий сборщик, авто-ки подключающий ресурсы.
        - Откуда этот сборщик может узнать, какие ресурсы из пакета подключать?
        - Ведь там куча файлов, а подключать надо лишь несколько из них. Но какие?
        - Ответ лежит в массиве в поле "main" в bower.json пакета.
        - Там указаны пути к этим файлам относительно корня пакета:

            "main": [
              "js/motion.js",
              "sass/motion.scss",
            ]

      ## 1-ин тип - 1-на точка подключения
        - В примере выше, пакет содержит файлы нескольких разных типов.
        - Но для каждого из типов точка подключения может быть лишь одна.
        - И не факт, что для каждого из типов, она будет присутствовать.

      ## Уметь работать с точками подключения любых типов
        - В репозитории bower множества пакетов, которые делали разные люди.
        - А у разработчика д.б. средство автоподключения пакетов к проекту.
        - Оно должно смотреть в "main" каждого пакета точки подключения.
        - По расширению файла определять тип подключаемого ресурса: js / scss / ...
        - И, в зависимости от него, подключать данный ресурс к проекту.

      ## Наиболее распространённые типы точек подключения
        - Есть 2 наиболее распространённых типа точек подключения.
        - Это, конечно же, js и css.

      ## Прочие замечания

        1) Исходники, а не готовые к продакшн файлы
          - В качестве точки подключения используйте лучше исходники.
          - Вместо готовых к продакшн файлов.

        2) Не используйте минифицированные файлы
          - Не используйти min-файлы в качестве точек подключения.

        3) Не используйте ассеты в качестве точек подключения
          - Типа изображений, шрифтов, аудио, видео и прочих.

        4) Не используйте версии в именах файлов - точек подключения
          - Плохо:    "package.1.1.0.js"
          - Хорошо:   "package.js"

        5) Не используйте wildcards в path к точкам подключения в main
          - Записи типа "js/*.js" запрещены.
          - Это должны быть конкретные пути к конкретным файлам.

    # dependencies

      ## Описание
        - Список пакетов-зависимостей данного пакета.

      ## Пример dependencies

          "dependencies": {
            "get-size": "~1.2.2",
            "eventEmitter": "~4.2.11"
          }

      ## Общие требования к dependencies:

        - Ключ должен соответствовать тем же правилам, что и "name".
        - Значение д.б. в формате semver, или Git URL, или URL на tarball/zipball
        - К Git URL, в конце, через # можно прибавить: tag/branch/revision SHA.
        - Значение может быть сокращением в стиле github: [вендор]/[пакет]
        - Локальные пути (кроме как для локальной разработки) в значении запрещены.

    # devDependencies
      - Список пакетов-зависимостей данного пакета, необходимых лишь в процессе разработки.
      - Они не устанавливаются конечному пользователю пакета.

    # moduleType
      - Тип модуля в JS-точке подключения из "main".
      - Может быть строкой, или массиом строк, из доступных значений:

          globals | Просто добавляется в глобальное пр.имён, через window.namespace или this.namespace
          amd     | AMD-модуль (типа RequireJS), подключается через define()
          node    | NodeJS-модуль или CommonJS-модуль, подключается через module.exports
          es6     | ES6-модуль, подключается через export/import
          yui     | YUI модуль, подключается через YUI.add()

    # keywords
      - Используются при поиске пакета по ключевым словам.
      - Может содержать строку или массив строк.
      - Требования к значениям такие же, как для "name".

    # authors
      - Данные автора или авторов пакета.
      - Может быть массивом строк или объектов.
      - Примеры:

          "authors": [
            "John Doe", "John Doe <john@doe.com>",
            "John Doe <john@doe.com> (http://johndoe.com)"
          ]

          "authors": [
            { "name": "John Doe" },
            { "name": "John Doe", "email": "john@doe.com" },
            { "name": "John Doe", "email": "john@doe.com", "homepage": "http://johndoe.com" }
          ]

    # license
      - Лицензия.
      - Может быть строкой, или массиом строк.
      - Которые могут содержать:

          SPDX license identifier: см. https://spdx.org/licenses/
          path/url к тексту с лицензией

    # ignore
      - Список файлов пакета, которые не устанавливаются при install.
      - Может быть строкой или массивом строк.
      - Примечания:

        1) Символьные ссылки всегда игнорируются.
        2) Файл bower.json никогда невозможно игнорировать.

      - Синтаксис ignore полностью соответствует таковому в .gitignore
        См.подробнее: http://git-scm.com/docs/gitignore

    # private
      - Запретить к публикации.
      - Если поставить true, это поможет избежать случайной публикации.

    # homepage
      - URL сайта пакета (по умолчанию, github-репозиторий пакета).
      - Если не указать, то по умолчанию там будет ссылка на
        github-репозиторий пакета.

    # repository
      - Репозиторий, где искать пакет.
      - По умолчанию, bower смотрит свою базу данных.
      - Ищет там по имени пакета путь к github-репозиторию пакета.
      - И качает пакет по найденному адресу.
      - Но можно и вручную указать этот путь в bower.json пакета.
      - Чаще всего это нужно, когда делаешь форк какого-нибудь пакета.
      - И в нём что-то меняешь, и хочешь им подменить оригинал, чтобы потестить.
      - Пример:

          "repository": {
            "type": "git",
            "url": "git://github.com/foo/bar.git"
          }

    # resolutions
      - В случае конфликта устанавливать эти версии пакетов.
      - Это поле содержит объект, где ключ - имя пакета, значение - версия.
      - Теперь представь, ты выполнил bower install.
      - Bower обнаружил, что пакеты А и Б зависят от разных версий пакета angular.
      - В этом случае, он в терминале спросит: "Какую версию устанавливать?".
      - Потому что по правилам bower, м.б. лишь одна версия одного пакета.
      - Но если в resolutions указано что-то типа:

          "resolutions": {
            "angular": "1.3.0-beta.16"
          }

      - То bower не будет спрашивать, а автоматом установит версию "1.3.0-beta.16".


А4. Настройка Bower

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Процесс получения итоговой конфигурации

      - CLI-аргументы типа --config
      - Переменные среды
      - Локальный файл .bowerrc из текущего каталога
      - Все файлы .bowerrc в каталогах выше по дереву
      - Файл .bowerrc в домашнем каталоге ~
      - Файл .bowerrc в корневом каталоге ФС /

    # Список параметров конфигурации Bower

      parameter               default           description
      -------------------------------------------------------------------------------------------------------------------------------------
      - analytics           | true              | Анонимный сбор статистики bower
      - cwd                 | .                 | Корневой каталог для запуска bower
      - directory           | bower_components  | Каталог, куда устанавливать bower-пакеты
      - registry            | Оф.репо.bower     | Какой репозиторий использовать по умолчанию
      - shothand-resolver   | [вендор]/[пакет]  | Кастомный шаблон для формирования URL к пакету
      - proxy               | ""                | Proxy для http-запросов
      - https-proxy         | ""                | Proxy для https-запросов
      - ca                  | null              | SSL-сертификаты для подключения к репозиторию
      - color               | true              | Вкл / Выкл цвета в CLI bower
      - timeout             | 60000             | Таймаут для запросов в ms
      - storage             | ~/.bower/...      | Где хранить постоянные данные, нужные для работы bower
      - interactive         | null              | Вкл / Выкл интерактивность bower
      - resolvers           | []                | Список подключаемых сторонних резолверов
      - shallowCloneHosts   | []                | Список хостов, для которых делать shallow clone
      - scripts             |                   | Список хуков
      - ignoredDependencies | []                | Bower будет игнорировать указанные зависимости
      - user-agent          | см.описание       | Устанавливает user-agent для каждого запроса
      - strict-ssl          | false             | Производить ли SSL-валидацию при запросах через https
      - tmp                 | ~/.bower/tmp      | Где хранить временные файлы bower

  --------------------------------------

  > Ссылки

    # Оф.документация по настройке bower
        https://github.com/bower/spec/blob/master/config.md

    # Короткий вводный вариант
        http://bower.io/docs/config/

  > Введение
    - Это глава про конфигурирование самого Bower.
    - Не путать с конфигурированием пакетов в bower.json.

  > Процесс получения итоговой конфигурации
    - Итоговая конфигурация собирается следующим образом.
    - Берётся некая захардкоженная стандартная конфигурация bower.
    - Берётся её копия (объект), и с него начинает формироваться итоговая конфигурация.
    - Затем последовательно в цикле читаются конфиги из мест,
      о которых речь ниже, и в случае наличия в этих конфигов
      валидных полей с параметрами конфигурации, эти поля перезаписываются
      в "текущей итоговой конфигурации".
    - В конце концов, после опроса всех этих файлов, мы получаем
      итоговую конфигурацию.
    - Откуда черпаются данные о конфигурации, в порядке убывания приоритета:

        # CLI-аргументы типа --config
        # Переменные среды
        # Локальный файл .bowerrc из текущего каталога
        # Все файлы .bowerrc в каталогах выше по дереву
        # Файл .bowerrc в домашнем каталоге ~
        # Файл .bowerrc в корневом каталоге ФС /

  > Список параметров конфигурации Bower

    # analytics [true]
      - Анонимный сбор статистики bower.
      - True / False значение.

    # cwd ["."]
      - Корневой каталог для запуска bower, строка.
      - По умолчанию, это текущий каталог, откуда bower запускается.
      - Все относительные пути будут рассчитываться относительно него.
      - Никогда не следует указывать это поле в .bowerrc.
      - Максимум в CLI-аргументе, или при программном вызове в аргументе функции.
      - Иначе можно сломать логику работы некоторых инструментов.

    # directory ["bower_components"]
      - Каталог, куда устанавливать bower-пакеты, строка.
      - По умолчанию, в "bower_components" относительно cwd.

    # registry ["https://bower.herokuapp.com"]

      ## Примеры

        "registry": "https://bower.herokuapp.com"

        "registry": {
          "search": [
            "http://localhost:8000",
            "https://bower.herokuapp.com"
          ],
          "register": "http://localhost:8000",
          "publish": "http://localhost:8000"
        }

      ## Общая информация
        - Какой репозиторий использовать по умолчанию.
        - По умолчанию стоит оф.репозиторий bower:
            "https://bower.herokuapp.com".

      ## Search
        - Массив строк-репозиториев, где искать пакеты при установке.

      ## Register
        - Строка с URL, где регистрировать пакеты.

      ## Publish
        - Строка с URL, куда публиковать пакеты.

    # shothand-resolver ["git://github.com/{{owner}}/{{package}}.git"]

      ## Описание
        - Кастомный шаблон для формирования URL к пакету.

      ## Как работает шаблон по умолчанию
        - Шаблон по умолчанию выглядит так:

            "git://github.com/{{owner}}/{{package}}.git"

        - В dependencies по умолчанию можно в качестве ключа
          указывать записи типа "4gekkman/M1" (как в composer).
        - Bower, в соотв. с шаблоном, преобразуюет эту запись
          в URL: "git://github.com/4gekkman/M1.git"

      ## Примеры кастомных шаблонов

        "shorthand-resolver": "git://example.com/{{owner}}/components/{{package}}.git"
        "shorthand-resolver": "git://example.com/{{shorthand}}.git"

    # proxy [""]
      - Proxy для http-запросов.
      - Пример: "proxy": "http://<host>:<port>"

    # https-proxy [""]
      - Proxy для https-запросов.
      - Пример: "https-proxy": "http://<host>:<port>"

    # ca [null]
      - SSL-сертификаты для подключения к репозиторию.
      - Пример: "ca": "/etc/ssl/cert.pem"

    # color [true]
      - Вкл / Выкл цвета в CLI bower.

    # timeout [60000]
      - Таймаут для запросов в ms.
      - По умолчанию, 60 секунд.

    # storage ["~/.bower/..."]
      - Где хранить постоянные данные, нужные для работы bower.
      - Пример:

          "storage": {
            "packages" : "~/.bower/packages",
            "registry" : "~/.bower/registry",
            "links" : "~/.bower/links"
          }

    # interactive [null]
      - Вкл / Выкл интерактивность bower.
      - Возможны значения: true / false / null.
      - Если true, bower будет в терминале запрашивать у пользователя инфу.
      - Надо отключать при программном выполнении bower.

    # resolvers [[]]

      ## Общая информация
        - Список подключаемых сторонних резолверов.
        - Которые могут подменять собой стандартный резолвер bower.
        - Эти сторонние резолверя являются npm-пакетами, как и bower.
        - Они устанавливаются, как devDependency, или глобально.
        - Bower опрашивает их в порядке возникновения в resolvers.
        - Подробнее о них здесь: http://bower.io/docs/pluggable-resolvers/

      ## Что эти подключаемые резолверы позволяют делать
        - Работать с репозиториями mercurial / bazaar.
        - Ускорять работу с сервисами типа GitLab / Bitbucket.
        - Использовать пакеты из npm / component.io.
        - Проксировать скачивания через сторонние сервисы вроде Artifactory.
        - Реализовывать кастомные приватные репозитории.
        - Добавлять поддержку аутентификации для приватных репо GitHub Enterprice.

    # shallowCloneHosts
      - Список хостов, для которых делать shallow clone.
      - Это должен быть массив строк.
      - По умолчанию, bower не делает shallow clone.

    # scripts

      ## Пример

          "scripts": {
              "preinstall": "<your command here>",
              "postinstall": "<your command here>",
              "preuninstall": "<your command here>"
          }

      ## Доступные в bower хуки
        - Когда с любым bower-пакетом происходит одно из указанных
          ниже событий, bower будет выполнять указанную для этого
          события консольную команду.
        - Доступно всего 3 события:

            preinstall      | ПЕРЕД установкой пакета
            postinstall     | ПОСЛЕ установки пакета
            preuninstall    | ПЕРЕД удалением пакета

      ## Общее описание
        - Поле "scripts" может содержать список хуков.
        - Ключ должен быть одним из 3-х указанных выше.
        - Значением должна быть консольная команда.

      ## Для чего хуки предназначены и не предназначены

        ### Предназначены
          - Чтобы внешние инструменты могли учитывать изменения в составе bower-пакетов.
          - И проводить соответствующие изменения в родительском проекте.

        ### Не предназначены
          - Чтобы авторы пакетов могли проводить в них какие-то
            пост-установочные действия.

      ## Переменная среды BOWER_PID
        - Скрипт также будет включать переменную среды BOWER_PID.
        - Она будет содержать PID того bower-процесса, который скрипт запустил.
        - Это поможет удостовериться, что preinstall и postinstall запущены одним
          и тем же процессом bower.

    # ignoredDependencies
      - Bower будет игнорировать указанные зависимости.
      - Принимает массив имён соответствующих зависимостей.
      - Пример:

          "ignoredDependencies": [
            "jquery", "angular"
          ]

    # user-agent [node/<process.version> <process.platform> <process.arch>]
      - Устанавливает user-agent для каждого запроса.

    # strict-ssl [false]
      - Производить ли SSL-валидацию при запросах через https.

    # tmp ["~/.bower/tmp"]
      - Где хранить временные файлы bower.


А5. Замечания при программном выполнении bower

  --------------------------------------
  Подоглавление:

    # Введение
    # 2-ва способа работы с bower

      - Из CLI
      - Из программы

    # Советы

      - Отключить интерактивный режим
      - Указать корневой каталог для выполнения команды

  --------------------------------------

  > Введение
    - При работе с bower из программы, есть ряд особенностей.
    - Эта короткая глава содержит список советов по этому поводу.

  > 2-ва способа работы с bower

    # Из CLI
      - Когда человек открывает терминал.
      - И в нём выполняет какую-либо команду bower.

    # Из программы
      - Когда какая-нибудь программа выполняет консольную команду.
      - И в этой команде выполняет какую-нибудь команду bower.

  > Советы

    # Отключить интерактивный режим
      - Иногда bower может что-нибудь спрашивать у клиента.
      - Типа: "Можно ли мне отослать анонимную статистику".
      - Или: "Пакет какой конкретно версии из этих установить?".
      - При программном вызове, это будет значить зависание программы.
      - Поэтому, надо отключать интерактивный режим при программном вызове.
      - Удобнее всего это делать, передавая параметр в конфиг через флаг:

          --config.interactive=false

        # Когда интерактивный режим выключен
          - bower init не работает.
          - bower register и boser unregister не запрашивают подтверждений.
          - bower login не работает, если флаг --token указывается.
          - bower install падает в случае конфликтов, вместо того, чтобы спросить у пользователя
          - bower uninstall не спрашивает подтверждения для удаления зависимости
          - Аналитика отключена по умолчанию

    # Указать корневой каталог для выполнения команды
      - При ручном запуске, cwd ставится равным текущему каталогу.
      - А при программном, лучше всего указать его явно.
      - Удобнее всего это делать, передавая параметр в конфиг через флаг:

          --config.cwd=/a/b/c

    # Использовать -F (force) при выполнении bower update
      - По умолчанию, в не интерактивном режиме, при установке
        нового пакета, в случае возникновения конфгикта, вместо
        того, чтобы спросить пользователя, какой версии пакет
        устанавливать (как это было бы в интерактивном режиме),
        процесс завершается с ошибкой.
      - Чтобы заставить bower в случае конфликта при bower update
        просто устанавливать наиболее свежую версию, необходимо
        использовать параметр -F для bower update.

А6. API

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # CLI-API bower

      - cache       | Управление кэшем bower
      - help        | Показать справку по команде
      - home        | Открыть homepage пакета в браузере по умолчанию
      - info        | Показать общую информацию об указанном пакете.
      - init        | Создать bower.json в интерактивном режиме
      - install     | Рекурсивно установить зависимости проекта
      - link        | Функционал, помогающий при разработке пакетов для bower
      - list        | Выводит список локальных пакетов, их версий и возможных обновлений
      - login       | Аутентифицироваться на GitHub
      - lookup      | Ищет пакет по имени, возвращает его адрес
      - prune       | Удалить локальные посторонние пакеты
      - register    | Зарегистрировать пакет в репозитории по умолчанию
      - search      | Искать пакеты по ключевому слову
      - update      | Обновить все локальные пакеты и их зависимости до последних версий
      - uninstall   | Удалить пакет локально, из bower_components
      - unregister  | Снять пакет с регистрации из репозитория
      - version     | Бампнуть версию пакета

    # Опции команды bower

      --force       | -f  | Делает разные команды более пробивными
      --json        | -j  | Выводит валидный json
      --loglevel    | -l  | Указать, какой уровень логов использовать
      --offline     | -o  | Не использовать интернет-соединения
      --quiet       | -q  | Выводить только важную информацию (--loglevel=warn)
      --silent      | -s  | Выводить только супер важную информацию (--loglevel=error)
      --verbose     | -V  | Выводить MAX информации
      --allow-root  |     | Разрешить запускать команды от имени root

  --------------------------------------

  > Ссылки

    # Оф.справка по API Bower
        http://bower.io/docs/api/

  > Введение
    - В этой главе справочник по CLI-API bower.

  > CLI-API bower

    // cache //
    //-------//
    // - Управление кэшем bower.

      # Общий синтаксис
        - bower cache <command> [<args>]
        - Где command это либо clean, либо list.

      # cache clean
        - Очищает кэш от всех пакетов.
        - Синтаксис:

            bower cache clean
            bower cache clean <name> [<name> ...]
            bower cache clean <name>#<version> [<name>#<version> ..]

      # cache list
        - Показывает список закэшированных пакетов.
        - Синтаксис:

            bower cache list
            bower cache list <name> [<name> ...]

    // help //
    //------//
    // - Показать справку по команде.

      # Общий синтаксис
        - bower help <command>
        - Здесь command имя команда.

    // home //
    //------//
    // - Открыть homepage пакета в браузере по умолчанию.

      # Общий синтаксис
        - bower home
        - bower home <package>
        - bower home <package>#<version>

    // info //
    //------//
    // - Показать общую информацию об указанном пакете.

      # Общий синтаксис
        - bower info <package>
        - bower info <package> [<property>]
        - bower info <package>#<version> [<property>]

    // init //
    //------//
    // - Создать bower.json в интерактивном режиме.

      # Общий синтаксис
        - bower init

    // install //
    //---------//
    // - Рекурсивно установить зависимости проекта.

      # Общий синтаксис
        - bower install [<options>]
        - bower install <endpoint> [<endpoint> ..] [<options>]

      # Что понимается под зависимостями проекта
        - Массив dependencies из bower.json проекта.
        - Зависимости всех пакетов из bower.json пакетов в bower_components.
        - Дополнительные зависимости, переданные как <endpoint> в команде.

      # Флаг --save
        - С командой install можно использовать флаг --save.
        - Тогда указанные <endpoint> будут автоматически добавлены
          в dependencies в bower.json проекта.

      # Доступные форматы для <endpoint>
        - <package>                     | "jQuery"
        - <package>#<version>           | "jQuery#2.2.0"
        - <name>=<package>#<version>    | "MySuperPack=jQuery#2.2.0"

        ## Где
          - package:  URL пакета, path к пакету или его имя в репозитории
          - version:  Тег (версия), ветка или commit
          - name:     имя пакета, которое он будет иметь локально.

      # Примеры package

        ## Registered package name
          - jquery,
          - normalize.css

        ## Git endpoint
          - https://github.com/user/package.git
          - git@github.com:user/package.git

        ## Git endpoint without .git
          - git+https://github.com/user/package
          - git+ssh://git@github.com/user/package

        ## Local folder
          - my/local/folder/

        ## Public Subversion endpoint
          - svn+http://package.googlecode.com/svn/

        ## Private Subversion endpoint
          - svn+ssh://package.googlecode.com/svn/
          - svn+https://package.googlecode.com/svn/

        ## Shorthand (defaults to GitHub)
          - user/package

        ## URL
          - http://example.com/script.js
          - http://example.com/style.css
          - http://example.com/package.zip (contents will be extracted)
          - http://example.com/package.tar (contents will be extracted)

      # Примеры version

        ## semver version
          - #1.2.3

        ## version range
          - #1.2
          - #~1.2.3
          - #^1.2.3
          - #>=1.2.3 <2.0

        ## Git tag
          - #<tag>

        ## Git commit SHA
          - #<sha>

        ## Git branch
          - #<branch>

        ## Subversion revision
          - #<revision>

      # Опции команды install

        -F    --force-latest    | Установить свежую версию при конфликте
        -p    --production      | Не устанавливать devDependencies проекта
        -S    --save            | Автомат-ки добавить все <endpoint> в dependencies bower.json проекта
        -D    --save-dev        | Автомат-ки добавить все <endpoint> в devDependencies bower.json проекта
        -E    --save-exact      | Configure installed packages with an exact version rather than semver


    // link //
    //------//
    // - Функционал, помогающий при разработке пакетов для bower.

      # Ссылка на статью про link
          https://oncletom.io/2013/live-development-bower-component/

      # Общий синтаксис
        - bower link
        - bower link <name> [<local name>]

      # Суть
        - Представь, ты разрабатываешь пакет для bower.
        - У тебя где-то лежит каталог с этим пакетом.
        - И одновременно, ты хочешь отлаживать этот пакет.
        - Установив его в свой dev.app через bower.
        - Без link, чтобы увидеть изменения, сначала надо
          бампнуть пакет до следующей патч-версии, и
          обновить зависимости bower.
        - Вести таким образом разработку просто невозможно.
        - Поэтому в bower представили такой инструмент, как link.

      # Как работает

        1)  Идём в каталог с разрабатываемым пакетом, и выполняем
            там: bower link

        2)  Идём в каталог с нашим проектом, где лежит bower.json
            проекта, в котором в dependencies указан наш компонент.
            И выполняем: bower link [имя компонента из 1]

            В результате этой операции, в bower_components этого
            пакета будет создана символьная ссылка на пакет из 1.

        *   В принципе, всё это можно сделать руками.

        **  Но если сделать через link, то при следующем
            bower update для пакета из 2, ссылка будет
            автоматически удалена, в случае, если будет
            найдена и установлена новая версия пакета.

    // list //
    //------//
    // - Выводит список локальных пакетов, их версий и возможных обновлений.

      # Общий синтаксис
        - bower list [<options>]

      # Опции

        -p    --paths       | Генерирует вывод в формате json
        -r    --relative    | Make paths relative to the directory config property, which defaults to bower_components

    // login //
    //-------//
    // - Аутентифицироваться на GitHub.
    // - Нужно для установки пакетов прямо с github, а не из репозитория bower.
    // - Т.Е. когда в bower.json в repository указан github репозиторий для пакета.
    // - Bower сохраняет логин с паролем для аутентификации.

      # Общий синтаксис
        - bower login

    // lookup //
    //--------//
    // - Ищет пакет по имени, возвращает его адрес.

      # Общий синтаксис
          bower lookup <name>

    // prune //
    //-------//
    // - Удалить локальные посторонние пакеты.
    // - Которые есть в bower_components, но нет в bower.json.

      # Общий синтаксис
        - bower prune

    // register //
    //----------//
    // - Зарегистрировать пакет в репозитории по умолчанию.

      # Общий синтаксис
        - bower register <name> <url>


    // search //
    //--------//
    // - Искать пакеты по ключевому слову.

      # Общий синтаксис
        - bower search
        - bower search <name>

    // update //
    //--------//
    // - Обновить все локальные пакеты и их зависимости до последних версий.

      # Общий синтаксис
        - bower search
        - bower search <name>

      # Опции

        -F    --force-latest    | Установить свежую версию при конфликте
        -p    --production      | Не устанавливать devDependencies проекта
        -S    --save            | Автомат-ки добавить/удалить записи в dependencies bower.json проекта
        -D    --save-dev        | Автомат-ки добавить/удалить записи в devDependencies bower.json проекта

    // uninstall //
    //-----------//
    // - Удалить пакет локально, из bower_components.

      # Общий синтаксис
        - bower uninstall <name> [<name> ..] [<options>]

      # Опции

        -S    --save            | Автомат-ки удалить все <name> из dependencies bower.json проекта
        -D    --save-dev        | Автомат-ки удалить все <name> из devDependencies bower.json проекта

    // unregister //
    //------------//
    // - Снять пакет с регистрации из репозитория.

      # Общий синтаксис
        - bower unregister <package>.

    // version //
    //---------//
    // - Бампнуть версию пакета.

      # Общий синтаксис
        - bower version [<newversion> | major | minor | patch]
        - Варианты:

          bower version 3.2.1   | бампнуть до 3.2.1
          bower version path    | бампнуть на +0.0.1
          bower version minor   | бампнуть на +0.1.0
          bower version major   | бампнуть на +1.0.0

      # Как работает
        - Надо запустить эту команду в каталоге пакета.
        - В github-репозитории пакета будет создан новый релиз,
          имеющий соответствующую версию.

      # Опции

        -m    --message   | message для релиза на github

  > Опции команды bower

    // --force //
    //---------//
    // - Делает разные команды более пробивными.

      # bower install --force
        - Переустанавливает все установленные пакеты.
        - Устанавливает пакеты, даже если присутствуют
          одноимённые не-bower каталоги в bower_components.
        - Игнорирует наличие кэша, и перезаписывает его.

      # bower uninstall <package> --force
        - Удаляет пакет, даже в случае появления конфликта.

      # bower register <package> --force / bower unregister <package>
        - Не требует подтверждений.
        - Но login всё ещё требуется.


А7. Разработка bower-пакетов

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Дорожная карта

    # Про регистрацию пакета в репозитории bower
    # Про снятие с регистрации пакета в репозитории bower
    # Отсутствие системы учёта пользователей в репозитории bower
    # Бампинг пакета
    # Мгновенное применение изменений при разработке для отладки

  --------------------------------------

  > Ссылки

    # Оф.инструкция по разработке пакетов
        http://bower.io/docs/creating-packages/

    # Статья по теме from Bob Yexley
        http://bob.yexley.net/creating-and-maintaining-your-own-bower-package/

  > Введение
    - Эта глава про то, как разрабатывать пакеты для bower.

  > Дорожная карта

    1) Создать каталог bower-пакета.
    2) Создать в нём bower.json и наполнить его.
    3) Создать в каталоге readme.md
    4) Сделать в каталоге git init
    5) Создать удалённый публичный репозиторий пакета на github
    6) Связать локальный и удалённые каталоги
    7) Добавить данные для auto push пакета в GitAutoPushScript.ps1
    8) Сделать push пакета на github
    9) Создать новый релиз пакета на github с semver-тегом
    10) Зарегистрировать пакет в репозитории bower

  > Про регистрацию пакета в репозитории bower
    - Она выполняется с помощью bower register.
    - Вот общий синтаксис:

        bower register <my-package-name> <git-endpoint>

    - И пример:

        bower register example git://github.com/user/example.git

    - После этого кто угодно может запустить bower install,
      и установить зарегистрированный пакет:
        bower install <my-package-name>

  > Про снятие с регистрации пакета в репозитории bower
    - Можно удалить пакет из репозитория bower.
    - Сначала надо аутентифицироваться на github с помощью bower login.
    - Это позволит bower'у убедитсья, что вы и есть владелец пакета.
    - Затем с помощью bower unregister можно удалить пакет из репозиторий bower:

        bower unregister <package>
        bower cache clean

    - Если не получается, можно запросить, чтобы пакет удалили вручную:
        https://github.com/bower/bower/issues/120

  > Отсутствие системы учёта пользователей в репозитории bower
    - Репозиторий bower, это проходной двор.
    - Здесь нет регистрации пользователей, аутентификации и авторизации.
    - Кто угодно может здесь публиковать свои репозитории.
    - Bower также не поддерживает пр.имён типа 4gekkman/M1, как github.
    - Но если уж очень надо, можно префиксить имена своих пакетов,
      типа: 4gekkman-M1.

  > Бампинг пакета
    - То есть, повышение его версии (path/minor/major/до конкретной).
    - Для этого используется команда version (см. в разделе с API).

  > Мгновенное применение изменений при разработке для отладки
    - При зазработке мы хотим мгновенно увидеть результат.
    - Но для этого, в обычных условиях, надо сначала бампнуть пакет.
    - Потом обновить все зависимости, и только тогда увидеть изменения.
    - О этого можно сойти с ума, поэтому в API есть команда link.
    - Она позволяет сразу применять изменения при разработке,
      создавая в bower_components симлинк на разрабатываемый пакет.
    - Подробнее см. в разделе с API.



