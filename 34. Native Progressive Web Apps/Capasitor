////=================================================////
////                                                 ////
////                     Capacitor                   ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  # Cordova

    • Сайт
      
        https://capacitor.ionicframework.com/

    • Документация

        https://capacitor.ionicframework.com/docs/

    • Исходный код

        https://github.com/ionic-team/capacitor

    • Форум, чат

        https://forum.getcapacitor.com/
        https://getcapacitor.herokuapp.com/

    • Демонстрация (android, ios, osx, windows app за 5 минут)

        https://www.youtube.com/watch?v=x2jRs7Qqai8
        

////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Теоретические основы Capacitor

    А1. Введение в Capacitor
    А2. Основы Capasitor

  # X.  Практика и наработки

    X1. 


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Введение в Capacitor
--------------------------------------
Подоглавление:

  # Capacitor: Native Progressive Web Apps

    ▪ Одно приложение для всех основных платформ
    ▪ Кроссплатформенная среда для выполнения веб-приложений
    ▪ Native Progressive Web Apps: следующий шаг эволюции гибридов
    ▪ WEB API для доступа к нативным фичам платформ
    ▪ Добавление нативной функциональности через плагины
    ▪ Духовный наследник Cordova
    ▪ Можно добавить в любой JS-проект
    ▪ Capacitor поставляется без какого-либо UI

  # Что нужно Capacitor'у для разработки под каждую платформу

    ▪ Общие зависимости
    ▪ Зависимости для разработки под iOS
    ▪ Зависимости для разработки под Android
    ▪ Зависимости для разработки PWA
    ▪ Зависимости для разработки под Electron

  # Установка Capacitor

    ▪ Два способа установить Capacitor
    ▪ Настоятельно рекомендуется использовать мобильный frontend-фреймворк
    ▪ Перед установкой установи все зависимости для необходимых платформ
    ▪ Добавление Capacitor'а в существующее веб-приложение
    ▪ Испольозвание Capacitor Starter с Ionic Framework
    ▪ Старт нового проекта с Capacitor

  # Использование Capacitor вместе с Ionic

    ▪ Создание проекта на Ionic
    ▪ Сборка ionic-проекта для создания www
    ▪ Установка Capacitor
    ▪ Удаление плагина Cordova Splash
    ▪ Инициация Capacitor'а инфой о проекте
    ▪ Добавление необходимых платформ
    ▪ Открытие IDE'шек для сборки под добавленные платформы
    ▪ Синхронизация приложения с Capacitor
    ▪ Использование Ionic Native

--------------------------------------

> Capacitor: Native Progressive Web Apps

  • Одно приложение для всех основных платформ

    Главная идея Capacitor в том, что вы пишете одно
    веб-приложение, которое сможет выполняться на
    всех основных платформах.

    Разумеется, для каждой из платформ в приложениях
    необходимо предусмотреть сооветствующие различия.

    Но представьте, какие колоссальные выгоды дает
    эта технология. Больше не нужно отдельно разрабатывать
    сайт, приложения для iOS/Android, приложения для 
    OSX/Windows. Какая колоссальная экономия времени!

    Отлично подходит для стартапов.

  • Кроссплатформенная среда для выполнения веб-приложений

    Capacitor, это кроссплатформенная среда для выполнения
    приложений, позволяющая делать сборки из веб-приложений,
    которые могут нативно выполняться на iOS, Android, 
    Electron и в Web.

  • Native Progressive Web Apps: следующий шаг эволюции гибридов

    Разработчики Capacitor говорят о нём, как о следующим витке 
    эволюции после гибридных приложений, и называют эту
    технологию "Native Progressive Web Apps" - нативные
    прогрессивные веб-приложения.

  • WEB API для доступа к нативным фичам платформ

    Capacitor предоставляет сфокусированный на web API, который,
    с одной стороны, позволяет приложению оставаться настолько
    близко к стандартам web'а, насколько это возможно, а с другой
    стороны, даёт доступ к нативной функциональности устройств
    на перечисленных выше платформах.

  • Добавление нативной функциональности через плагины

    В Capacitor можно легко добавлять нативной функциональности
    через простой Plugin API for Swift на iOS, Java на Android,
    и JavaScript для Web.

  • Духовный наследник Cordova

    Capacitor является духовным наследником Apache Cordova и 
    Adobe PhoneGap, вдохновлённым другими популярными 
    кроссплатформенными инструментами, такими как React Native
    и Turbolinks. 

    Но Capacitor полностью сфокусирован на задаче позволить
    легко и эффективно запускать современные веб-приложения
    на всех основных платформах.

    Capacitor имеет обратную совместимость для многих
    Cordova-плагинов.

  • Можно добавить в любой JS-проект

    Начать работать с Capacitor легко - его можно прость добавить
    в любой существующий JS-проект, и всё.

  • Capacitor поставляется без какого-либо UI

    Capacitor, это кроссплатформенная среда для выполнения
    приложений. Он заточен именно под это. Никакого UI
    с ним не поставляется.

> Что нужно Capacitor'у для разработки под каждую платформу

  • Общие зависимости

    ▪ NodeJS >= 8.6.0
    ▪ NPM >= 5.6.0

  • Зависимости для разработки под iOS

    ▪ Mac with Xcode >= 9
    ▪ CocoaPods
    ▪ Xcode Command Line Tools

    Как правило, последняя версия Capacitor всегда поддерживает
    две последние версии iOS.

    Разработчики Capacitor обещают, что скоро можно будет
    использовать Ionic Pro для сборки проектов для iOS
    (это нужно тем, кто сидит на винде).

  • Зависимости для разработки под Android

    ▪ Java 8 JDK (Java 9 не поддерживается пока)
    ▪ Android SDK
    ▪ Android Studio (не обязателен, но рекомендуется)
    
    Capacitor поддерживает API level 21 или выше,
    иначе говоря, Android >= 5.
    На январь 2018, Android >= 5 установлен на 75% устройств,
    и этот процент продолжает быстро расти, поскольку 
    Android 4 считается на данный момент сильно устаревшим.

    Также Capacitor требует наличие Android WebView с 
    Chrome версии >= 50.

  • Зависимости для разработки PWA

    Для разработки прогрессивных веб-приложений Capacitor'у
    нужен JS-проект с системой загрузки модулей, например,
    webpack.

  • Зависимости для разработки под Electron

    Coming soon.
    На данный момент, поддержка Eletron ещё не готова.

> Установка Capacitor

  • Два способа установить Capacitor

    Capacitor был изначально спроектирован именно для 
    добавления в существующий frontend-проект. Но 
    поставляется с простым стартовым шаблоном проекта,
    с которого можно начать.

    Короче, есть два способа установить Capacitor:

      ▪ Добавить Capacitor в существующие frontend-проект (рекомендуется).
      ▪ Начать новый проект.

  • Настоятельно рекомендуется использовать мобильный frontend-фреймворк

    Разработчики Capacitor настоятельно рекомендуют использовать
    его вместе с любым мобильным frontend-фреймворком, например,
    с Ionic. 

    Ведь Capacitor идёт без какого-либо UI, и самому пилить
    этот UI (изобратеть велосипед) не стоит, лучше использовать
    готовый фреймворк.

  • Перед установкой установи все зависимости для необходимых платформ

    Перед установкой Capacitor надо убедиться, что установлены
    все зависимости для всех необходимых платформ.

    Особенно важно проследить, что CocoaPods для iOS обновлён
    командой pod repo update (если у вас Mac).

  • Добавление Capacitor'а в существующее веб-приложение

    Capacitor изначально был спроектирован именно для того,
    чтобы его добавляли в существующие веб-приложения.

    Сначала устанавливаем в проект сам Capacitor:

      cd <папка с приложением>
      npm install --save @capacitor/core @capacitor/cli

    Потом инициируем Capacitor инфой о проекте.
    Эта команда также установит нативные платформы по умолчанию:

      npx cap init

      Команда попросит ввести имя приложения,
      id приложения (который используется в основном для android),
      и путь к каталогу с приложением.

    *Примечание:

      npx - это новая утилита, доступная в npm >= 5, которая
      позволяет выполнять локальные бинарники/скрипты,
      избегая глобальных установок.

  • Испольозвание Capacitor Starter с Ionic Framework

    Разработчики Capacitor обещают, что скоро Capacitor Starter
    будет интегрирован в Ionic CLI.

    А пока что, создайте новое ionic-приложение, используя
    ionic start, а затем просто следуйте описанным выше 
    шагам и добавьте в это приложение Capacitor.

  • Старт нового проекта с Capacitor

    Вместе с Capacitor поставляется какой-то шаблон 
    для веб-приложения, с которым и можно начать проект
    (но не рекомендуется).

    Эта команда создаст очень простое стартовое приложение
    без UI библиотеки:

      npx @capacitor/cli create

> Использование Capacitor вместе с Ionic

  • Создание проекта на Ionic

    ionic start myApp tabs
    cd myApp

    Когда попросит добавить Cordova, выбрать no.

  • Сборка ionic-проекта для создания www

    Выполнить build хотя бы разок, чтобы папка
    www была создана.

    npm run build

  • Установка Capacitor

    Далее установить Capacitor в свой 
    проект:

      npm install --save @capacitor/cli @capacitor/core

  • Удаление плагина Cordova Splash

    Capacitor конфликтует с плагином Cordova Splashscreen.
    Поэтому, его надо выпилить:

      npm uninstall --save cordova-plugin-splashscreen

  • Инициация Capacitor'а инфой о проекте

    npx cap init [appName] [appId]

    ▪ appName - имя приложения
    ▪ appId - реверс домен + имя приложения (напр.: com.example.app)

  • Добавление необходимых платформ

    npx cap add ios
    npx cap add android

  • Открытие IDE'шек для сборки под добавленные платформы

    Если ты на винде, то IDE для ios ты не откровешь.
    А если ты на Mac, то откроешь обе, если установлены.

      npx cap open ios
      npx cap open android    

  • Синхронизация приложения с Capacitor

    Каждый раз после выполнения npm run build, которая 
    изменяет веб-директорию проекта (www), тебе необходимо
    копировать эти изменения далее в папки с платформами,
    для этого:

      npx cap copy

  • Использование Ionic Native

    Capasitor поддерживает Ionic Native. В настоящий момент,
    последний содержит только Cordova-плагины. Так что, 
    каждый раз, как ты будешь находить обёртку Ionic Native,
    которую хотел бы использовать, устанавливай её, а затем
    устанавливай соответствующий Cordova-плагин:

      npm install your-cordova-plugin
      npx cap update

    Подробнее это описано в этой методичке, в главе:
    "Использование плагинов от Cordova".


А2. Основы Capasitor
--------------------------------------
Подоглавление:

  # Описание процесса разработки

    ▪ 

--------------------------------------

> Описание процесса разработки

  • 









