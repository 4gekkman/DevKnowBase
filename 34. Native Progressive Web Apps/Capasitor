////=================================================////
////                                                 ////
////                     Capacitor                   ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  # Cordova

    • Сайт
      
        https://capacitor.ionicframework.com/

    • Документация

        https://capacitor.ionicframework.com/docs/

    • Исходный код

        https://github.com/ionic-team/capacitor

    • Форум, чат

        https://forum.getcapacitor.com/
        https://getcapacitor.herokuapp.com/

    • Демонстрация (android, ios, osx, windows app за 5 минут)

        https://www.youtube.com/watch?v=x2jRs7Qqai8
        

////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Теоретические основы Capacitor

    А1. Введение в Capacitor
    А2. Основы Capacitor
    А3. Разработка под iOS
    А4. Разработка под Android

  # X.  Практика и наработки

    X1. 


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Введение в Capacitor
--------------------------------------
Подоглавление:

  # Capacitor: Native Progressive Web Apps

    ▪ Одно приложение для всех основных платформ
    ▪ Кроссплатформенная среда для выполнения веб-приложений
    ▪ Native Progressive Web Apps: следующий шаг эволюции гибридов
    ▪ WEB API для доступа к нативным фичам платформ
    ▪ Добавление нативной функциональности через плагины
    ▪ Духовный наследник Cordova
    ▪ Можно добавить в любой JS-проект
    ▪ Capacitor поставляется без какого-либо UI

  # Что нужно Capacitor'у для разработки под каждую платформу

    ▪ Общие зависимости
    ▪ Зависимости для разработки под iOS
    ▪ Зависимости для разработки под Android
    ▪ Зависимости для разработки PWA
    ▪ Зависимости для разработки под Electron

  # Установка Capacitor

    ▪ Два способа установить Capacitor
    ▪ Настоятельно рекомендуется использовать мобильный frontend-фреймворк
    ▪ Перед установкой установи все зависимости для необходимых платформ
    ▪ Добавление Capacitor'а в существующее веб-приложение
    ▪ Испольозвание Capacitor Starter с Ionic Framework
    ▪ Старт нового проекта с Capacitor

  # Использование Capacitor вместе с Ionic

    ▪ Создание проекта на Ionic
    ▪ Сборка ionic-проекта для создания www
    ▪ Установка Capacitor
    ▪ Удаление плагина Cordova Splash
    ▪ Инициация Capacitor'а инфой о проекте
    ▪ Добавление необходимых платформ
    ▪ Открытие IDE'шек для сборки под добавленные платформы
    ▪ Синхронизация приложения с Capacitor
    ▪ Использование Ionic Native

--------------------------------------

> Capacitor: Native Progressive Web Apps

  • Одно приложение для всех основных платформ

    Главная идея Capacitor в том, что вы пишете одно
    веб-приложение, которое сможет выполняться на
    всех основных платформах.

    Разумеется, для каждой из платформ в приложениях
    необходимо предусмотреть сооветствующие различия.

    Но представьте, какие колоссальные выгоды дает
    эта технология. Больше не нужно отдельно разрабатывать
    сайт, приложения для iOS/Android, приложения для 
    OSX/Windows. Какая колоссальная экономия времени!

    Отлично подходит для стартапов.

  • Кроссплатформенная среда для выполнения веб-приложений

    Capacitor, это кроссплатформенная среда для выполнения
    приложений, позволяющая делать сборки из веб-приложений,
    которые могут нативно выполняться на iOS, Android, 
    Electron и в Web.

  • Native Progressive Web Apps: следующий шаг эволюции гибридов

    Разработчики Capacitor говорят о нём, как о следующим витке 
    эволюции после гибридных приложений, и называют эту
    технологию "Native Progressive Web Apps" - нативные
    прогрессивные веб-приложения.

  • WEB API для доступа к нативным фичам платформ

    Capacitor предоставляет сфокусированный на web API, который,
    с одной стороны, позволяет приложению оставаться настолько
    близко к стандартам web'а, насколько это возможно, а с другой
    стороны, даёт доступ к нативной функциональности устройств
    на перечисленных выше платформах.

  • Добавление нативной функциональности через плагины

    В Capacitor можно легко добавлять нативной функциональности
    через простой Plugin API for Swift на iOS, Java на Android,
    и JavaScript для Web.

  • Духовный наследник Cordova

    Capacitor является духовным наследником Apache Cordova и 
    Adobe PhoneGap, вдохновлённым другими популярными 
    кроссплатформенными инструментами, такими как React Native
    и Turbolinks. 

    Но Capacitor полностью сфокусирован на задаче позволить
    легко и эффективно запускать современные веб-приложения
    на всех основных платформах.

    Capacitor имеет обратную совместимость для многих
    Cordova-плагинов.

  • Можно добавить в любой JS-проект

    Начать работать с Capacitor легко - его можно прость добавить
    в любой существующий JS-проект, и всё.

  • Capacitor поставляется без какого-либо UI

    Capacitor, это кроссплатформенная среда для выполнения
    приложений. Он заточен именно под это. Никакого UI
    с ним не поставляется.

> Что нужно Capacitor'у для разработки под каждую платформу

  • Общие зависимости

    ▪ NodeJS >= 8.6.0
    ▪ NPM >= 5.6.0

  • Зависимости для разработки под iOS

    ▪ Mac with Xcode >= 9
    ▪ CocoaPods
    ▪ Xcode Command Line Tools

    Как правило, последняя версия Capacitor всегда поддерживает
    две последние версии iOS.

    Разработчики Capacitor обещают, что скоро можно будет
    использовать Ionic Pro для сборки проектов для iOS
    (это нужно тем, кто сидит на винде).

  • Зависимости для разработки под Android

    ▪ Java 8 JDK (Java 9 не поддерживается пока)
    ▪ Android SDK
    ▪ Android Studio (не обязателен, но рекомендуется)
    
    Capacitor поддерживает API level 21 или выше,
    иначе говоря, Android >= 5.
    На январь 2018, Android >= 5 установлен на 75% устройств,
    и этот процент продолжает быстро расти, поскольку 
    Android 4 считается на данный момент сильно устаревшим.

    Также Capacitor требует наличие Android WebView с 
    Chrome версии >= 50.

  • Зависимости для разработки PWA

    Для разработки прогрессивных веб-приложений Capacitor'у
    нужен JS-проект с системой загрузки модулей, например,
    webpack.

  • Зависимости для разработки под Electron

    Coming soon.
    На данный момент, поддержка Eletron ещё не готова.

> Установка Capacitor

  • Два способа установить Capacitor

    Capacitor был изначально спроектирован именно для 
    добавления в существующий frontend-проект. Но 
    поставляется с простым стартовым шаблоном проекта,
    с которого можно начать.

    Короче, есть два способа установить Capacitor:

      ▪ Добавить Capacitor в существующие frontend-проект (рекомендуется).
      ▪ Начать новый проект.

  • Настоятельно рекомендуется использовать мобильный frontend-фреймворк

    Разработчики Capacitor настоятельно рекомендуют использовать
    его вместе с любым мобильным frontend-фреймворком, например,
    с Ionic. 

    Ведь Capacitor идёт без какого-либо UI, и самому пилить
    этот UI (изобратеть велосипед) не стоит, лучше использовать
    готовый фреймворк.

  • Перед установкой установи все зависимости для необходимых платформ

    Перед установкой Capacitor надо убедиться, что установлены
    все зависимости для всех необходимых платформ.

    Особенно важно проследить, что CocoaPods для iOS обновлён
    командой pod repo update (если у вас Mac).

  • Добавление Capacitor'а в существующее веб-приложение

    Capacitor изначально был спроектирован именно для того,
    чтобы его добавляли в существующие веб-приложения.

    Сначала устанавливаем в проект сам Capacitor:

      cd <папка с приложением>
      npm install --save @capacitor/core @capacitor/cli

    Потом инициируем Capacitor инфой о проекте.
    Эта команда также установит нативные платформы по умолчанию:

      npx cap init

      Команда попросит ввести имя приложения,
      id приложения (который используется в основном для android),
      и путь к каталогу с приложением.

    *Примечание:

      npx - это новая утилита, доступная в npm >= 5, которая
      позволяет выполнять локальные бинарники/скрипты,
      избегая глобальных установок.

  • Испольозвание Capacitor Starter с Ionic Framework

    Разработчики Capacitor обещают, что скоро Capacitor Starter
    будет интегрирован в Ionic CLI.

    А пока что, создайте новое ionic-приложение, используя
    ionic start, а затем просто следуйте описанным выше 
    шагам и добавьте в это приложение Capacitor.

  • Старт нового проекта с Capacitor

    Вместе с Capacitor поставляется какой-то шаблон 
    для веб-приложения, с которым и можно начать проект
    (но не рекомендуется).

    Эта команда создаст очень простое стартовое приложение
    без UI библиотеки:

      npx @capacitor/cli create

> Использование Capacitor вместе с Ionic

  • Создание проекта на Ionic

    ionic start myApp tabs
    cd myApp

    Когда попросит добавить Cordova, выбрать no.

  • Сборка ionic-проекта для создания www

    Выполнить build хотя бы разок, чтобы папка
    www была создана.

    npm run build

  • Установка Capacitor

    Далее установить Capacitor в свой 
    проект:

      npm install --save @capacitor/cli @capacitor/core

  • Удаление плагина Cordova Splash

    Capacitor конфликтует с плагином Cordova Splashscreen.
    Поэтому, его надо выпилить:

      npm uninstall --save cordova-plugin-splashscreen

  • Инициация Capacitor'а инфой о проекте

    npx cap init [appName] [appId]

    ▪ appName - имя приложения
    ▪ appId - реверс домен + имя приложения (напр.: com.example.app)

  • Добавление необходимых платформ

    npx cap add ios
    npx cap add android

  • Открытие IDE'шек для сборки под добавленные платформы

    Если ты на винде, то IDE для ios ты не откровешь.
    А если ты на Mac, то откроешь обе, если установлены.

      npx cap open ios
      npx cap open android    

  • Синхронизация приложения с Capacitor

    Каждый раз после выполнения npm run build, которая 
    изменяет веб-директорию проекта (www), тебе необходимо
    копировать эти изменения далее в папки с платформами,
    для этого:

      npx cap copy

  • Использование Ionic Native

    Capasitor поддерживает Ionic Native. В настоящий момент,
    последний содержит только Cordova-плагины. Так что, 
    каждый раз, как ты будешь находить обёртку Ionic Native,
    которую хотел бы использовать, устанавливай её, а затем
    устанавливай соответствующий Cordova-плагин:

      npm install your-cordova-plugin
      npx cap update

    Подробнее это описано в этой методичке, в главе:
    "Использование плагинов от Cordova".


А2. Основы Capacitor
--------------------------------------
Подоглавление:

  # Описание процесса разработки

    ▪ Разработка и сборка приложения
    ▪ Копирование web-ресурсов
    ▪ Запуск нативной IDE
    ▪ Периодическое обновление Capacitor-приложения и плагинов
 
  # Запуск нативных IDE из командной строки
  # Сборка приложения

    ▪ Три этапа: сборка веб-кода, копирование, сборка Capacitor-приложения
    ▪ Сборка веб-кода
    ▪ Копирование собранного веб-кода на платформы
    ▪ Сборка Capacitor-приложения для каждой платформы

  # Запуск приложения

    ▪ Запуск под iOS
    ▪ Запуск под Android
    ▪ Запуск Progressive Web App
    ▪ Запуск под electron

  # Использование плагинов от Cordova

    ▪ Полная совместимость
    ▪ Установка плагинов от Cordova
    ▪ Настройка плагинов от Cordova
    ▪ Проблемы совместимости

  # Настройка приложения

    ▪ Концепция: "один код, много настроек"
    ▪ Всё же есть некоторые общие для всех платформ настройки
    ▪ Как настроить платформы iOS и Android (ссылки)

  # Прогрессивные веб-приложения

    ▪ Capacitor поддерживает PWA
    ▪ Что такое Progressive Web Apps (PWA)
    ▪ Capacitor и PWA
    ▪ Добавление поддержки PWA в ваше Capacitor-приложение
      ▪ Манифест PWA
      ▪ Service Workers
    ▪ Производительность PWA
    ▪ Работа нативно и в web

--------------------------------------

> Описание процесса разработки

  • Разработка и сборка приложения

    Capacitor превращает ваше веб-приложение в бинарники
    нативных приложний для каждойплатформы. Таким образом,
    большая часть вашей работы будет состоять в разработке
    и сборке нацеленного для работы на смартфонах веб-
    приложения.

    Ваше приложение будет взаимодействовать с нативным
    функционалом соответствующих платформ (например, камерой) 
    либо через Capacitor API, либо через уже существующие
    Cordova-плагины, совместимые с Capacitor.

    В процессе, и на финальном этапе, вам понадобится собрать
    ваше приложение с помощью команды:

      npm run build

    Если вы используете фреймворк, то следуйте инструкциям
    по сборке вашего фреймворка. Например, если это Ionic, то:

      ionic build

  • Копирование web-ресурсов

    Когда вы будете готовы запустить ваше приложение на 
    устройстве или симуляторе, скопируйте ваши, уже собранные
    веб-ресурсы в соответствующие платформы:

      npx cap copy

  • Запуск нативной IDE

    Capacitor использует нативные IDE для сборки, симуляции
    и запуска вашего приложения. Чтобы открыть их:

      npx cap open

  • Периодическое обновление Capacitor-приложения и плагинов

    Периодически необходимо обновлять зависимоси и плагины
    вашего Capacitor-приложения.

    Чтобы обновить зависимости приложения:

      npx cap update

    Чтобы установить новые плагины (включая плагины от Cordova):

      npm install really-cool-plugin
      npx cap update

> Запуск нативных IDE из командной строки

  Capacitor использует нативную IDE для каждой платформы,
  чтобы обеспечивать необходимую настройку, сборку,
  тестирование и деплой приложений.

  Для разработки под iOS, вам необходим Xcode >= 9.
  А для Android вам нужен Android Studio >= 3.

  Обе IDE можно открыть вручную, а можно командой:

    npx cap open

  Нюанс заключается в том, что Xcode нельзя установить
  на Windows. Поэтому, обе IDE можно открыть только
  в OSX на Mac. А на Windows можно открыть только
  Android Studio.

  Можно с помощью этих команд открывать конкретные IDE:

    npx cap open ios
    npx cap open android

> Сборка приложения

  • Три этапа: сборка веб-кода, копирование, сборка Capacitor-приложения

    Сборка Capacitor-приложения включает 3 этапа.

    На первом этапе надо собрать frontend приложения с помощью
    системы сборки webpack:

      npm run build

    На втором этапе надо скопировать собранный фронт в папки
    поддерживаемых приложением платформ:

      npx cap copy          | скопировать на все платформы
      npx cap copy android  | скопировать на платформу android
      npx cap copy ios      | скопировать на платформу iox

    На третьем этапе надо открыть нативную IDE каждой платформы
    и в ней выполнить сборку Capacitor-приложения для соотв.
    платформы. IDE можно открыть вручную или командами:

      npx cap open ios
      npx cap open android

  • Сборка веб-кода

    Capacitor из коробки не предоставляет средств для сборки
    веб-кода. Поэтому, если вы используете какой-
    нибудь фреймворк (например, Ionic), следуйте его 
    инструкциям по сборке кода.

    Чтобы упростить себе жизнь, можно добавить в package.json
    вашего проекта скрипт "build", где прописать команду,
    которая будет собирать ваш фронт. Примерно так это
    выглядит:

      {
        "scripts": {
          "build": "command-to-build (ex: webpack, tsc, babel, etc.)"
        }
      } 

    Сделав это, для сборки фронта можно будет просто
    выполнять команду:

      npm run build   

  • Копирование собранного веб-кода на платформы

    Когда вы собрали фронт, результаты необходимо скопировать
    на все поддерживаемые вашим проектом платформы командой:

      npx cap copy

    Делать это надо каждый раз после сборки веб-кода.
    Проще всего добавить эту команду конец скрипта build в 
    package.json.

  • Сборка Capacitor-приложения для каждой платформы

    ▪ iOS

      Включаем MacOS, запускаем Xcode, и собираем 
      Capacitor-приложение для iOS обычным для Xcode образом.

    ▪ Android

      Запускаем Android Studio, и собираем Capacitor-приложение
      для android обычным для Android Studio образом.

> Запуск приложения

  • Запуск под iOS

    Включаем MacOS, запускаем Xcode.
    В нём можно собирать приложение, смотрть в эмуляторе, 
    запускать на устройстве, обычным для Xcode образом.

  • Запуск под Android

    Запускаем Android Studio.
    В нём можно собирать приложение, смотрть в эмуляторе, 
    запускать на устройстве, обычным для Xcode образом.

  • Запуск Progressive Web App

    Вместе с Capacitor идёт минималистичный веб-сервер,
    через который можно смотреть своё веб-приложение.
    Запустить его можно так:

      npx cap serve

  • Запуск под electron

    (Coming soon)

> Использование плагинов от Cordova

  • Полная совместимость

    Capacitor полностью совместим с плагинами от Cordova.
    Использовать их в нём легко.

  • Установка плагинов от Cordova

    npm install <плагин>  | установка плагина через npm
    npx cap sync          | синхронизация проекта

  • Настройка плагинов от Cordova

    Capacitor не поддерживает установку переменных плагина
    при установке, авто-настройку плагина или хуки, 
    как это делает Cordova.

    В соответствии со своей философией Capacitor даёт 
    вам полный контроль над нативным кодом ваших приложений
    на установленных платформах (команда Capacitor считает,
    что в связи с этим, такие вещи, как хуки, не нужны).

    Если вашему плагину требуется установить какие-то
    переменные, или нужна какая-то настройка, вам придётся
    вручную произвести эту настройку через маппинг между
    plugin.xml и настройками iOS и Android.

    Подробнее об этом см.главы:
    "Настройка iOS"
    "Настройка Android"

  • Проблемы совместимости

    Плагины из следующего списка не совместимы с Capacitor,
    и для них у него имеются альтернативы. Эти плагины
    должны быть удалены из приложения:

      ▪ cordova-plugin-splashscreen

    Авторы Capacitor утверждают, что они протестировали 
    с оным многие, но не все плагины от Cordova. Поэтому,
    есть вероятность, что какие-то плагины могут не работать
    как надо.

> Настройка приложения

  • Концепция: "один код, много настроек"

    Capacitor проповедует идею: "один код, много настроек".
    Это значит, что каждую установленную платформу нужно
    настраивать отдельно. В отличие от Cordova, где на 
    все платформы в корне проекта был один абстрактный
    config.xml.

    Это важная вещь, потому что это значит, что Capacitor 
    требует, чтобы вы были больше вовлечены в настройку 
    нативных проектов, чем Cordova. Однако, команда
    Capacitor считает это правильным подходом, потому
    что так проще следовать уже существующим инструкциям
    для iOS/Android, получать помощь на Stack Overflow,
    и гибче и тоньше настраивать каждую из платформ,
    получая над ними больший контроль.

    Кроме того, поскольку настройка платформ в Capacitor
    не особо то отличается от оной при нативной разработке,
    существующие команды, занимающиеся нативной разработкой
    могут легко работать совместно с веб-разработчиками,
    при этом каждая команда будет использовать те инструменты
    и SDK, к которым они привыкли.

    Команда Capacitor верит, что веб-разработчики могут
    самостоятельно справиться с нативной настройкой платформ.
    А чтобы им помочь, в документации Capacitor есть отдельные
    главы, посвященные этой тематике.

  • Всё же есть некоторые общие для всех платформ настройки

    У Capacitor есть немного высокоуровневых настроек, 
    которые можно задать в capacitor.config.json
    В общем, они не затрагивают нативный функционал, 
    а лишь настраивают инструменты самого Capacitor.

    В настоящий момент, вот, что можно настраивать:

    {

      // Sets the directory of your built web assets. This is the directory that will be
      // used to run your app in a native environment
      "webDir": "public",

      // Whether to use capacitor.js as a bundle that is copied to your web code,
      // or require it to be bundled/imported through a typical
      // typescript/babel/webpack/rollup workflow.
      //
      // The starter project sets this to true, but if you're using Ionic or another framework,
      // you'll probably want this to be false (default is false)
      "bundledWebRuntime": false,

      // On Windows, we aren't able to automatically open Android Studio
      // without knowing the full path. The default is set to the default
      // Android Studio install path, but you may change it manually.
      "windowsAndroidStudioPath": 'C:\\Program Files\\Android\\Android Studio\\bin\\studio64.exe',

      // On Android, Capacitor loads your local assets using https
      // Chrome by default prevents loading files from a different scheme (i.e. from http)
      // This setting allows to mix content from different schemes
      "allowMixedContent": true

    }    


  • Как настроить платформы iOS и Android (ссылки)

    Подробнее об этом см.главы:
    "Настройка iOS"
    "Настройка Android"

> Прогрессивные веб-приложения

  ▪ Capacitor поддерживает PWA

    Capacitor имеет первоклассную поддержку прогрессивных
    веб-приложений, и делает простым делом сборку приложения,
    которое не только нативно запускается на iOS и Android,
    но и в качестве мобильной версии на web'е.

  ▪ Что такое Progressive Web Apps (PWA)

    Если говорить просто, то PWA - веб приложение, которое
    использует современные возможности, чтобы предоставлять
    пользователям схожий с использованием нативных приложений 
    опыт.

    Эти приложения деплоятся на традиционные веб-сервера,
    доступны по URL в браузере, и могут быть проиндексированы
    поисковыми машинами.

    Короче говоря, PWS - это просто ещё один термин для
    сайта, который был оптимизирован для использования
    с моибльных устройств, и который использует новые
    современные Web API, чтобы обеспечить функционал, схожий
    с оным в нативных приложениях, такой как пуш-уведомления
    и оффлайн-хранилище.

  ▪ Capacitor и PWA

    Capacitor имеет первоклассную поддержку прогрессивных
    веб-приложений, и нативных приложений. Это значит
    plugin bridge Capacitor'а поддерживает запуск как 
    в нативном контексте, так и в вебе, с большим кол-вом
    core-плагинов, доступных в обоих контекстах с абсолютно
    точно таким же API.

    Это значит, что вам нужно использовать @capacitor/core 
    в качестве зависимости как для нативных приложений, 
    так и для PWA, и Capacitor бесшовно когда надо вызывает 
    web-код, а когда надо нативный код.

    В дополнение, Capacitor предлагает набор возможностей
    и утилит для кастомизации приложения под ту или иную 
    платформу.

  ▪ Добавление поддержки PWA в ваше Capacitor-приложение

    Добавление поддержки PWA в любой существующий 
    фронтенд-проект, это просто. Просто добавьте
    файл с App Manifest и настройте Service Worker:

    ▪ Манифест PWA

      Во-первых, вам понадобится файл manifest.json, который
      должен быть в той же папке, что и index.html. В нём
      метаданные о вашем приложении, такие как название,
      цвета для темы, иконки. Эта информация будет 
      использоваться, например, когда ваше приложение 
      будет установлено на главном экране.

    ▪ Service Workers

      Далее, чтобы отправлять push-уведомления и хранить
      данные оффлайн, вам понадобится Service Worker. Он
      будет проксировать входящие/исходящие запросы
      вашего приложения и выполнять различные фоновые задачи
      для обработки и синхронизации данных.

      Service Workers классные штуки, но сложные. Писать их
      самостоятельно не рекомендуется. Вместо этого, взгляните
      на инструменты вроде Workbox, которые позволяют легко
      настроить и интегрировать в проект готовое решение.

      Подробнее про Service Workers можно почитать на MDN:
      https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers

  ▪ Производительность PWA

    PWA оцениваются по нескольким стандартам производительности,
    включая "Time to Interactive" и "First Meaningful Paint".

    Пробейте ваше приложение по PWA-чеклисту прежде, чем
    давать ему зелёныйсвет, и потестируйте его производительность
    в Lighthouse.

    Если вы хотите, чтобы веб-приложение на вашем текущем
    фронтенд-стеке соответствовало стандартам производительности,
    взгляните на Ionic Framework ~4.* 
    Он обладает библиотекой веб-компонентов, которые работают
    с несколькими популярными фронтенд-фреймворками, а не только
    с Angular.

  ▪ Работа нативно и в web

    Одна из ключевых фич Capacitor'а в возможности собирать
    одно приложение, которое работает как нативно (в app stores),
    так и на веб. Capacitor реализует это, организуя средний
    слой между сооветствующей платформой и APIs/плагинами,
    которые вы бы хотели использовать.

    Если ваше приложение делает запрос к нативному плагину, 
    который не имеет заменителя на web (например, SplashScreen.show()),
    приложение переварит такой запрос без каких-либо ошибок.
    Просто, вернётся промис с ошибкой, который надо будет все равно
    обработать.

    В дополнение, Capacitor JS API имеет функционал, позволяющий
    программно проверять доступность того или иного API.

    Например, если вашему приложению требуется камера, то перед
    тем, как её запрашивать, можно просто проверить, доступен
    ли API камеры. Если нет, то можно просто попросить пользователя
    загрузить файл:

    import { Capacitor } from '@capacitor/core';

    const isAvailable = Capacitor.isPluginAvailable('Camera');

    if (!isAvailable) {
      // Have the user upload a file instead
    } else {
      // Otherwise, make the call:
      Camera.getPhoto()
    }


А3. Разработка под iOS
--------------------------------------

  # Обзор процесса разработки под iOS

    ▪ Взаимодействие между JS и нативным кодом
    ▪ Нужен OSX, Xcode и CocoaPods
    ▪ Подготовка к началу разработки на iOS
    ▪ Создание iOS-приложения
    ▪ Открытие iOS-проекта в Xcode
    ▪ Запуск iOS-приложения
    ▪ Дальнейшие шаги

  # Настройка iOS

    ▪ Файл Info.plist, как главный конфиг iOS приложения
    ▪ Управление правами доступа
    ▪ 
    ▪ 
    ▪ 
  
--------------------------------------

> Обзор процесса разработки под iOS

  ▪ Взаимодействие между JS и нативным кодом

    Capacitor предоставляет нативный iOS-мост, который позволяет
    разработчикам организовывать коммуникации между JS с одной,
    и кодом на Swift/Objective-C с другой.

  ▪ Нужен OSX, Xcode и CocoaPods

    Capacitor-приложения на платформе iOS настраиваются и 
    управляются с помощью Xcode, а зависимости для них
    управляются менеджером CocoaPods.

  ▪ Подготовка к началу разработки на iOS

    Сборка Capacitor-приложений на платформе iOS требует
    определённой среды разработки - OSX, Xcode >= 9,
    и Xcode command line tools.

    *Примечание: 

      Есть возможность разрабатывать и собирать
      Capacitor-приложения на iOS без мака - например, 
      использовать сервис Package из Ionic Pro. Подробнее
      надо читать документацию Ionic Pro.

      В принципе, можно работать через виртуальную машину.
      Поставить OSX >= 10.13.4, Xcode и всё остальное.
      Пробросить туда папку с проектом и работать.

  ▪ Создание iOS-приложения

    Платформа для iOS устанавливается в любом новом 
    Capacitor-проекте по умолчанию.

    Если же вы добавляете Capacitor в существующий проект,
    вы можете вручную добавить платформу iOS этой командой:

      npx cap add ios
      npx cap sync      | обновляет зависимости, копирует www на ios-платформу

    Вместо sync можно выполнить copy. Она не выполняет обновление
    зависимостей, а лишь копирует www на ios-платформу:

      npx cap copy
  
  ▪ Открытие iOS-проекта в Xcode

    Можно просто открыть Xcode, а в нём проект вручную.
    А можно сделать это из команднной строки:

      npx cap open ios

  ▪ Запуск iOS-приложения

    Запустив Xcode и открыв в нём проект, просто нажмите
    кнопку "Play", чтобы запустить ваше приложение
    на симуляторе или устройстве.

  ▪ Дальнейшие шаги

    Если ваше приложение нормально запустилось и работает,
    у вас есть все, чтобы продолжать его разработку.

    Используйте различные доступные API, плагины от
    Capacitor и Cordova, или кастомный нативный код,
    чтобы построить остальную часть вашего приложения.

> Настройка iOS

  ▪ Файл Info.plist, как главный конфиг iOS приложения

    При разработке под iOS вам нужно привыкнуто к файлу
    Info.plist, который является главным конфигом для
    iOS-приложения. Файд будет часто обновляться:

      ▪ Новыми настройками, которые могут понадобиться
        Capacitor'у.

      ▪ Дополнительными настройками вашего приложения.

      ▪ Дополнительными настройками для разрешений,
        которые могут понадобиться вашему приложению.

    Наиболее простой способ отредактировать этот файл,
    это открыть ваш проект в Xcode (npx cap open ios),
    и отредактировать файл через список свойств прямо
    в Xcode.

    Каждая настройка в Info.plist имеет low-level имя
    параметра, и high-level имя. По умолчанию, редактро
    свойств в Xcode показывает high-level имена, но
    часто полезно изменить это, чтобы он показывал
    low-level имена. Чтобы это сделать, кликните правой
    кнопкой мыши где-нибудь в редакторе свойств и 
    переключите "Show Raw Keys/Values".

    Под капотом, Info.plist является обычным XML-файлом
    и может быть отредактирован вручную в любом текстовом
    редакторе. В этом случае, убедитесь, что используете
    low-level имена параметров в XML для значений <key>.

    Некоторые плагины и SDK будут показывать настройки,
    используя low-level ключи, другие же будут использовать
    high-level ключи. Привыкните ориентироваться в этом.

    Вот этот список ключей для Cocoa показывает многие
    возможные настройки, которые могут быть установлены
    в Info.plist:

      https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html

  ▪ Управление правами доступа

    
























