////=================================================////
////                                                 ////
////                    Ionic 4.*                    ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  # Ionic

    • Сайт
      
        https://ionicframework.com

    • Документация

      ▪ Официальные доки (пока что v3.*)

        https://ionicframework.com/docs

      ▪ Доки для beta v4

        https://beta.ionicframework.com/docs/

    • Репозиторий и документация для Ionic 4.*

      ▪ Ionic Core 4.0.0
          https://github.com/ionic-team/ionic/blob/master/core/README.md

      ▪ Ionic 4.* Docs
          https://github.com/ionic-team/ionic-docs

    • Маркет (плагины, темы, стартовые приложения)
    
        https://market.ionicframework.com

    • Магазин аксесуаров (футболки, наклейки и прочее)

        https://shop.ionicframework.com

    • Прогресс разработки ionic 4.*

        https://github.com/ionic-team/ionic/milestones

    • Форум и чат

        https://forum.ionicframework.com/
        http://ionicworldwide.herokuapp.com/

    • Twitter

      https://twitter.com/Ionicframework

    • Статьи про использование Ionic 4 + Vue

      ▪ Ionic 4 + Capacitor tutorials list #1
          https://ionictheme.com/ionic4-capacitor-tutorials-list-1/

      ▪ [02.06.2018] Building Mobile Apps With Capacitor And Vue.js
          https://www.smashingmagazine.com/2018/07/mobile-apps-capacitor-vue-js/

      ▪ [28.05.2018] Using the Capacitor in Vue.js app
          http://akhromieiev.com/tutorials/using-capacitor-in-vue-js-app/

      ▪ [15.02.2018]Ionic 4 Tutorial with Vue
          https://www.techiediaries.com/ionic-vue/

      ▪ [16.01.2018]Using Ionic 4 Components in Your Vue.js Apps
          https://alligator.io/vuejs/vue-ionic/

    • Демо-приложения на capacitor + vue + ionic 4

      ▪ A Mobile Demo App with Vue, Capacitor and Ionic 4 Components
          https://github.com/techiediaries/vue-capacitor-ionic-app

    • Блог

        https://blog.ionicframework.com/

    • Интересные посты в блоге

      ▪ [24.07.2018] Announcing the Ionic 4 Beta
          https://blog.ionicframework.com/announcing-ionic-4-beta/

      ▪ [23.07.2018] Announcing Ionic Identity Vault: Secure Biometric Authentication for Your Mobile App
          https://blog.ionicframework.com/announcing-ionic-identity-vault-secure-biometric-authentication-for-your-mobile-app/

      ▪ [22.06.2018] Using TestFlight for User Testing with Ionic
          https://blog.ionicframework.com/using-testflight-for-user-testing-with-ionic/

      ▪ [21.05.2018] Announcing Ionicons v4!
          https://blog.ionicframework.com/announcing-ionicons-v4/

      ▪ [18.04.2018] Ionic Semantic Versioning, Release Schedule and LTS
          https://blog.ionicframework.com/ionic-semantic-versioning-release-schedule-and-lts/

      ▪ [16.04.2018] Introducing A New Guide to Progressive Web Apps
          https://blog.ionicframework.com/introducing-a-new-guide-to-progressive-web-apps/

      ▪ [05.04.2018] Ionic at VueConf
          https://blog.ionicframework.com/ionic-at-vueconf/

      ▪ [20.03.2018] Using Ionic Deploy to Beta Test New Features
          https://blog.ionicframework.com/using-ionic-deploy-to-beta-test-new-features/

      ▪ [15.03.2018] Improved Perceived Performance with Skeleton Screens
          https://blog.ionicframework.com/improved-perceived-performance-with-skeleton-screens/

      ▪ [27.02.2018] Announcing Capacitor 1.0.0 Alpha
          https://blog.ionicframework.com/announcing-capacitor-1-0-0-alpha/

      ▪ [12.02.2018] Customizing Ionic Apps for Web & Mobile
          https://blog.ionicframework.com/customizing-ionic-apps-for-web-mobile/

      ▪ [16.01.2018] Announcing the Ionic PWA Toolkit Beta
          https://blog.ionicframework.com/announcing-the-ionic-pwa-toolkit-beta/

      ▪ [31.10.2017] Announcing Ionic DevApp
          https://blog.ionicframework.com/announcing-ionic-devapp/

      ▪ [25.10.2017] Ionic: 2017-18 Roadmap
          https://blog.ionicframework.com/ionic-2017-18-roadmap/

      ▪ [04.10.2017] WKWebView for All: A new webview for Ionic
          https://blog.ionicframework.com/wkwebview-for-all-a-new-webview-for-ionic/

      ▪ [18.09.2017] The end of Framework Churn
          https://blog.ionicframework.com/the-end-of-framework-churn/

  # Распределение версий на Android
  
    https://developer.android.com/about/dashboards/        


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Теоретические основы Ionic 4.*

    А1. Как пользоваться документацией Ionic 4.*
    А2. Введение в Ionic
    А3. Установка Ionic
    А4. Процесс разработки Ionic-приложения

  # X.  Практика и наработки

    X1. 


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Как пользоваться документацией Ionic 4.*
--------------------------------------
Подоглавление:

  # Ссылки
  # Как обстоят дела с документацией на конец июля 2017
  # Как пользоваться документацией, пока она не опубликована
  
--------------------------------------

> Ссылки

  • Официальная документация Ionic 4.*
      https://github.com/ionic-team/ionic-docs

  • Ionic v4 component preview app
      https://github.com/ionic-team/component-preview

> Как обстоят дела с документацией на конец июля 2017

  Ionic v4 официально ещё не вышел.
  Документация официально нигде не опубликована.
  Текущея её версия лежит на github.

> Как пользоваться документацией, пока она не опубликована

  1. Сначала устанавливаем NodeJS и NPM, если ещё нет

    curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
    sudo apt-get install -y nodejs
    npm i npm@latest -g
    npm update npm -g

  2. Открываем свой рабочий linux-дистрибутив
  3. Создаём папку ionic в корне и переходим в неё.
  4. Клонируем репозиторий с доками в неё:

    git clone https://github.com/ionic-team/ionic-docs.git docs  

  5. Переходим в docs, и устанавливаем все npm-зависимости

    cd docs
    npm install

  6. Устанавливаем Ionic v4 component preview app

    Это приложение, которое используется в документации
    для демонстрации компонентов Ionica вживую, так сказать.

    Его нужно отдельно склонировать в папку 
    /ionic/component-preview-app

      cd /ionic
      git clone https://github.com/ionic-team/component-preview.git component-preview-app

    Дальше идём в склонированное приложение,
    устанавливаем зависимости и собираем его:

      cd /ionic/component-preview-app
      npm install
      npm run build

    Дальше копируем папку /ionic/component-preview-app/docs-www
    в /ionic/docs/src/content/component-preview-app/

    Если что, папка component-preview-app находится
    в .gitignore проекта, так что можно без опаски
    делать git pull

  7. Устанавливаем документы для API, CLI, Native, Storage, Component preview

    cd /ionic/docs
    npm run api-docs

  8. Собираем проект

    npm run build

  9. Запускаем сервак

    npm run start

  10. Заходим в браузер и видим доки по адресу 

    localhost:3000/docs

  11. Периодически делаем git pull свежих изменений

    Разработчики Ionic периодически редактируют и
    обновляют доки, поэтому, пока ты их используешь
    в описанном выше режиме, надо их периодически
    обновлять.

    ▪ Обновление документации

      cd /ionic/docs
      git pull

      npm install
      npm run build

    ▪ Обновление Ionic v4 component preview app

      cd /ionic/component-preview-app
      git pull

      npm install
      npm run build

      Затем, копируем с заменой папку /ionic/component-preview-app/docs-www
      в /ionic/docs/src/content/component-preview-app/

    ▪ Обновление документов для API, CLI, Native, Storage, Component preview

      cd /ionic/docs
      git pull
      npm run api-docs
      npm run build


А2. Введение в Ionic
--------------------------------------

  # Что из себя представляет Ionic Framework?

    ▪ Общая информация об Ionic
    ▪ Какие цели преследовали авторы, создавая Ionic
      ▪ Кроссплатформенный
      ▪ Основан на веб-стандартах
      ▪ Прекрасная архитектура
      ▪ Простота
    ▪ Ionic является open source проектом с лицензией MIT
    ▪ Про Ionic CLI
    ▪ О совместимости с фреймворками
      ▪ Ionic v4 и JavaScript
      ▪ Ionic v4 и Angular
      ▪ Будут билды Ionic v4 для Vue и React
    ▪ О v4
    ▪ Про Ionic Pro
    ▪ Экосистема Ionic

  # Основные понятия

    ▪ Введение в основные понятия
    ▪ UI компоненты
    ▪ Непрерывность платформы: адаптация и мимикрия core-компонент под платформы
    ▪ Навигация, навигационные стеки, параллельная навигация
    ▪ Доступ к нативным платформам
    ▪ Архитектура
    ▪ Темы

  # Поддержка браузерами

    ▪ Поддержка браузерами на mobile
      ▪ Что с поддержкой у Ionic
      ▪ Что с поддержкой у Capacitor
      ▪ Что с поддержкой у Cordova
      ▪ Приложение на Capacitor и Ionic не пойдёт на 13.2% всех Android-устройств
      ▪ Приложение на Cordova и Ionic не пойдёт на 0.5% всех Android-устройств
      ▪ Краткие выводы: Cordova или Capacitor?

    ▪ Поддержка браузерами на desctop

  # Разъяснение за версии Ionic

    ▪ Используется SemVer (major.minor.patch)
    ▪ Расписание релизов
      ▪ Major Release
      ▪ Minor Release
      ▪ Patch Release
    ▪ Лог изменений

  # Поддержка

    ▪ Long Term Support (LTS)
    ▪ Платные опции поддержки

--------------------------------------

> Что из себя представляет Ionic Framework?

  • Общая информация об Ionic

    Ionic Framework - open source набор UI-инструментов для
    создания производительных, высококачественных мобильных
    и десктопных приложений, на основе веб-технологий
    (html, css, js).

    Ionic концентрируется на пользовательском интерфейсе
    (фронтенде), или на UI-взаимодействиях приложения 
    (элементы управления, взаимодействия, жесты, анимации).
    Его легко изучить, и легко использовать совместно
    с другими библиотеками или фреймворками, такими как
    Angular или Vue. Но можно обойтись и вообще без
    каких-либо других фронтенд-фреймворков.

    В настоящий момент, Ionic имеет официальную интеграцию
    с Angular, но авторы сообщают, что поддержка для 
    Vue и React в разработке.

  • Какие цели преследовали авторы, создавая Ionic

    ▪ Кроссплатформенный

      Пишем один код, одно приложение, которое работает
      на многих платформах, таких как iOS, Android, desctop,
      PWA (Progressive Web App)

      Девиз: "Write once, run anywhere".
             "Пишем одно приложение, которое работает везде".

    ▪ Основан на веб-стандартах

      Ionic основан на надёжных веб-технологиях: html, css, js.
      Поэтому, написанное сегодня Ionic-приложение будет 
      работоспособно на долгие-долгие годы вперёд. И никакая
      организация не сможет что-то там запретить или контролировать
      его (был бы камень в огород React Native, но в 
      феврале 2018 Facebook изменил лицензию React на MIT).

    ▪ Прекрасная архитектура

      Чистая, простая, функциональная. Ionic сконструирован
      работать и отображаться прекрасно прямо из коробки,
      на всех поддерживаемых платформах. Core-компоненты,
      типографика, интерактивные парадигмы и красивая
      и расширяемая базовая тема.

    ▪ Простота

      Ionic изначально разрабатывался таким образом, чтобы
      создание Ionic-приложений было лёгким и приятным делом,
      и любой специалист по веб-разработке мог быстро вникнуть
      и приступить к делу.

  • Ionic является open source проектом с лицензией MIT

    Ionic Framework является на 100% open source проектом,
    с лицензией MIT. Это означает, что его можно использовать
    в личных и коммерческих проектах бесплатно.

  • Про Ionic CLI

    Ionic CLI, это инструмент для быстрого создания
    новых Ionic-приложений из шаблонов, а также,
    в нём есть ряд полезных во время разработки оных команд.

    В нём также есть dev-сервер, инструменты для сборки 
    и отладки, и много чего ещё.

    Если у вас Ionic Pro, вы можете использовать CLI для
    экспорта кода и взаимодействия с вашим pro-аккаунтом
    через API.

  • О совместимости с фреймворками

    Ionic < 4 был заточен под Angular, без которого
    с ним нельзя было работать.

    А Ionic >= 4 перестал зависеть от Angular. Теперь
    с ним можно работать хоть вообще без фреймворков,
    хоть с тем же Vue или React, или любым другим
    фреймворком или библиотекой.

    То есть, теперь, Ionic превратился в независимую
    библиотеку.

    ▪ Ionic v4 и JavaScript

      Главной задачей при разработке Ionic v4 было убрать
      зависимость от Angular. Сделать так, чтобы 
      core-компоненты могли работать независимо, просто
      как обычный JS.

      В том время, как работа через фреймворки может быть
      удобна для разработки больших приложений большими
      командами, теперь возможно быстренько, местечково, 
      где-то там заюзать Ionic по-мелочи.

    ▪ Ionic v4 и Angular

      Angular сделал Ionic великим. В том время, как
      core-компоненты (как описано выше), в v4 были
      сделаны независимыми, пакет @ionic/angular делает
      интеграцию с инфраструктурой Angular очень простой.

      @ionic/angular включает всю функциональность, которую
      Angular-разработчики ожидают, и интегрируется с core-
      библиотеками Angular, вроде Angular router.

    ▪ Будут билды Ionic v4 для Vue и React

      Поддержка для других фреймворков ожидается в будущем
      релизе. В настоящий момент, разрабатываются 
      биндинги для Vue и React.

  • О v4

    Ionic Framework V4 является важным шагом вперёд.
    Есть существенные изменения, по сравнению с предыдущими 
    версиями, в лежащих в его основе технологиях. Новая
    версия сфокусирована на производительности, совместимости,
    и расширяемости.

    Хотя Ionic v4 имеет пакет @ionic/angular, позволяющий
    легко тесно интегрировать Ionic и Angular, он приобрел
    независимость от фреймворков. По сути, стал библиотекой,
    которую можно использовать хоть на чистом js, хоть с любым
    фреймворком.

    Переход на веб-стандарты позволил Ionic V4 полагаться
    скорее на то, на что способны браузеры, чем на то, на 
    что способен код из Angular.

    На практике, это означает мЕньшее время загрузки, 
    лучшая производительность, и меньше лишнего кода.

  • Про Ionic Pro

    Чтобы помочь управлять Ionic-приложениями на протяжении
    всего их жизненного цикла, команда Ionic предлагает
    платное решение Ionic Pro.

    Это платное решение идёт отдельно от open source 
    фреймворка Ionic, последний можно легко использовать
    без Pro.

    Ionic Pro помогает разработчикам и командам наблюдать
    и отслеживать ожибки во время выполнения кода, выполнять
    нативные сборки приложений в облаке, обновлять Ionic-
    приложения через push'и через личный кабинет.

    Чтобы получить Pro, нужно создать Ionic Account.
    Начать можно с бесплатного плана Starter.
    Ну, и можно перейти на какой-нибудь из платных планов,
    которые дают больше возможностей.

  • Экосистема Ionic

    Ionic Framework активно разрабатывается и поддерживается
    на полный рабочий день core-командой, а развитие экосистемы
    направляется международным сообществом разработчиков и 
    кантрибьютеров. Разработчики, большие и малые компании
    используют Ionic для создания прекрасных приложений,
    которые работают везде.

> Основные понятия

  • Введение в основные понятия

    Для новичков в разработке на Ionic, будет полезно
    увидеть общую картину того, как тут всё работает - 
    ключевую философию, концепты и инструменты в основе
    проекта.
    Прежде, чем погружаться в сложные темы, сначала
    следует понять основы Ionic Framework, и как он
    работает.

  • UI компоненты

    Ionic является библиотекой UI компонент, каждая из 
    которых может быть переиспользована, и которые
    используются в приложении, как строительные блоки.

    Компоненты Ionic построены на основе веб стандартов,
    с использованием HTML, CSS и JavaScript.

    Не смотря на то, что все компоненты собраны заранее,
    они изначально сделаны так, чтобы их можно было
    легко кастомизировать. Благодаря этому, для каждого
    приложения необходимые компоненты можно "допилить"
    индивидуально.

    Также, можно все компоненты глобально привязать к 
    теме, и потом легко менять тему всего приложения
    (подробнее о темах см.ниже).

  • Непрерывность платформы: адаптация и мимикрия core-компонент под платформы

    Platform Continuity - встроенная фича Ionic Framework,
    позволяющая разработчикам приложений использовать один
    и тот же код для разных платформ.

    Каждый компонент в Ionic адаптирует свой внешний вид
    и поведение в зависимости от того, на какой платформе
    он запущен в настоящий момент.

    Например, устройства Apple, такие как iPhone и iPad,
    используют свой iOS design language. 
    Аналогично, на устройствах под управлением Android
    используется язык дизайна от Google - Material Design.

    Если вы скачаете Ionic-приложение из Apple App Store,
    Ionic применит к нему тему для iOS. А если скачаете
    из Google Play, то тему для Android Material Design.

    Для платформы pwa Ionic по умолчания будет применять
    тему Material Design.

    Наконец, всё это дело можно настраивать, какие темы
    для каких платформ применять.

  • Навигация, навигационные стеки, параллельная навигация

    Традиционные сайты используют линейную историю. Это значит,
    что пользователь переходит по ссылкам на сайте вперёд,
    а может нажимать на кнопку "назад" и возвращаться в обратном
    порядке. Грубо говоря, имеется лишь 1 "навигационный стек".

    Ionic-приложения в этом плане могут сделать следующий шаг,
    и обеспечить параллельную навигацию. Это значит, что можно
    иметь >= 1 навигационного стека, и переключаться между ними
    в любой момент.

    Для приложений, разрабатываемых на Angular и ionic/angular, 
    авторы рекомендуют использовать Angular Router. Предыдущая
    версия Ionic поставлялась со своим собственным, встроенным
    роутером. Однако, от этой практики отказались, так что
    используйте роутер от фреймворка.

  • Доступ к нативным платформам

    Удивительным следствием того факта, что Ionic построен
    на основе веб-технологий, является то, что Ionic-приложения
    может работать практически на любой платформе:

      ▪ desktop computers
      ▪ phones
      ▪ tablets
      ▪ cars
      ▪ refrigerators
      ▪ ...

    Один и тот же код Ionic-приложения может работать на 
    многих платформах благодаря тому, что он основан на
    веб-стандартах и общем API, который есть на многих
    платформах.

    Одним из наиболее частых случаев использования Ionic,
    это сделать разом приложение, которое можно скачивать
    как из App Store, так и из Play Store. Благодаря тому,
    что и SDK для iOS, и SDK для Android предоставляют
    возможность использовать так называемые "web views",
    которые могут отрисовывать любое Ionic-приложение,
    это становится возможным.

    Такие проекты, как Capacitor и Cordova обычно используются,
    чтобы дать Ionic-приложениям доступ к нативным платформам.
    На практике это значит, что разработчики могут быстренько
    запилить веб-приложение, имея при этом доступ ко всем нативным
    API (таким как камера, GPS, и т.д.), и завернуть его в 
    iOS и Android приложение, и залить в сторы.

  • Архитектура

    Ionic-приложения структурированы вокруг идее о компонентах.
    Используя любой фронтенд-фрейморк по выбору, вы можете
    строить приложение из компонент, как кирпичный домик. 
    Вообще, сейчас все топовые фронтенд-фреймворки по
    такому же принципу и работают.
    Высокоуровневые "views", это лишь компоненты, которые 
    доступны по URL.

  • Темы

    В ядре, Ionic Framework построен с использованием CSS.
    Это позволяет нам использовать преимущества, которые 
    обеспечивают css-переменные. Это даёт возможность 
    невероятно легко разрабатывать приложение, которое 
    и выглядит прекрасно, и соответствует веб-стандартам.

    Из коробки авторы предлагают набор цветов для кастомизации
    тем. Но никто не мешает вообще все перетряхнуть, и 
    кастомизировать так, как больше нравится, как больше
    подходит для конкретной компании.

    Подробнее про темы смотрете в отдельной главе.

> Поддержка браузерами

  Изначальной целью Ionic сделать простым делом разработку
  мобильных приложений с использованием веб-технологий:
  html, css, js. Это даёт возможность Ionic-приложению
  с одним и тем же кодом работать на многих устройствах, 
  операционных системах, и во многих браузера.

  • Поддержка браузерами на mobile

    ▪ Что с поддержкой у Ionic

      Поддержка браузерами на мобильных платформах была
      в центре внимания, и тщательно тестировалась на
      следующих операционных системах:

      ▪ Android >= 4.4
      ▪ iOS >= 10

    ▪ Что с поддержкой у Capacitor

      Надо также учитывать ограничения Capacitor, если использовать
      Ionic в связке с ним. Capacitor поддерживает следующие системы:

      ▪ Android >= 5.0
      ▪ iOS >= 10

      Так что, по факту, на работу приложения на Capacitor + Ionic
      на Android 4.* рассчитывать не стоит.

    ▪ Что с поддержкой у Cordova

      Надо также учитывать ограничения Capacitor, если использовать
      Ionic в связке с ней. Cordova поддерживает следующие системы:

      ▪ Android >= 4.0.3
      ▪ iOS >= 8

    ▪ Приложение на Capacitor и Ionic не пойдёт на 13.2% всех Android-устройств
    
      Это данные на июль 2018.
      Основаны на данных о распространении версий Android от Google

        https://developer.android.com/about/dashboards/ 

      Готовы ли мы терять 13.2% рынка всех android-устройств?

      p.s. 

        На январь 2018 эта цифра составляла 19.3%. То есть, 
        за 7 месяцев снижение на 5.9%.

    ▪ Приложение на Cordova и Ionic не пойдёт на 0.5% всех Android-устройств

      Это данные на июль 2018.
      Основаны на данных о распространении версий Android от Google

        https://developer.android.com/about/dashboards/ 

    ▪ Краткие выводы: Cordova или Capacitor?

      1. Если тенденция снижения доли устройств под управлением
         Android < 5.0.0 продолжится, и она будет падать
         примерно на 1% в месяц, то уже к новому году она
         сократится примерно до 8%, а к следующему лету
         до 2-3%.

      2. Для экспериментов со стартапами сейчас подойдёт
         и Capacitor. К моменту релиза MVP ближайшего стартапа,
         что произойдёт не ранее, чем через 3-6 месяцев, 
         доля устройств под управлением Android < 5.0.0 
         должна будет сократиться примерно до 8%, и их
         потерю на старте начинающий стартап вполне в силе
         пережить. Да и кроме того, если человек не в состоянии
         обновить свой древний смартфон на Android 4.*, то
         вероятность того, что он будет пользоваться услугами
         нашего сервиса мала.

  • Поддержка браузерами на desktop

    Ionic работает прекрасно не только на мобильных устройствах,
    но, поскольку он основан на веб-технологиях, то и в 
    браузерерах на desktop чувствует себя отлично:

    ▪ Chrome
    ▪ Safari
    ▪ Edge
    ▪ Firefox

    Вообще-то, Capacitor ещё позволяет собирать 
    electron-приложения

> Разъяснение за версии Ionic

  • Используется SemVer (major.minor.patch)

    Ionic Framework следует соглашению о семантическом 
    версионировании SevVer:

      major.minor.path

    Major-изменения вносят обратно-несовместимые изменения
    Minor-изменения вносят обратно-совместимые изменения.
    Path-изменения просто фиксят какие-то баги.

  • Расписание релизов

    • Major Release

      Такие релизы выходят, когда необходимо внести кардинальные
      изменения в API. Мажорные релизы будут выходить каждые
      6 месяцев, и будут обратно-совместимыми для большинства
      разработчиков. Несколько кандидатов на релиз будут 
      публиковаться до релиза, чтобы сообщество могло оценить их,
      и выбрать победителя на релиз.

    • Minor Release

      Минорные релизы публикуются, когда добавляется новая
      фича, или вносятся какие-то изменения в API (обратно-
      совместимые). Команда Ionic будет тщательно тестировать
      любые изменения, так что можете быть уверены, что
      после обновления ничего не сломается. Однако, с новым
      кодом потенциально идут новые проблемы.

      Минорные релизы будут выходить каждый месяц, если
      для их выпуска будет достаточно основания.

    • Patch Release

      Будут выходить сразу после того, как какой-нибудь баг
      исправлен. При этом, без изменений в API, и без 
      обратно-несовместимых изменений.

      Планируется выпускать такие релизы каждую неделю,
      или чаще, если надо очень быстро поправить какой-то
      баг.

      Patch-релизы всегда будут публиковаться до minor-релизов,
      чтобы удостовериться, что первые исправили соответствующие
      баги до того, и не создали новых, до того, как добавлять
      новую фичу.

  • Лог изменений

    Чтобы узнать, какие изменения внёс тот или иной релиз,
    пройдите в changlog.

> Поддержка

  • Long Term Support (LTS)

    Для major-релизов исправление багов производится в 
    течение 2-х лет, а проблем с безопасностью - 3-х лет.

    Это означает следующее.
    Допустим, есть нынешний major-релиз, это 4.*.*.
    И вот, сегодня, релизнулся 5.0.0.
    С этого момента, начинается отсчёт времени в условном
    таймере до смерти 4.*.* - ещё 2 года с этого момента
    будут фиксить баги, и 3 года - проблемы с безопасностью.

    До 4.0 LTS-версий фреймворка НЕ существует.
    Это - первая.

  • Платные опции поддержки

    Ionic предлагает платную поддержку для команд и организаций.
    Но она, в основном, никому не нужна, по мнению автора
    этой методички =)


А3. Установка Ionic
--------------------------------------

  # Установка через Ionic CLI

    ▪ Установка Ionic CLI
    ▪ Создание Ionic-приложения из шаблонов

  # Подключение через CDN

    ▪ Подключение Ionic Framework через CDN
    ▪ Подключение Ionicons из CDN

  # Настройка среды окружения

    ▪ Node & NPM
    ▪ Git

  # Настройка среды для разработки под iOS

    ▪ Xcode
      ▪ Настройка Development Team
      ▪ Создание симулятора iOS

    ▪ ios-sim & ios-deploy

  # Настройка среды для разработки под Android

    ▪ Java
    ▪ Gradle
    ▪ Android Studio
      ▪ Установка Android Studio
      ▪ Установка Android SDK
      ▪ Настройка CLI
      ▪ Создание Android Virtual Device
      ▪ Настройка Android Device

--------------------------------------

> Установка через Ionic CLI

  Ionic-приложения создаются и разрабатываются преимущественно
  с помощью Ionic CLI. Оный является предпочтительным способом
  установки Ionic, и предлагает много полезных в разработке
  инструментов. Через него также можно запускать приложение,
  и взаимодействовать с Ionic Pro.

  • Установка Ionic CLI

    Прежде, чем продолжить, убедитесь, что последние версии
    NodeJS и NPM установлены.

    Затем можно установить Ionic CLI глобально:

      sudo npm install -g @ionic/core

  • Создание Ionic-приложения из шаблонов

    Создать Ionic-приложение можно, использовав один из 
    шаблонов, либо пустой шаблон. Три наиболее популярных
    варианта, говорящих сами за себя:

    ▪ blank
    ▪ tabs
    ▪ sidemenu

    Пример:

      ionic start myApp tabs

    Подробнее про это читайте в главе про создание и 
    разработку Ionic-приложения.

> Подключение через CDN

  Поскольку Ionic Framework состоит из веб-компонент,
  возможно просто подключить его в HTML-файл через
  CDN.

  • Подключение Ionic Framework через CDN

    Рекомендуется использовать unpgk. Рекомендуется
    подключать Ionic в <head></head> в html-файле:

      <script src="https://unpkg.com/@ionic/core@latest/dist/ionic.js"></script>

    Подключив его таким образом, возможно использовать 
    компоненты Ionic без установки чего-либо.

  • Подключение Ionicons из CDN

    Если вы используете Ionic, Ionicons идут в комплекте,
    и их не надо отдельно устанавливать.

    Но если вы хотите использовать Ionicons без Ionic,
    то можете просто подключить их через CDN:

      <script src="https://unpkg.com/ionicons@4.0.0/dist/ionicons.js"></script>

> Настройка среды окружения

  Для работы с Ionic нужны NodeJS и NPM.

  • Node & NPM

    Почти все современные инструменты для JS-проектов 
    используют NodeJS. Ionic не исключение. Установите
    последние версии NodeJS и NPM.

    После установки проверьте версии, загуглите в инете,
    какие последние, и сравните.

      node -v
      npm -v

  • Git

    Хотя Git не необходим, рекомендуется установить 
    его в последней версии. Чтобы проверить версию:

      git -v

> Настройка среды для разработки под iOS

  Чтобы разрабатывать под iOS, надо поднастроить среду.
  Разрабатывать под iOS можно только на MacOS.
  Так что, если у вас Windows или Linux, виртуальная
  машина с MacOS вам в помощь.

  • Xcode

    Xcode, это IDE для создания нативных iOS-приложений.
    Она включает в себя iOS SDK и Xcode CLI.
    Xcode можно скачать в магазине приложений App Store.
    Для этого понадобится аккаунт Apple.

    ▪ Настройка Development Team

      Все iOS-приложения должны быть подписаны, даже те,
      которые в разработке. К счастью, Xcode позволяет 
      легко делать это автоматически. Для этого нужен
      лишь Apple ID.

      Откройте Xcode и идите в Xcode -> Preferences -> Accounts.
      Добавьте Apple ID, если его там нет ещё.
      Залогинившись, в списке команд появится ваша Personal Team.

    ▪ Создание симулятора iOS

      Симулятор iOS эмулирует iOS-устройства на MacOS.
      Вот официальная инструкция от Apple, как его 
      настроить:

        https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/simulator_help_topics/Chapter/Chapter.html

      В принципе, это легко. Пройдите в Window -> Devices and
      Simulators. Создайте, например, симулятор iPhone X.

  • ios-sim & ios-deploy

    ios-sim и ios-deploy, это инструменты для деплоя
    приложения в iOS-симулятор и iOS-устройства в 
    процессе разработки.

    Их можо установить глобально через npm:

      npm install -g ios-sim
      npm install -g ios-deploy

> Настройка среды для разработки под Android

  Чтобы разрабатывать под Android, надо поднастроить среду.
  В отличие от разработкипод iOS, под Android можно
  разрабатывать на Windows, MacOS и Linux.

  • Java

    Нативные приложения под Android компилируются с помощью
    Java. Скачайте JDK8 (JDK10 ещё слишком новый на 07.2018) с 
    официального сайта:

      http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

  • Gradle

    Gradle это инструмент для сборки, используемый в 
    Android-приложениях, и может быть установлен отдельно.

    См.официальный сайт с инструкцией, где описана его
    установка:

      https://gradle.org/install/

  • Android Studio

    Android Studio, это IDE для создания нативных 
    Android-приложений. Он включает Android SDK, который
    понадобится настроить для использования в командной
    строке.

    ▪ Установка Android Studio

      Качнуть Android Studio можно бесплатно с официального
      сайта:

        https://developer.android.com/studio/

    ▪ Установка Android SDK

      Откройте Android Studio. Оно само заметит, что
      требуется установить SDK. На экране SDK Components
      Setup, который сам появится, установите SDK. Обратите
      внимание на Android SDK Locatin.

      Когда SDK установитяс, закройте Android Studio.
      
      На будущее, управлять версиями Android SDK можно
      в Android Studio, в меню Configure -> SDK Manager.

    ▪ Настройка CLI

      Android SDK поставляется с полезным CLI. Но прежде, 
      чем его можно будет использовать, надо установить
      кое-какие переменные среды.

      Как это сделать на Windows, погуглите в инете.

    ▪ Создание Android Virtual Device

      Android Virtual Devices (AVDs) - образы, которые 
      эмулятор Android использует для запуска Android OS.
      Подробнее про это см.официальную документацию:

        https://developer.android.com/studio/run/managing-avds

      Вообще, это не сложно. Пройдите в Tools -> AVD Manager.
      Нажмите Create Virtual Device, и дальше всё понятно.

      Когда AVD создан, запустите его в эмуляторе.
      Во время разработки можно держать эмулятор включенным.

    ▪ Настройка Android Device

      Для разработки можно использовать не только эмулятор,
      но и настоящее устройство с Android. Но для начала
      это устройство надо подготовить. Ниже описан быстрый
      способ, но подробнее можете глянуть тут:

        https://developer.android.com/studio/run/device

      Итак, настраиваем устройство:

      1. Включить USB Debugging на устройстве

        Откройте Settings. Перейдите в Developer Options,
        и включите USB debugging.

        Саму Developer Options ещё надо включить, если она
        уже не включена:

          Настройки -> Система -> О телефоне -> 7 раз тап по "Номер сборки"

      2. Убедиться, что устройство имеет разрешение подключиться к компьютеру

        На MacOS никаких доп.усилий не требуется.
        Для Windows, установите OEM USB Drivers.

          https://developer.android.com/studio/run/oem-usb

      Затем подключите устройство к компьютеру через USB,
      и выполните команду:

        adb devices

      Будет выведен список подключенных устройств, и ваше
      должно быть в нём.


А4. Процесс разработки Ionic-приложения
--------------------------------------

  # Старт нового Ionic-приложения /Starting/

    ▪ Команда ionic start
    ▪ Типы шаблонов

  # Структура проекта и добавление ресурсов через CLI /Scaffolding/ 

    ▪ Основной код твоего приложения будет в src/
    ▪ Структура проекта (на примере проекта на angular)
    ▪ Генерирование новых фич

  # Адаптация и под браузер, и под приложения /Cross Platform/
  # Упрощённый запуск на устройствах через Ionic DevApp /Running Overview/ 
  # Как деплоить на iOS-платформу с помощью Cordova/Capacitor /Running on iOS/
  # Как деплоить на Android-платформу с помощью Cordova/Capacitor /Running on Android/
  # Организация unit-тестов /testing/
  # Подробнее про Web View /Web View/
  # Про Ionic Storage /Ionic Storage/
  
--------------------------------------

> Старт нового Ionic-приложения /Starting/

  • Команда ionic start

    Создать новое Ionic-приложение очень просто. Это
    можно сделать из командной строки командой:

      ionic start

    которая запросит инфу об имени проекта, и какой шаблон
    использвоать.

    В принципе, можно избежать интерактивных запросов и 
    указать все параметры сразу:

      ionic start myApp tabs --type=angular

    где myApp - название, tabs - тип, angular - фреймфорк.

  • Типы шаблонов 

    ▪ tabs
    ▪ sidemenu
    ▪ blank

    Посмотреть список всех доступных шаблонов можно
    командой:

      ionic start --list

    Эти шаблоны представляют собой отличное начало для
    любого приложения, и включают все лучшие практики
    для того, чтобы было потом легко поддерживать
    и масштабировать код.
    
> Структура проекта и добавление ресурсов через CLI /Scaffolding/

  • Основной код твоего приложения будет в src/

    Создав приложение из шаблона с помощью Ionic CLI, следующим
    шагом будет работа над фичами и компонентами. Большая
    часть разработки приложения будет проходить в папке src/

  • Структура проекта (на примере проекта на angular)

    src/
      app/                    | здесь основной код приложения
        components/
        pages/
        services/
        app.component.html
        app.component.spec.ts
        app.component.ts
        app.module.ts
        app-routing.module.ts
      assets/                 | папка для всяких ресурсов, типа картинки/шрифты/итп
      environments/
      theme/
      global.scss
      index.html              | точка входа в приложение
      karma.conf.js           | конфиг Angular'овского фреймворка для тестов
      main.ts
      polyfills.ts
      test.ts
      tsconfig.app.json
      tsconfig.spec.json

  • Генерирование новых фич

    Ionic CLI, с помощью коменды ionic generate, может
    генерировать различные ресурсы в проекте.

    Чтобы посмотреть, что именно оно может генерировать,
    запустите эту команду без аргументов:

      ionic generate
      ionic g         | сокращённый вариант

    Когда вы выберете, что именно хотите сгенерировать,
    Ionic запросит у вас name. Крайне рекомендуется
    префиксить name путём относительно корня проекта,
    чтобы ресурс генерировался там, где положено
    (почему-то Ionic CLI не может это сам делать)
   
      Например:

        pages/My New Page         |
        pages/tabs/Main Tab       | любой уровень вложенности
        pages/tabs/my/Main Tab    | 
      
      вместо просто названия без префикса:

        My New Page

    Чтобы избежать интерактивных запросов, можно указать
    name и type сразу в команде:

      ionic g page "pages/User Detail"

    где page - тип ресурса, "pages/User Detail" - где его создать.
    Ionic CLI использует за кадром инструменты фреймворка,
    чтобы оставаться максимально близко к лучшим практикам.
    Для ionic/angular, под капотом используется Angular CLI.

    После создания файлов и каталогов для новой страницы,
    CLI также автоматически обновит конфигурацию роутера,
    чтобы включить туда новую страницу. Это уменьшает
    кол-во работы, которую требуется проделать вручную.

    Справку про ionic g моно посмотреть так:

      ionic g --help





