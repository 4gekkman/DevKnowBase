////=================================================////
////                                                 ////
////                    Ionic 4.*                    ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  # Ionic

    • Сайт
      
        https://ionicframework.com

    • Документация

      ▪ Официальные доки (пока что v3.*)

        https://ionicframework.com/docs

      ▪ Доки для beta v4

        https://beta.ionicframework.com/docs/

    • Репозиторий и документация для Ionic 4.*

      ▪ Ionic Core 4.0.0
          https://github.com/ionic-team/ionic/blob/master/core/README.md

      ▪ Ionic 4.* Docs
          https://github.com/ionic-team/ionic-docs

    • Маркет (плагины, темы, стартовые приложения)
    
        https://market.ionicframework.com

    • Магазин аксесуаров (футболки, наклейки и прочее)

        https://shop.ionicframework.com

    • Прогресс разработки ionic 4.*

        https://github.com/ionic-team/ionic/milestones

    • Форум и чат

        https://forum.ionicframework.com/
        http://ionicworldwide.herokuapp.com/

    • Twitter

      https://twitter.com/Ionicframework

    • Статьи про использование Ionic 4 + Vue

      ▪ Ionic 4 + Capacitor tutorials list #1
          https://ionictheme.com/ionic4-capacitor-tutorials-list-1/

      ▪ [02.06.2018] Building Mobile Apps With Capacitor And Vue.js
          https://www.smashingmagazine.com/2018/07/mobile-apps-capacitor-vue-js/

      ▪ [28.05.2018] Using the Capacitor in Vue.js app
          http://akhromieiev.com/tutorials/using-capacitor-in-vue-js-app/

      ▪ [15.02.2018]Ionic 4 Tutorial with Vue
          https://www.techiediaries.com/ionic-vue/

      ▪ [16.01.2018]Using Ionic 4 Components in Your Vue.js Apps
          https://alligator.io/vuejs/vue-ionic/

    • Демо-приложения на capacitor + vue + ionic 4

      ▪ A Mobile Demo App with Vue, Capacitor and Ionic 4 Components
          https://github.com/techiediaries/vue-capacitor-ionic-app

    • Блог

        https://blog.ionicframework.com/

    • Интересные посты в блоге

      ▪ [24.07.2018] Announcing the Ionic 4 Beta
          https://blog.ionicframework.com/announcing-ionic-4-beta/

      ▪ [23.07.2018] Announcing Ionic Identity Vault: Secure Biometric Authentication for Your Mobile App
          https://blog.ionicframework.com/announcing-ionic-identity-vault-secure-biometric-authentication-for-your-mobile-app/

      ▪ [22.06.2018] Using TestFlight for User Testing with Ionic
          https://blog.ionicframework.com/using-testflight-for-user-testing-with-ionic/

      ▪ [21.05.2018] Announcing Ionicons v4!
          https://blog.ionicframework.com/announcing-ionicons-v4/

      ▪ [18.04.2018] Ionic Semantic Versioning, Release Schedule and LTS
          https://blog.ionicframework.com/ionic-semantic-versioning-release-schedule-and-lts/

      ▪ [16.04.2018] Introducing A New Guide to Progressive Web Apps
          https://blog.ionicframework.com/introducing-a-new-guide-to-progressive-web-apps/

      ▪ [05.04.2018] Ionic at VueConf
          https://blog.ionicframework.com/ionic-at-vueconf/

      ▪ [20.03.2018] Using Ionic Deploy to Beta Test New Features
          https://blog.ionicframework.com/using-ionic-deploy-to-beta-test-new-features/

      ▪ [15.03.2018] Improved Perceived Performance with Skeleton Screens
          https://blog.ionicframework.com/improved-perceived-performance-with-skeleton-screens/

      ▪ [27.02.2018] Announcing Capacitor 1.0.0 Alpha
          https://blog.ionicframework.com/announcing-capacitor-1-0-0-alpha/

      ▪ [12.02.2018] Customizing Ionic Apps for Web & Mobile
          https://blog.ionicframework.com/customizing-ionic-apps-for-web-mobile/

      ▪ [16.01.2018] Announcing the Ionic PWA Toolkit Beta
          https://blog.ionicframework.com/announcing-the-ionic-pwa-toolkit-beta/

      ▪ [31.10.2017] Announcing Ionic DevApp
          https://blog.ionicframework.com/announcing-ionic-devapp/

      ▪ [25.10.2017] Ionic: 2017-18 Roadmap
          https://blog.ionicframework.com/ionic-2017-18-roadmap/

      ▪ [04.10.2017] WKWebView for All: A new webview for Ionic
          https://blog.ionicframework.com/wkwebview-for-all-a-new-webview-for-ionic/

      ▪ [18.09.2017] The end of Framework Churn
          https://blog.ionicframework.com/the-end-of-framework-churn/

  # Распределение версий на Android
  
    https://developer.android.com/about/dashboards/        


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Теоретические основы Ionic 4.*

    А1. Как пользоваться документацией Ionic 4.*
    А2. Введение в Ionic
    А3. Установка Ionic
    А4. Процесс разработки Ionic-приложения
    А5. Компоненты Ionic'а
    А6. Организация layout'а в Ionic-приложении

  # X.  Практика и наработки

    X1. 


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Как пользоваться документацией Ionic 4.*
--------------------------------------
Подоглавление:

  # Ссылки
  # Как обстоят дела с документацией на конец июля 2017
  # Как пользоваться документацией, пока она не опубликована
  
--------------------------------------

> Ссылки

  • Официальная документация Ionic 4.*
      https://github.com/ionic-team/ionic-docs

  • Ionic v4 component preview app
      https://github.com/ionic-team/component-preview

> Как обстоят дела с документацией на конец июля 2017

  Ionic v4 официально ещё не вышел.
  Документация официально нигде не опубликована.
  Текущея её версия лежит на github.

> Как пользоваться документацией, пока она не опубликована

  1. Сначала устанавливаем NodeJS и NPM, если ещё нет

    curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
    sudo apt-get install -y nodejs
    npm i npm@latest -g
    npm update npm -g

  2. Открываем свой рабочий linux-дистрибутив
  3. Создаём папку ionic в корне и переходим в неё.
  4. Клонируем репозиторий с доками в неё:

    git clone https://github.com/ionic-team/ionic-docs.git docs  

  5. Переходим в docs, и устанавливаем все npm-зависимости

    cd docs
    npm install

  6. Устанавливаем Ionic v4 component preview app

    Это приложение, которое используется в документации
    для демонстрации компонентов Ionica вживую, так сказать.

    Его нужно отдельно склонировать в папку 
    /ionic/component-preview-app

      cd /ionic
      git clone https://github.com/ionic-team/component-preview.git component-preview-app

    Дальше идём в склонированное приложение,
    устанавливаем зависимости и собираем его:

      cd /ionic/component-preview-app
      npm install
      npm run build

    Дальше копируем папку /ionic/component-preview-app/docs-www
    в /ionic/docs/src/content/component-preview-app/

    Если что, папка component-preview-app находится
    в .gitignore проекта, так что можно без опаски
    делать git pull

  7. Устанавливаем документы для API, CLI, Native, Storage, Component preview

    cd /ionic/docs
    npm run api-docs

  8. Собираем проект

    npm run build

  9. Запускаем сервак

    npm run start

  10. Заходим в браузер и видим доки по адресу 

    localhost:3000/docs

  11. Периодически делаем git pull свежих изменений

    Разработчики Ionic периодически редактируют и
    обновляют доки, поэтому, пока ты их используешь
    в описанном выше режиме, надо их периодически
    обновлять.

    ▪ Обновление документации

      cd /ionic/docs
      git pull

      npm install
      npm run build

    ▪ Обновление Ionic v4 component preview app

      cd /ionic/component-preview-app
      git pull

      npm install
      npm run build

      Затем, копируем с заменой папку /ionic/component-preview-app/docs-www
      в /ionic/docs/src/content/component-preview-app/

    ▪ Обновление документов для API, CLI, Native, Storage, Component preview

      cd /ionic/docs
      git pull
      npm run api-docs
      npm run build


А2. Введение в Ionic
--------------------------------------

  # Что из себя представляет Ionic Framework?

    ▪ Общая информация об Ionic
    ▪ Какие цели преследовали авторы, создавая Ionic
      ▪ Кроссплатформенный
      ▪ Основан на веб-стандартах
      ▪ Прекрасная архитектура
      ▪ Простота
    ▪ Ionic является open source проектом с лицензией MIT
    ▪ Про Ionic CLI
    ▪ О совместимости с фреймворками
      ▪ Ionic v4 и JavaScript
      ▪ Ionic v4 и Angular
      ▪ Будут билды Ionic v4 для Vue и React
    ▪ О v4
    ▪ Про Ionic Pro
    ▪ Экосистема Ionic

  # Основные понятия

    ▪ Введение в основные понятия
    ▪ UI компоненты
    ▪ Непрерывность платформы: адаптация и мимикрия core-компонент под платформы
    ▪ Навигация, навигационные стеки, параллельная навигация
    ▪ Доступ к нативным платформам
    ▪ Архитектура
    ▪ Темы

  # Поддержка браузерами

    ▪ Поддержка браузерами на mobile
      ▪ Что с поддержкой у Ionic
      ▪ Что с поддержкой у Capacitor
      ▪ Что с поддержкой у Cordova
      ▪ Приложение на Capacitor и Ionic не пойдёт на 13.2% всех Android-устройств
      ▪ Приложение на Cordova и Ionic не пойдёт на 0.5% всех Android-устройств
      ▪ Краткие выводы: Cordova или Capacitor?

    ▪ Поддержка браузерами на desctop

  # Разъяснение за версии Ionic

    ▪ Используется SemVer (major.minor.patch)
    ▪ Расписание релизов
      ▪ Major Release
      ▪ Minor Release
      ▪ Patch Release
    ▪ Лог изменений

  # Поддержка

    ▪ Long Term Support (LTS)
    ▪ Платные опции поддержки

--------------------------------------

> Что из себя представляет Ionic Framework?

  • Общая информация об Ionic

    Ionic Framework - open source набор UI-инструментов для
    создания производительных, высококачественных мобильных
    и десктопных приложений, на основе веб-технологий
    (html, css, js).

    Ionic концентрируется на пользовательском интерфейсе
    (фронтенде), или на UI-взаимодействиях приложения 
    (элементы управления, взаимодействия, жесты, анимации).
    Его легко изучить, и легко использовать совместно
    с другими библиотеками или фреймворками, такими как
    Angular или Vue. Но можно обойтись и вообще без
    каких-либо других фронтенд-фреймворков.

    В настоящий момент, Ionic имеет официальную интеграцию
    с Angular, но авторы сообщают, что поддержка для 
    Vue и React в разработке.

  • Какие цели преследовали авторы, создавая Ionic

    ▪ Кроссплатформенный

      Пишем один код, одно приложение, которое работает
      на многих платформах, таких как iOS, Android, desctop,
      PWA (Progressive Web App)

      Девиз: "Write once, run anywhere".
             "Пишем одно приложение, которое работает везде".

    ▪ Основан на веб-стандартах

      Ionic основан на надёжных веб-технологиях: html, css, js.
      Поэтому, написанное сегодня Ionic-приложение будет 
      работоспособно на долгие-долгие годы вперёд. И никакая
      организация не сможет что-то там запретить или контролировать
      его (был бы камень в огород React Native, но в 
      феврале 2018 Facebook изменил лицензию React на MIT).

    ▪ Прекрасная архитектура

      Чистая, простая, функциональная. Ionic сконструирован
      работать и отображаться прекрасно прямо из коробки,
      на всех поддерживаемых платформах. Core-компоненты,
      типографика, интерактивные парадигмы и красивая
      и расширяемая базовая тема.

    ▪ Простота

      Ionic изначально разрабатывался таким образом, чтобы
      создание Ionic-приложений было лёгким и приятным делом,
      и любой специалист по веб-разработке мог быстро вникнуть
      и приступить к делу.

  • Ionic является open source проектом с лицензией MIT

    Ionic Framework является на 100% open source проектом,
    с лицензией MIT. Это означает, что его можно использовать
    в личных и коммерческих проектах бесплатно.

  • Про Ionic CLI

    Ionic CLI, это инструмент для быстрого создания
    новых Ionic-приложений из шаблонов, а также,
    в нём есть ряд полезных во время разработки оных команд.

    В нём также есть dev-сервер, инструменты для сборки 
    и отладки, и много чего ещё.

    Если у вас Ionic Pro, вы можете использовать CLI для
    экспорта кода и взаимодействия с вашим pro-аккаунтом
    через API.

  • О совместимости с фреймворками

    Ionic < 4 был заточен под Angular, без которого
    с ним нельзя было работать.

    А Ionic >= 4 перестал зависеть от Angular. Теперь
    с ним можно работать хоть вообще без фреймворков,
    хоть с тем же Vue или React, или любым другим
    фреймворком или библиотекой.

    То есть, теперь, Ionic превратился в независимую
    библиотеку.

    ▪ Ionic v4 и JavaScript

      Главной задачей при разработке Ionic v4 было убрать
      зависимость от Angular. Сделать так, чтобы 
      core-компоненты могли работать независимо, просто
      как обычный JS.

      В том время, как работа через фреймворки может быть
      удобна для разработки больших приложений большими
      командами, теперь возможно быстренько, местечково, 
      где-то там заюзать Ionic по-мелочи.

    ▪ Ionic v4 и Angular

      Angular сделал Ionic великим. В том время, как
      core-компоненты (как описано выше), в v4 были
      сделаны независимыми, пакет @ionic/angular делает
      интеграцию с инфраструктурой Angular очень простой.

      @ionic/angular включает всю функциональность, которую
      Angular-разработчики ожидают, и интегрируется с core-
      библиотеками Angular, вроде Angular router.

    ▪ Будут билды Ionic v4 для Vue и React

      Поддержка для других фреймворков ожидается в будущем
      релизе. В настоящий момент, разрабатываются 
      биндинги для Vue и React.

  • О v4

    Ionic Framework V4 является важным шагом вперёд.
    Есть существенные изменения, по сравнению с предыдущими 
    версиями, в лежащих в его основе технологиях. Новая
    версия сфокусирована на производительности, совместимости,
    и расширяемости.

    Хотя Ionic v4 имеет пакет @ionic/angular, позволяющий
    легко тесно интегрировать Ionic и Angular, он приобрел
    независимость от фреймворков. По сути, стал библиотекой,
    которую можно использовать хоть на чистом js, хоть с любым
    фреймворком.

    Переход на веб-стандарты позволил Ionic V4 полагаться
    скорее на то, на что способны браузеры, чем на то, на 
    что способен код из Angular.

    На практике, это означает мЕньшее время загрузки, 
    лучшая производительность, и меньше лишнего кода.

  • Про Ionic Pro

    Чтобы помочь управлять Ionic-приложениями на протяжении
    всего их жизненного цикла, команда Ionic предлагает
    платное решение Ionic Pro.

    Это платное решение идёт отдельно от open source 
    фреймворка Ionic, последний можно легко использовать
    без Pro.

    Ionic Pro помогает разработчикам и командам наблюдать
    и отслеживать ожибки во время выполнения кода, выполнять
    нативные сборки приложений в облаке, обновлять Ionic-
    приложения через push'и через личный кабинет.

    Чтобы получить Pro, нужно создать Ionic Account.
    Начать можно с бесплатного плана Starter.
    Ну, и можно перейти на какой-нибудь из платных планов,
    которые дают больше возможностей.

  • Экосистема Ionic

    Ionic Framework активно разрабатывается и поддерживается
    на полный рабочий день core-командой, а развитие экосистемы
    направляется международным сообществом разработчиков и 
    кантрибьютеров. Разработчики, большие и малые компании
    используют Ionic для создания прекрасных приложений,
    которые работают везде.

> Основные понятия

  • Введение в основные понятия

    Для новичков в разработке на Ionic, будет полезно
    увидеть общую картину того, как тут всё работает - 
    ключевую философию, концепты и инструменты в основе
    проекта.
    Прежде, чем погружаться в сложные темы, сначала
    следует понять основы Ionic Framework, и как он
    работает.

  • UI компоненты

    Ionic является библиотекой UI компонент, каждая из 
    которых может быть переиспользована, и которые
    используются в приложении, как строительные блоки.

    Компоненты Ionic построены на основе веб стандартов,
    с использованием HTML, CSS и JavaScript.

    Не смотря на то, что все компоненты собраны заранее,
    они изначально сделаны так, чтобы их можно было
    легко кастомизировать. Благодаря этому, для каждого
    приложения необходимые компоненты можно "допилить"
    индивидуально.

    Также, можно все компоненты глобально привязать к 
    теме, и потом легко менять тему всего приложения
    (подробнее о темах см.ниже).

  • Непрерывность платформы: адаптация и мимикрия core-компонент под платформы

    Platform Continuity - встроенная фича Ionic Framework,
    позволяющая разработчикам приложений использовать один
    и тот же код для разных платформ.

    Каждый компонент в Ionic адаптирует свой внешний вид
    и поведение в зависимости от того, на какой платформе
    он запущен в настоящий момент.

    Например, устройства Apple, такие как iPhone и iPad,
    используют свой iOS design language. 
    Аналогично, на устройствах под управлением Android
    используется язык дизайна от Google - Material Design.

    Если вы скачаете Ionic-приложение из Apple App Store,
    Ionic применит к нему тему для iOS. А если скачаете
    из Google Play, то тему для Android Material Design.

    Для платформы pwa Ionic по умолчания будет применять
    тему Material Design.

    Наконец, всё это дело можно настраивать, какие темы
    для каких платформ применять.

  • Навигация, навигационные стеки, параллельная навигация

    Традиционные сайты используют линейную историю. Это значит,
    что пользователь переходит по ссылкам на сайте вперёд,
    а может нажимать на кнопку "назад" и возвращаться в обратном
    порядке. Грубо говоря, имеется лишь 1 "навигационный стек".

    Ionic-приложения в этом плане могут сделать следующий шаг,
    и обеспечить параллельную навигацию. Это значит, что можно
    иметь >= 1 навигационного стека, и переключаться между ними
    в любой момент.

    Для приложений, разрабатываемых на Angular и ionic/angular, 
    авторы рекомендуют использовать Angular Router. Предыдущая
    версия Ionic поставлялась со своим собственным, встроенным
    роутером. Однако, от этой практики отказались, так что
    используйте роутер от фреймворка.

  • Доступ к нативным платформам

    Удивительным следствием того факта, что Ionic построен
    на основе веб-технологий, является то, что Ionic-приложения
    может работать практически на любой платформе:

      ▪ desktop computers
      ▪ phones
      ▪ tablets
      ▪ cars
      ▪ refrigerators
      ▪ ...

    Один и тот же код Ionic-приложения может работать на 
    многих платформах благодаря тому, что он основан на
    веб-стандартах и общем API, который есть на многих
    платформах.

    Одним из наиболее частых случаев использования Ionic,
    это сделать разом приложение, которое можно скачивать
    как из App Store, так и из Play Store. Благодаря тому,
    что и SDK для iOS, и SDK для Android предоставляют
    возможность использовать так называемые "web views",
    которые могут отрисовывать любое Ionic-приложение,
    это становится возможным.

    Такие проекты, как Capacitor и Cordova обычно используются,
    чтобы дать Ionic-приложениям доступ к нативным платформам.
    На практике это значит, что разработчики могут быстренько
    запилить веб-приложение, имея при этом доступ ко всем нативным
    API (таким как камера, GPS, и т.д.), и завернуть его в 
    iOS и Android приложение, и залить в сторы.

  • Архитектура

    Ionic-приложения структурированы вокруг идее о компонентах.
    Используя любой фронтенд-фрейморк по выбору, вы можете
    строить приложение из компонент, как кирпичный домик. 
    Вообще, сейчас все топовые фронтенд-фреймворки по
    такому же принципу и работают.
    Высокоуровневые "views", это лишь компоненты, которые 
    доступны по URL.

  • Темы

    В ядре, Ionic Framework построен с использованием CSS.
    Это позволяет нам использовать преимущества, которые 
    обеспечивают css-переменные. Это даёт возможность 
    невероятно легко разрабатывать приложение, которое 
    и выглядит прекрасно, и соответствует веб-стандартам.

    Из коробки авторы предлагают набор цветов для кастомизации
    тем. Но никто не мешает вообще все перетряхнуть, и 
    кастомизировать так, как больше нравится, как больше
    подходит для конкретной компании.

    Подробнее про темы смотрете в отдельной главе.

> Поддержка браузерами

  Изначальной целью Ionic сделать простым делом разработку
  мобильных приложений с использованием веб-технологий:
  html, css, js. Это даёт возможность Ionic-приложению
  с одним и тем же кодом работать на многих устройствах, 
  операционных системах, и во многих браузера.

  • Поддержка браузерами на mobile

    ▪ Что с поддержкой у Ionic

      Поддержка браузерами на мобильных платформах была
      в центре внимания, и тщательно тестировалась на
      следующих операционных системах:

      ▪ Android >= 4.4
      ▪ iOS >= 10

    ▪ Что с поддержкой у Capacitor

      Надо также учитывать ограничения Capacitor, если использовать
      Ionic в связке с ним. Capacitor поддерживает следующие системы:

      ▪ Android >= 5.0
      ▪ iOS >= 10

      Так что, по факту, на работу приложения на Capacitor + Ionic
      на Android 4.* рассчитывать не стоит.

    ▪ Что с поддержкой у Cordova

      Надо также учитывать ограничения Capacitor, если использовать
      Ionic в связке с ней. Cordova поддерживает следующие системы:

      ▪ Android >= 4.0.3
      ▪ iOS >= 8

    ▪ Приложение на Capacitor и Ionic не пойдёт на 13.2% всех Android-устройств
    
      Это данные на июль 2018.
      Основаны на данных о распространении версий Android от Google

        https://developer.android.com/about/dashboards/ 

      Готовы ли мы терять 13.2% рынка всех android-устройств?

      p.s. 

        На январь 2018 эта цифра составляла 19.3%. То есть, 
        за 7 месяцев снижение на 5.9%.

    ▪ Приложение на Cordova и Ionic не пойдёт на 0.5% всех Android-устройств

      Это данные на июль 2018.
      Основаны на данных о распространении версий Android от Google

        https://developer.android.com/about/dashboards/ 

    ▪ Краткие выводы: Cordova или Capacitor?

      1. Если тенденция снижения доли устройств под управлением
         Android < 5.0.0 продолжится, и она будет падать
         примерно на 1% в месяц, то уже к новому году она
         сократится примерно до 8%, а к следующему лету
         до 2-3%.

      2. Для экспериментов со стартапами сейчас подойдёт
         и Capacitor. К моменту релиза MVP ближайшего стартапа,
         что произойдёт не ранее, чем через 3-6 месяцев, 
         доля устройств под управлением Android < 5.0.0 
         должна будет сократиться примерно до 8%, и их
         потерю на старте начинающий стартап вполне в силе
         пережить. Да и кроме того, если человек не в состоянии
         обновить свой древний смартфон на Android 4.*, то
         вероятность того, что он будет пользоваться услугами
         нашего сервиса мала.

  • Поддержка браузерами на desktop

    Ionic работает прекрасно не только на мобильных устройствах,
    но, поскольку он основан на веб-технологиях, то и в 
    браузерерах на desktop чувствует себя отлично:

    ▪ Chrome
    ▪ Safari
    ▪ Edge
    ▪ Firefox

    Вообще-то, Capacitor ещё позволяет собирать 
    electron-приложения

> Разъяснение за версии Ionic

  • Используется SemVer (major.minor.patch)

    Ionic Framework следует соглашению о семантическом 
    версионировании SevVer:

      major.minor.path

    Major-изменения вносят обратно-несовместимые изменения
    Minor-изменения вносят обратно-совместимые изменения.
    Path-изменения просто фиксят какие-то баги.

  • Расписание релизов

    • Major Release

      Такие релизы выходят, когда необходимо внести кардинальные
      изменения в API. Мажорные релизы будут выходить каждые
      6 месяцев, и будут обратно-совместимыми для большинства
      разработчиков. Несколько кандидатов на релиз будут 
      публиковаться до релиза, чтобы сообщество могло оценить их,
      и выбрать победителя на релиз.

    • Minor Release

      Минорные релизы публикуются, когда добавляется новая
      фича, или вносятся какие-то изменения в API (обратно-
      совместимые). Команда Ionic будет тщательно тестировать
      любые изменения, так что можете быть уверены, что
      после обновления ничего не сломается. Однако, с новым
      кодом потенциально идут новые проблемы.

      Минорные релизы будут выходить каждый месяц, если
      для их выпуска будет достаточно основания.

    • Patch Release

      Будут выходить сразу после того, как какой-нибудь баг
      исправлен. При этом, без изменений в API, и без 
      обратно-несовместимых изменений.

      Планируется выпускать такие релизы каждую неделю,
      или чаще, если надо очень быстро поправить какой-то
      баг.

      Patch-релизы всегда будут публиковаться до minor-релизов,
      чтобы удостовериться, что первые исправили соответствующие
      баги до того, и не создали новых, до того, как добавлять
      новую фичу.

  • Лог изменений

    Чтобы узнать, какие изменения внёс тот или иной релиз,
    пройдите в changlog.

> Поддержка

  • Long Term Support (LTS)

    Для major-релизов исправление багов производится в 
    течение 2-х лет, а проблем с безопасностью - 3-х лет.

    Это означает следующее.
    Допустим, есть нынешний major-релиз, это 4.*.*.
    И вот, сегодня, релизнулся 5.0.0.
    С этого момента, начинается отсчёт времени в условном
    таймере до смерти 4.*.* - ещё 2 года с этого момента
    будут фиксить баги, и 3 года - проблемы с безопасностью.

    До 4.0 LTS-версий фреймворка НЕ существует.
    Это - первая.

  • Платные опции поддержки

    Ionic предлагает платную поддержку для команд и организаций.
    Но она, в основном, никому не нужна, по мнению автора
    этой методички =)


А3. Установка Ionic
--------------------------------------

  # Установка через Ionic CLI

    ▪ Установка Ionic CLI
    ▪ Создание Ionic-приложения из шаблонов

  # Подключение через CDN

    ▪ Подключение Ionic Framework через CDN
    ▪ Подключение Ionicons из CDN

  # Настройка среды окружения

    ▪ Node & NPM
    ▪ Git

  # Настройка среды для разработки под iOS

    ▪ Xcode
      ▪ Настройка Development Team
      ▪ Создание симулятора iOS

    ▪ ios-sim & ios-deploy

  # Настройка среды для разработки под Android

    ▪ Java
    ▪ Gradle
    ▪ Android Studio
      ▪ Установка Android Studio
      ▪ Установка Android SDK
      ▪ Настройка CLI
      ▪ Создание Android Virtual Device
      ▪ Настройка Android Device

--------------------------------------

> Установка через Ionic CLI

  Ionic-приложения создаются и разрабатываются преимущественно
  с помощью Ionic CLI. Оный является предпочтительным способом
  установки Ionic, и предлагает много полезных в разработке
  инструментов. Через него также можно запускать приложение,
  и взаимодействовать с Ionic Pro.

  • Установка Ionic CLI

    Прежде, чем продолжить, убедитесь, что последние версии
    NodeJS и NPM установлены.

    Затем можно установить Ionic CLI глобально:

      sudo npm install -g @ionic/core

  • Создание Ionic-приложения из шаблонов

    Создать Ionic-приложение можно, использовав один из 
    шаблонов, либо пустой шаблон. Три наиболее популярных
    варианта, говорящих сами за себя:

    ▪ blank
    ▪ tabs
    ▪ sidemenu

    Пример:

      ionic start myApp tabs

    Подробнее про это читайте в главе про создание и 
    разработку Ionic-приложения.

> Подключение через CDN

  Поскольку Ionic Framework состоит из веб-компонент,
  возможно просто подключить его в HTML-файл через
  CDN.

  • Подключение Ionic Framework через CDN

    Рекомендуется использовать unpgk. Рекомендуется
    подключать Ionic в <head></head> в html-файле:

      <script src="https://unpkg.com/@ionic/core@latest/dist/ionic.js"></script>

    Подключив его таким образом, возможно использовать 
    компоненты Ionic без установки чего-либо.

  • Подключение Ionicons из CDN

    Если вы используете Ionic, Ionicons идут в комплекте,
    и их не надо отдельно устанавливать.

    Но если вы хотите использовать Ionicons без Ionic,
    то можете просто подключить их через CDN:

      <script src="https://unpkg.com/ionicons@4.0.0/dist/ionicons.js"></script>

> Настройка среды окружения

  Для работы с Ionic нужны NodeJS и NPM.

  • Node & NPM

    Почти все современные инструменты для JS-проектов 
    используют NodeJS. Ionic не исключение. Установите
    последние версии NodeJS и NPM.

    После установки проверьте версии, загуглите в инете,
    какие последние, и сравните.

      node -v
      npm -v

  • Git

    Хотя Git не необходим, рекомендуется установить 
    его в последней версии. Чтобы проверить версию:

      git -v

> Настройка среды для разработки под iOS

  Чтобы разрабатывать под iOS, надо поднастроить среду.
  Разрабатывать под iOS можно только на MacOS.
  Так что, если у вас Windows или Linux, виртуальная
  машина с MacOS вам в помощь.

  • Xcode

    Xcode, это IDE для создания нативных iOS-приложений.
    Она включает в себя iOS SDK и Xcode CLI.
    Xcode можно скачать в магазине приложений App Store.
    Для этого понадобится аккаунт Apple.

    ▪ Настройка Development Team

      Все iOS-приложения должны быть подписаны, даже те,
      которые в разработке. К счастью, Xcode позволяет 
      легко делать это автоматически. Для этого нужен
      лишь Apple ID.

      Откройте Xcode и идите в Xcode -> Preferences -> Accounts.
      Добавьте Apple ID, если его там нет ещё.
      Залогинившись, в списке команд появится ваша Personal Team.

    ▪ Создание симулятора iOS

      Симулятор iOS эмулирует iOS-устройства на MacOS.
      Вот официальная инструкция от Apple, как его 
      настроить:

        https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/simulator_help_topics/Chapter/Chapter.html

      В принципе, это легко. Пройдите в Window -> Devices and
      Simulators. Создайте, например, симулятор iPhone X.

  • ios-sim & ios-deploy

    ios-sim и ios-deploy, это инструменты для деплоя
    приложения в iOS-симулятор и iOS-устройства в 
    процессе разработки.

    Их можо установить глобально через npm:

      npm install -g ios-sim
      npm install -g ios-deploy

> Настройка среды для разработки под Android

  Чтобы разрабатывать под Android, надо поднастроить среду.
  В отличие от разработкипод iOS, под Android можно
  разрабатывать на Windows, MacOS и Linux.

  • Java

    Нативные приложения под Android компилируются с помощью
    Java. Скачайте JDK8 (JDK10 ещё слишком новый на 07.2018) с 
    официального сайта:

      http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

  • Gradle

    Gradle это инструмент для сборки, используемый в 
    Android-приложениях, и может быть установлен отдельно.

    См.официальный сайт с инструкцией, где описана его
    установка:

      https://gradle.org/install/

  • Android Studio

    Android Studio, это IDE для создания нативных 
    Android-приложений. Он включает Android SDK, который
    понадобится настроить для использования в командной
    строке.

    ▪ Установка Android Studio

      Качнуть Android Studio можно бесплатно с официального
      сайта:

        https://developer.android.com/studio/

    ▪ Установка Android SDK

      Откройте Android Studio. Оно само заметит, что
      требуется установить SDK. На экране SDK Components
      Setup, который сам появится, установите SDK. Обратите
      внимание на Android SDK Locatin.

      Когда SDK установитяс, закройте Android Studio.
      
      На будущее, управлять версиями Android SDK можно
      в Android Studio, в меню Configure -> SDK Manager.

    ▪ Настройка CLI

      Android SDK поставляется с полезным CLI. Но прежде, 
      чем его можно будет использовать, надо установить
      кое-какие переменные среды.

      Как это сделать на Windows, погуглите в инете.

    ▪ Создание Android Virtual Device

      Android Virtual Devices (AVDs) - образы, которые 
      эмулятор Android использует для запуска Android OS.
      Подробнее про это см.официальную документацию:

        https://developer.android.com/studio/run/managing-avds

      Вообще, это не сложно. Пройдите в Tools -> AVD Manager.
      Нажмите Create Virtual Device, и дальше всё понятно.

      Когда AVD создан, запустите его в эмуляторе.
      Во время разработки можно держать эмулятор включенным.

    ▪ Настройка Android Device

      Для разработки можно использовать не только эмулятор,
      но и настоящее устройство с Android. Но для начала
      это устройство надо подготовить. Ниже описан быстрый
      способ, но подробнее можете глянуть тут:

        https://developer.android.com/studio/run/device

      Итак, настраиваем устройство:

      1. Включить USB Debugging на устройстве

        Откройте Settings. Перейдите в Developer Options,
        и включите USB debugging.

        Саму Developer Options ещё надо включить, если она
        уже не включена:

          Настройки -> Система -> О телефоне -> 7 раз тап по "Номер сборки"

      2. Убедиться, что устройство имеет разрешение подключиться к компьютеру

        На MacOS никаких доп.усилий не требуется.
        Для Windows, установите OEM USB Drivers.

          https://developer.android.com/studio/run/oem-usb

      Затем подключите устройство к компьютеру через USB,
      и выполните команду:

        adb devices

      Будет выведен список подключенных устройств, и ваше
      должно быть в нём.


А4. Процесс разработки Ionic-приложения
--------------------------------------

  # Старт нового Ionic-приложения /Starting/

    ▪ Команда ionic start
    ▪ Типы шаблонов

  # Структура проекта и добавление ресурсов через CLI /Scaffolding/ 

    ▪ Основной код твоего приложения будет в src/
    ▪ Структура проекта (на примере проекта на angular)
    ▪ Генерирование новых фич

  # Адаптация и под браузер, и под приложения /Cross Platform/

    ▪ Кое-что надо иметь в виду при адаптации под разные платформы
    ▪ Разруливание запросов к несуществующим на текущей платформе API
      ▪ Разруливание с API в Ionic Native
      ▪ Как определить в коде, что за платформа?
      ▪ Разруливание с API в браузере
    ▪ Адаптивная разметка под десктопы и мобилки: компонент Grid
    ▪ Универсальный способ локального хранения данных: Ionic Storage
      ▪ Что такое Ionic Storage
      ▪ Список поддерживаемых Ionic Storage хранилищ
      ▪ Почему SQLite в приоритете?
      ▪ Пример использования Ionic Storage

  # Упрощённый запуск на устройствах через Ionic DevApp /Running Overview/ 

    ▪ Команда ionic serve, приложение DevApp, livereload из коробки
    ▪ Ionic DevApp доступен для iOS и Android
    ▪ Надо подключить устройство и комп к одной сети
    ▪ Инструкция, как пользоваться DevApp
    ▪ DevApp поддерживает ограниченный список плагинов

  # Как деплоить на iOS-платформу с помощью Cordova/Capacitor /Running on iOS/

    ▪ Предварительная настройка iOS-проекта
    ▪ Запуск iOS-приложения через Xcode
    ▪ Запуск iOS-приложения через Ionic CLI
    ▪ Использование Safari Web Inspector
    ▪ Просмотр нативных логов

  # Как деплоить на Android-платформу с помощью Cordova/Capacitor /Running on Android/

    ▪ Предварительная настройка Android-проекта
    ▪ Запуск Android-приложения с помощью Capacitor
    ▪ Запуск Android-приложения с помощью Cordova
    ▪ Использование Chrome DevTools для отладки
    ▪ Просмотр нативных логов

  # Организация unit-тестов в ionic/angular приложениях /testing/
  # Подробнее про Web View /Web View/

    ▪ Что такое Web View
    ▪ CORS (кросс-доменный AJAX) всегда включен в Web View
      ▪ Что такое CORS
      ▪ Нативный плагин, чтобы обойтись без CORS
      ▪ Чеклист на пригодность к CORS для сервера
      
    ▪ Конвертация запросов file:// в http:// для Cordova и Capacitor
      ▪ Что на Cordova
      ▪ Что на Capacitor

    ▪ Реализации Web View на разных платформах

  # Про Ionic Storage /Ionic Storage/
  
    ▪ Как работает Ionic Storage
      ▪ Список поддерживаемых Ionic Storage хранилищ
      ▪ Почему SQLite в приоритете?
    ▪ Использование Ionic Storage
    ▪ Настройка Ionic Storage
    ▪ API для Ionic Storage
      
      Методы
      ▪ constructor   | создать новый экземпляр хранилища
      ▪ clear         | полностью очистить хранилище
      ▪ forEach       | пробежаться по всем парам key/value в хранилище
      ▪ get           | получить значение, связанное с указанным ключом
      ▪ keys          | список всех ключей в хранилище
      ▪ length        | кол-во ключей в хранилище
      ▪ ready         | готово ли хранилище
      ▪ remove        | удаление из хранилище пары key/value по ключу

      Свойства
      ▪ driver        | получить имя используемого драйвера
  
--------------------------------------

> Старт нового Ionic-приложения /Starting/

  • Команда ionic start

    Создать новое Ionic-приложение очень просто. Это
    можно сделать из командной строки командой:

      ionic start

    которая запросит инфу об имени проекта, и какой шаблон
    использвоать.

    В принципе, можно избежать интерактивных запросов и 
    указать все параметры сразу:

      ionic start myApp tabs --type=angular

    где myApp - название, tabs - тип, angular - фреймфорк.

  • Типы шаблонов 

    ▪ tabs
    ▪ sidemenu
    ▪ blank

    Посмотреть список всех доступных шаблонов можно
    командой:

      ionic start --list

    Эти шаблоны представляют собой отличное начало для
    любого приложения, и включают все лучшие практики
    для того, чтобы было потом легко поддерживать
    и масштабировать код.
    
> Структура проекта и добавление ресурсов через CLI /Scaffolding/

  • Основной код твоего приложения будет в src/

    Создав приложение из шаблона с помощью Ionic CLI, следующим
    шагом будет работа над фичами и компонентами. Большая
    часть разработки приложения будет проходить в папке src/

  • Структура проекта (на примере проекта на angular)

    src/
      app/                    | здесь основной код приложения
        components/
        pages/
        services/
        app.component.html
        app.component.spec.ts
        app.component.ts
        app.module.ts
        app-routing.module.ts
      assets/                 | папка для всяких ресурсов, типа картинки/шрифты/итп
      environments/
      theme/
      global.scss
      index.html              | точка входа в приложение
      karma.conf.js           | конфиг Angular'овского фреймворка для тестов
      main.ts
      polyfills.ts
      test.ts
      tsconfig.app.json
      tsconfig.spec.json

  • Генерирование новых фич

    Ionic CLI, с помощью коменды ionic generate, может
    генерировать различные ресурсы в проекте.

    Чтобы посмотреть, что именно оно может генерировать,
    запустите эту команду без аргументов:

      ionic generate
      ionic g         | сокращённый вариант

    Когда вы выберете, что именно хотите сгенерировать,
    Ionic запросит у вас name. Крайне рекомендуется
    префиксить name путём относительно корня проекта,
    чтобы ресурс генерировался там, где положено
    (почему-то Ionic CLI не может это сам делать)
   
      Например:

        pages/My New Page         |
        pages/tabs/Main Tab       | любой уровень вложенности
        pages/tabs/my/Main Tab    | 
      
      вместо просто названия без префикса:

        My New Page

    Чтобы избежать интерактивных запросов, можно указать
    name и type сразу в команде:

      ionic g page "pages/User Detail"

    где page - тип ресурса, "pages/User Detail" - где его создать.
    Ionic CLI использует за кадром инструменты фреймворка,
    чтобы оставаться максимально близко к лучшим практикам.
    Для ionic/angular, под капотом используется Angular CLI.

    После создания файлов и каталогов для новой страницы,
    CLI также автоматически обновит конфигурацию роутера,
    чтобы включить туда новую страницу. Это уменьшает
    кол-во работы, которую требуется проделать вручную.

    Справку про ionic g моно посмотреть так:

      ionic g --help

> Адаптация и под браузер, и под приложения /Cross Platform/

  • Кое-что надо иметь в виду при адаптации под разные платформы

    Ionic изначально создавался таким, чтобы разработка
    была лёгкой, вне зависимости от того, для какой
    платформы предназначается приложение.

    Ionic-приложения реально кроссплатформенные: работают
    на Android, iOS, Electron и PWA, и все это один и 
    тот же код.

    Однако, есть ряд вещей, которые надо иметь в виду, 
    оптимизируя приложение для работы на раных платформах.

  • Разруливание запросов к несуществующим на текущей платформе API

    Например, в коде нативных приложений могут производиться 
    запросы к API соответствующих нативных платформ, такие 
    например, как открытие камеры или получение геолокационных
    данных. 

    Эти запросы не будут работать при выполнении на pwa, 
    например, ведь там соответствующие API отсутствуют.
    В этом пункте описано, как разруливать эту ситуацию.

    ▪ Разруливание с API в Ionic Native

      Ionic Native имеет свою внутреннюю логику, чтобы
      определять, выполняется ли он в настоящий момент
      на той или иной платформе.

      Вместо возбуждения ошибки, он просто выведет в лог
      предупреждение, если выполняется не на нативной
      платформе, и соответствующие Cordova-плагины
      недоступны.

      Приложение не сломается, и продолжит работать,
      без соответствующего нативного функционала.

    ▪ Как определить в коде, что за платформа?

      В логике приложения, при каждом запросе к нативному 
      API, рекомендуется всегда проверять, на какой
      платформе происходит выполнение (ниже пример
      для Cordova):

        this.platform.ready().then(() => {
          if (this.platform.is('cordova')) {
            // make your native API calls
          } else {
            // fallback to browser APIs
          }
        });

    ▪ Разруливание с API в браузере

      Многие нативные API недоступны в браузере. С другой
      стороны, браузерное API постоянно улучшаетя и 
      дополняется. Надо по-умному всё делать, чтобы
      если, допустим, надо выбрать какой-то файл,
      но нативное API файловой системы недоступно, 
      и дело происходит в браузере, тогда открывалось
      окно с выбором файла на компе.

  • Адаптивная разметка под десктопы и мобилки: компонент Grid

    Если вы целитесь не только на мобильные платформы
    iOS и Android, но и хотите, чтобы ваше приложение
    нормально отображалось на компьютере в браузере,
    или через Electron, где ширина экрана большая,
    вам надо особое внимание уделить адаптивному
    дизайну.

    К счастью, в Ionic есть компонент Grid. Поэтому,
    можно завернуть контент в <ion-grid>...</ion-grid>,
    и сделать сеточку. Она, по сути, клон оной из
    бутстрапа.

    Пример:

      <ion-grid>
        <ion-row>
          <ion-col>
            <ion-item>
              <ion-label>Item 1</ion-label>
            </ion-item>
          </ion-col>
          <ion-col>
            <ion-item>
              <ion-label>Item 2</ion-label>
            </ion-item>
          </ion-col>
          <ion-col>
            <ion-item>
              <ion-label>Item 3</ion-label>
            </ion-item>
          </ion-col>
          <ion-col>
            <ion-item>
              <ion-label>Item 4</ion-label>
            </ion-item>
          </ion-col>
          <ion-col>
            <ion-item>
              <ion-label>Item 5</ion-label>
            </ion-item>
          </ion-col>
        </ion-row>
      </ion-grid>    
    
    С помощью атрибута fixed в элементе ion-grid можно
    сделать ширину элементов фиксированной, на основе
    ширины экрана (имеется в виду использование
    приставок типа -sm, -md, -lg, xl). Это хорошо для очень широких экранов,
    когда элементы стали бы необузданно растягиваться
    в ширину без этого атрибута.

    Прописав fixed, мы можем в элементе ion-col указать
    size по умолчанию в кол-ве столбцов (всего в сетке
    Ionic 12 столбцов, => 12 - это max ширина), а также
    размеры на основе текущей ширины браузера, такие как
    size-sm, size-md, size-lg, size-xl.

    Пример:

      <ion-grid fixed>
        <ion-row>
          <ion-col size="12" size-sm="9" size-md="6" size-lg="4" size-xl="3">
            <ion-item>
              <ion-label>Item 1</ion-label>
            </ion-item>
          </ion-col>
          <ion-col size="12" size-sm="9" size-md="6" size-lg="4" size-xl="3">
            <ion-item>
              <ion-label>Item 2</ion-label>
            </ion-item>
          </ion-col>
          <ion-col size="12" size-sm="9" size-md="6" size-lg="4" size-xl="3">
            <ion-item>
              <ion-label>Item 3</ion-label>
            </ion-item>
          </ion-col>
          <ion-col size="12" size-sm="9" size-md="6" size-lg="4" size-xl="3">
            <ion-item>
              <ion-label>Item 4</ion-label>
            </ion-item>
          </ion-col>
          <ion-col size="12" size-sm="9" size-md="6" size-lg="4" size-xl="3">
            <ion-item>
              <ion-label>Item 5</ion-label>
            </ion-item>
          </ion-col>
        </ion-row>
      </ion-grid>

  • Универсальный способ локального хранения данных: Ionic Storage

    ▪ Большинству приложений надо хранить какие-то данные локально

      Большинству приложений надо сохранять какие-то 
      данные локально. Это может быть результат XHR-запроса
      в виде JSON-строки, или аутентификационный токен,
      или что-то ещё. 

      В принципе, для приложений, работающих в нативных
      средах, можно создать полноценную базу данных на
      основе SQLite, и складывать данные туда.

      Все эти механизмы для хранения данных имеют свои
      преимущества и недостатки, но разработчикам на
      Ionic не стоит об этом волноваться.. ведь есть
      Ionic Storage.

    ▪ Библиотека Ionic Storage

      ▪ Что такое Ionic Storage

        Это простое key-value хранилище для Ionic-приложений,
        основанное на LocalForage, с поддержкой SQLite из
        коробки. 

        Оно позволяет использовать лучшее доступное хранилище
        без необходимости взаимодействовать с ним напрямую,
        а используя один и тот же API.

      ▪ Список поддерживаемых Ionic Storage хранилищ

        В настоящий момент (конец июля 2018), отсортированный 
        список поддерживаемых хранилищь от лучшего к худшему:

        ▪ SQLite
        ▪ IndexedDB
        ▪ WebSQL
        ▪ LocalStorage

      ▪ Почему SQLite в приоритете?

        Одной важной причиной, по которой SQLite в приоритете,
        является то, что многие нативные платформы (iOS, например),
        в настоящее время, периодически и непредсказуемо чистят
        Local Storage (и IndexedDB), когда устройству начинает
        не хватать памяти. Чтобы избежать потери данных, лучше
        использовать хранищище с файлами, такое как SQLite.

      ▪ Пример использования Ionic Storage

        class MyClass {
          constructor(public storage: Storage) {}

          setData(key, value) {
            this.storage.set(key, value)
            .then(res => console.log(res))
          }
          getData(key) {
            this.storage.get(key)
            .then(keyVal => console.log('Key is', keyVal))
          }
        }      

> Упрощённый запуск на устройствах через Ionic DevApp /Running Overview/ 

  • Команда ionic serve, приложение DevApp, livereload из коробки

    Ionic DevApp расширяет возможности Ionic'а, позволяя
    легко тестировать приложения прямо на устройствах.
    DevApp предлагает наблюдать изменения в реальном времени,
    с богатой библиотекой предустановленных нативных плагинов
    для тестирования нативной функциональности приложения.

    Нет необходимости устанавливать сложные нативные SDK - 
    всё проворачивается одной простой командой:

      ionic serve

    после чего приложение будет немедленно готово к тестированию
    на всех устройствах, где установлен DevApp, с работающим
    из коробки LiveReload.

  • Ionic DevApp доступен для iOS и Android

    Чтобы начать пользоваться DevApp, надо сначала его
    установить на соответствующие устройства. Он
    бесплатен, нужно только завести Ionic-аккаунт.

  • Надо подключить устройство и комп к одной сети

    Чтобы вся эта тема с DevApp работала, необходимо,
    чтобы устройство с установленным на него и запущенным
    приложением DevApp, и компьютер, на котором вы ведёте
    разработку Ionic-приложения, были в одной сети.

  • Инструкция, как пользоваться DevApp

    1. Установить DevApp на устройство, и запустить.
    2. Подключить устройство и компьютер к одной сети.
    3. На компьютере выполнить в корне проекта:

      ionic serve

    4. На устройстве в DevApp ваш компьютер должен стать
       виден, выберите его из списка.
    5. Теперь, если вы обращаетесь к какой-то нативной
       функциональности, DevApp может это обрабатывать
       и возвращать корректную нативную имплементацию.

  • DevApp поддерживает ограниченный список плагинов

    Воспользуйтесь документацией по DevApp, чтобы
    проверить, какой список плагинов оно поддерживает
    в настоящий момент:

      https://ionicframework.com/docs/pro/devapp/

> Как деплоить на iOS-платформу с помощью Cordova/Capacitor /Running on iOS/

  В этом руководстве описано, как деплоить iOS-приложения,
  написанные на Ionic, с помощью Capacitor и Cordova.

  Есть 2 способа запускать Ionic-приложения на iOS:

    ▪ Через Xcode
    ▪ Через Ionic CLI (преимущество: live-reload)

  • Предварительная настройка iOS-проекта

    Перед тем, как приложения могут быть развернуты на 
    iOS-эмуляторах и устройствах, надо сначала
    настраивать из нативные проекты.

    1. Сгенерировать нативный проект, если он ещё не существует

      ▪ Capacitor

        ionic capacitor add ios

      ▪ Cordova

        ionic cordova prepare ios
 
    2. Установка "Package ID"

      ▪ Capacitor

        Откройте файл capacitor.config.json, и измените
        свойство appId.

      ▪ Cordova

        Откройте файл config.xml и измените атрибут
        id корневого элемента <widget>.

    3. Открытие проекта в Xcode

      ▪ Capacitor

        Либо запустите Xcode и откройте в нём проект 
        самостоятельно, либо выполните эту команду:

          ionic capacitor open ios

      ▪ Cordova    

        Запустите Xcode и откройте в нём проект, который
        находится в папке platforms/ios.

    4. Сверка Package ID

      В Xcode, слева, в навигации по проекту, выделите
      корневую папку, чтобы открылся редактор проекта.
      В разделе "Identity", удостоверьтесь, что Package ID
      совпадает с оным, который вы установили в пункте 2.

    5. Проверка, что "Automatically manage signing" включено

      В том же редакторе проекта, что в пункте 4, 
      в разделе "Signing" удостоверьтесь, что
      "Automatically manage signing" включёно.

      После чего, в дропбоксе ниже выберите соответствующую
      "Development Team" (как её сделать см.в методичке
      по Capacitor). После этого, Xcode попытается автоматически
      подписать ваш код.

  • Запуск iOS-приложения через Xcode

    В этом процессе, Xcode может автоматически решать
    общие проблемы с компиляцией и подписыванием кода.

    1. Разработать Ionic-приложение и синхронизировать файлы с нативной платформой

      После любых изменений, надо пересобирать Ionic-приложение,
      и лишь затем изменения можно увидеть на эмуляторе или 
      устройстве. Полученные после сборки www-файлы должны быть
      скопированы на платформу нативного проекта, для этого
      надо выполнить команду:

      ▪ Capacitor

        ionic capacitor copy ios

      ▪ Cordova      

        ionic cordova prepare ios

    2. Запуск проекта в эмуляторе, или на девайсе

      В Xcode, выберите эмулятор или устройство,
      и нажмите кнопку Play.

  • Запуск iOS-приложения через Ionic CLI

    Ionic CLI может собирать, копировать и развёртывать
    Ionic-приложения на iOS-эмуляторах и устройствах
    одной командой. 

    Также, он может поднять dev-сервер на NodeJS с 
    функционалом live-reload из коробки.

    ▪ Capacitor

      К сожалению, на конец июля 2018, live-reload для
      Capacitor ещё не работает.

    ▪ Cordova

      Выполните следующую команду, чтобы поднять
      сервер с live-reload:

        ionic cordova run ios -l

      После этого, каждый раз, когда вы будете вносить
      изменения в исходные файлы проекта, www-файлы
      пересобираются, копируются в проект, и вы сразу
      видите изменения на эмуляторе или устройстве
      без необходимости переразворачивать приложение.

  • Использование Safari Web Inspector

    В Safari есть поддержка Web Inspector для iOS эмуляторов
    и устройств. Откройте меню "Develop" и выберите эмулятор
    или устройство, затем выберите Ionic-приложение, чтобы
    открыть Web Inspector.

    Если меню Develop скрыто, включите его в настройках:
    Safari -> Preferences -> Advanced.

  • Просмотр нативных логов

    Нативные логи можно просмотреть в Xcode в Console.
    Если Console скрыта, включите её в настройках:
    View -> Debug Area -> Activate Console.

> Как деплоить на Android-платформу с помощью Cordova/Capacitor /Running on Android/

  В этом руководстве описано, как деплоить Android-приложения,
  написанные на Ionic, с помощью Capacitor и Cordova.

  Чтобы деплоить приложения на устройство с Android и 
  отлаживать их, разработчик должен включить на устройстве
  "developer mode" и "USB debugging". Как это сделать,
  описано здесь:

    https://developer.android.com/studio/debug/dev-options#enable

  • Предварительная настройка Android-проекта

    1. Сгенерировать нативный проект, если он ещё не существует

      ▪ Capacitor

        ionic capacitor add android

      ▪ Cordova

        ionic cordova prepare android

    2. Установка "Package ID"

      ▪ Capacitor

        Откройте файл capacitor.config.json, и измените
        свойство appId.

      ▪ Cordova

        Откройте файл config.xml и измените атрибут
        id корневого элемента <widget>.

  • Запуск Android-приложения с помощью Capacitor

    Capacitor использует Android Studio для сборки
    и выполнения приложения на эмуляторе или устройстве.

    К сожалению, на конец июля 2018, live-reload для
    Capacitor ещё не работает.

    1. Разработать Ionic-приложение и синхронизировать файлы с нативной платформой

      После любых изменений, надо пересобирать Ionic-приложение,
      и лишь затем изменения можно увидеть на эмуляторе или 
      устройстве. Полученные после сборки www-файлы должны быть
      скопированы на платформу нативного проекта, для этого
      надо выполнить команду:

      ionic capacitor copy android

    2. Запуск проекта в эмуляторе, или на девайсе

      В Android Studio, выберите эмулятор или устройство,
      и нажмите кнопку Run.

  • Запуск Android-приложения с помощью Cordova

    Ionic CLI может собирать, копировать и развёртывать
    Ionic-приложения на iOS-эмуляторах и устройствах
    одной командой. 

    Также, он может поднять dev-сервер на NodeJS с 
    функционалом live-reload из коробки.

    Выполните следующую команду, чтобы поднять
    сервер с live-reload:

      ionic cordova run ios -l

    После этого, каждый раз, когда вы будете вносить
    изменения в исходные файлы проекта, www-файлы
    пересобираются, копируются в проект, и вы сразу
    видите изменения на эмуляторе или устройстве
    без необходимости переразворачивать приложение.

  • Использование Chrome DevTools для отладки

    DevTools в Chrome поддерживает эмуляторы Android и
    устройство. Откройте Chrome и идите в 

      chrome://inspect

    при подключенном устройсте или запущенном эмуляторе,
    и выберите там приложение, которое надо отладить.

  • Просмотр нативных логов

    Нативные логи можно просматривать в Android Studio,
    в Console.

> Организация unit-тестов в ionic/angular приложениях /testing/

  Когда вы генерируете ionic/angular приложение через
  Ionic CLI, в нём автоматически настраиваются юнит-тесты
  через Jasmine. Это тоже самое, что происходит при создании
  нового проекта через Angular CLI. Подробнее о тестировании
  Angular-приложений написано в официальной инструкции:

    https://angular.io/guide/testing

  *Примечание автора методички:

    Подробно я не стал расписывать эту главу, поскольку
    она целиком про Angular, а я испольщую Vue.

> Подробнее про Web View /Web View/

  Web View позволяет запускать веб-приложения на нативных
  устройствах. 

  Ionic поддерживает Web View Plugin для приложений, 
  использующих Cordova. Плагин предоставляется
  автоматически при использовании с Ionic CLI.

  Для приложений, использующих Capacitor, Web View
  автоматически предоставляется.

  • Что такое Web View

    Ionic-приложения строятся с использованием веб-технологий,
    и отрисовываются с помощью Web Views, которые являются
    полноэкранными и полнофункциональными браузерами.

    Современные Web Views предлагают много встроенных HTML5
    APIs для доступа к нативному функционалу платформ, 
    такому как камиры, сенсоры, GPS, динамики, Bluetooth.
    Но часто требуется иметь доступ к специфичным для 
    платформ API - в Ionic-приложениях такой доступ
    приложение получает через связующий слой, который
    представляет из себя нативный плагин с JS-API.

    Ionic Web View плагин заточен под современные JS-приложения.
    Для iOS и Android, файлы приложения всегда хостятся с
    использованием протокола http:// на оптимизированном
    HTTP-сервере, который запускается на локальном устройстве.

  • CORS (кросс-доменный AJAX) всегда включен в Web View

    ▪ Что такое CORS

      Существует такая вещь в браузерах, как same-origin-policy 
      ля XSS (кросс-доменных запросов), которая мешает из JS 
      на одном сайте/домене слать запросы на любые другие домены.

      Так вот, технология CORS в современных браузерах позволяет
      преодолеть same-origin-policy. Идея проста – пусть клиент 
      шлет Аякс-запрос к чужому серверу. Браузер добавит в 
      запрос особые заголовки с информацией о том, что запрос 
      с другого домена. На их основании сервер решит, как 
      обрабатывать такой запрос, и добавит особые заголовки 
      в ответ. Удобно, правда?

      Подробнее читайте:

        http://grishaev.me/cors
        https://enable-cors.org/
        https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

    ▪ Нативный плагин, чтобы обойтись без CORS

      Если CORS не реализован на сервере, есть нативный плагин:

        https://beta.ionicframework.com/docs/native/http/

      который выполняет HTTP-запросы в нативном слое, которым
      не требуется CORS.

    ▪ Чеклист на пригодность к CORS для сервера

      Многие веб-фреймворки могут иметь встроенную поддержку
      CORS, либо какие-то дополнения, например, как пакет
      cors для Express. Если такого нет, то надо выполнить
      следующие действия, чтобы CORS на сервере мог работать:

      1. Разрешить http://localhost:8080 в качестве origin
         (см. Access-Control-Allow-Origin)

          https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin

      2. Разрешить любые необходимые HTTP-методы
         (см. Access-Control-Allow-Methods)

          https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods

      3. Разрешить любые необходимые HTTP-заголовки
         (см. Access-Control-Allow-Headers)

          https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers

      4. Убедитсья, что сервер может обрабатывать
         preflight requests.

          https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request

  • Конвертация запросов file:// в http:// для Cordova и Capacitor

    Приложения на Cordova или Capacitor хостятся на локальном
    HTTP-сервере и работаю на протоколе http://

    Некоторые плагины, однако, пытаются получить доступ
    к файлам устройства через протокол file://

    Чтобы избежать проблем, пути к файлам на устройстве 
    должны быть переписаны на http-протокол. Например,
    путь:

      file:///path/to/device/file

    надо переписать по такому шаблону:

      http://<host>:<port>/<prefix>/path/to/device/file

    ▪ Что на Cordova

      Для Cordova-приложений Ionic Web View Plugin предоставляет
      функцию для конвертирования файловых URL: 

        window.Ionic.WebView.convertFileSrc()

      И есть соответствующий нативный плагин:

        @ionic-native/ionic-webview.

    ▪ Что на Capacitor

      В Capacitor-приложениях, файловые URL конвертируются
      автоматически.

  • Реализации Web View на разных платформах

    ▪ WKWebView на iOS

      https://developer.apple.com/documentation/webkit/wkwebview

    ▪ Web View на Android

      https://developer.chrome.com/multidevice/webview/overview

> Про Ionic Storage /Ionic Storage/

  • Как работает Ionic Storage

    Ionic Storage позволяет легко сохранять пары key/value
    и JSON-объекты. По сути, это один API для нескольких
    реализаций хранилищ, которые оно поддерживает. В зависимости
    от платформы, оно само решает, какую реализацию хранилища
    целесообразнее всего использовать, и применяет её.

    Когда запускаешь приложение на нативной платформе, 
    Storage отдаёт предпочтение SQLite, как одной из
    наиболее широко-используемых и основанных на сохранении
    данных в файлы баз данных. 

    Если приложение работает на web или pwa, Storage будет
    пробовать использовать IndexedDB, WebSQL и Localstorage,
    именно в таком порядке.

    ▪ Список поддерживаемых Ionic Storage хранилищ

      В настоящий момент (конец июля 2018), отсортированный 
      список поддерживаемых хранилищь от лучшего к худшему:

      ▪ SQLite
      ▪ IndexedDB
      ▪ WebSQL
      ▪ LocalStorage

    ▪ Почему SQLite в приоритете?

      Одной важной причиной, по которой SQLite в приоритете,
      является то, что многие нативные платформы (iOS, например),
      в настоящее время, периодически и непредсказуемо чистят
      Local Storage (и IndexedDB), когда устройству начинает
      не хватать памяти. Чтобы избежать потери данных, лучше
      использовать хранищище с файлами, такое как SQLite.    

  • Использование Ionic Storage

    Если вы предпочитаете использовать SQLite, установите
    cordova-sqlite-storage plugin:

      ionic cordova plugin add cordova-sqlite-storage

    Затем установите соответствующий пакет (идёт по 
    умолчанию для Ionic-приложений >= V2):

      npm install --save @ionic/storage

    Затем, добавьте в список imports в вашем объявлении 
    NgModule. Например в src/app/app.module.ts:

      import { IonicStorageModule } from '@ionic/storage';

      @NgModule({
        declarations: [
          // ...
        ],
        imports: [
          BrowserModule,
          IonicModule.forRoot(MyApp),
          IonicStorageModule.forRoot()
        ],
        bootstrap: [IonicApp],
        entryComponents: [
          // ...
        ],
        providers: [
          // ...
        ]
      })
      export class AppModule {}

    Наконец, вставьте в ваше приложение:

      import { Storage } from '@ionic/storage';

      export class MyApp {
        constructor(private storage: Storage) { }

        ...

        // set a key/value
        storage.set('name', 'Max');

        // Or to get a key/value pair
        storage.get('age').then((val) => {
          console.log('Your age is', val);
        });
      }

  • Настройка Ionic Storage

    Storage Engine может быть настроен как конкретными
    свойствами движка хранилища, так и кастомными 
    опциями для передачи в LocalForge.
    Подробнее об этом:

      https://github.com/localForage/localForage#configuration

    *Примечание:

      Любые кастомные конфигурации будут смёржены с 
      дефолнтыми конфигурациями.

    import { IonicStorageModule } from '@ionic/storage';

    @NgModule({
      declarations: [...],
      imports: [
        IonicStorageModule.forRoot({
          name: '__mydb',
    driverOrder: ['indexeddb', 'sqlite', 'websql']
        })
      ],
      bootstrap: [...],
      entryComponents: [...],
       providers: [...]
    })
    export class AppModule { }

  • API для Ionic Storage

    ▪ constructor
      создать новый экземпляр хранилища

      Создать новый экземпляр хранилища. Какой драйвер будет
      использован, зависит от алгоритма этого метода, как он
      работает описано выше в пункте про хранилища. Доступные
      драйверы, в порядке приоритетности:

        ['sqlite', 'indexeddb', 'websql', 'localstorage']

    ▪ clear
      полностью очистить хранилище

      Внимание: операция тяжёлая! 
      Возвращает: промис, который разрешается, когда
                  хранилище успешно очищено.

    ▪ forEach
      пробежаться по всем парам key/value в хранилище

      Возвращает: промис, который разрешается, когда
                  итерирование завершено.

    ▪ get
      получить значение, связанное с указанным ключом

      Возвращает: промис, который разрешается, когда
                  значение успешно извлечено.

    ▪ keys
      список всех ключей в хранилище

      Возвращает: промис, который разрешается, когда 
                  список ключей успешно извлечён.


    ▪ length  
      кол-во ключей в хранилище

      Возвращает: промис, который разрешается, когда
                  кол-во ключей в хранилище пересчитано.

    ▪ ready
      готово ли хранилище

      Возвращает: промис, который разрешается, когда
                  хранилище готово к использованию.

    ▪ remove
      удаление из хранилище пары key/value по ключу

      Возвращает: промис, который разрешается, когда
                  значение удалено.
    
    ▪ driver
      получить имя используемого драйвера


А5. Компоненты Ionic'а
--------------------------------------

  # О компонентах Ionic'а
  # Список core-компонентов Ionic'а

    ▪ Action Sheet    | вылезающее снизу окошко со списом действий
    ▪ Alert           | модальное окошко с текстом, inputs, кнопками
    ▪ Badge           | бэйдж с цифрой, как правило, внутри элемента
    ▪ Button          | кастомизируемая кнопка, обычная/круглая/FAB/outline/...
    ▪ Card            | карточка с контентом
    ▪ Checkbox        | чекбокс с внершим видом: чекбокса, радиобуттона, переключателя
    ▪ DateTime        | date time picker
    ▪ Fab             | FABы (плавающие кнопки действия)
    ▪ Grid            | CSS-сеточка для формирования макате приложения (клон Bootstrap'овской)
    ▪ Infinite scroll | бесконечный скролл с триггерами от дистанции снизу/сверху документа
    ▪ Input           | обычный текстовый input
    ▪ List            | списочек, позволяет организовать разное в список
    ▪ Loading         | загрузочка, модальный экран загрузки со спинером
    ▪ Menu            | менюшечка обычная, появляется слева по кнопке или свайпу
    ▪ Modal           | модалочка полноэкранная, отображает временный UI
    ▪ Nav             | навигация между страницами приложения
    ▪ Popover         | тултипчик с расширенным функционалом
    ▪ Range           | слайдерок, для выбора значения из диапазона
    ▪ Refresher       | обновлялочка, тянешь вниз и контент обновляется
    ▪ Searchbar       | искалочка, input для поиска/фильтрации
    ▪ Select          | аналог обычного select с расширенным функционалом
    ▪ Slides          | слайдер страниц, с пролистыванием свайпами
    ▪ Spinner         | набор анимированных SVG-спинеров
    ▪ Tabs            | навигационные табы
    ▪ Toast           | тосты обыкновенные, быстро появляются и исчезают
    ▪ Virtual Scroll  | производительный скроллинг больших списков

--------------------------------------

> О компонентах Ionic'а

  Ionic-приложения разрабатываются из высокоуровневых
  блоков, которые мы занываем "компоненты".

  Компоненты позволяют вам быстро собирать интерфейсы
  ваших приложений. Ionic поставляется с набором
  core-компонентов, включая модалки, попапы и карточки.

  Ниже вы можете найти их список, краткие описания, 
  и небольшие примеры кода. Живые примеры работы
  компонентов смотрите в официальной документации
  Ionic.

  Подробные же их API можете посмотреть в главе
  Ionic API.

> Список core-компонентов Ionic'а

  • Action Sheet | вылезающее снизу окошко со списом действий 

    Action Sheet вылезает снизу-вверх через нижний край
    экрана, и выводит список доступных действий.

    Иногда, список действий можно использовать в качестве
    альтернативы для меню, хотя, использовать его для
    навигации не рекомендуется.

  • Alert | модальное окошко с текстом, inputs, кнопками

    Представляет собой нечто большее, чем классический
    алерт из браузеров.

    Алерт является прекрасным способом предложить пользователю
    выбрать конкретное действие, или список действий. Алерты
    могут содержать текст, инпуты и кнопки. Они могут помочь
    показать пользователю важную информацию, или потребовать
    от него принять одно или несколько решений.

    Алерты следует использовать только для быстрых действий,
    таких как верификация пароля, маленькое уведомление от
    приложения, или быстрый выбор опций.

  • Badge | бэйдж с цифрой, как правило, внутри элемента
    

    Компонент значок - маленький компонент, через который,
    обычно, пользователю сообщается какое-то цифровое
    значение. Чаще всего используется внутри какого-нибудь
    элемента.

    Пример использования, кол-во новых сообщений от 
    пользователей в чате. Есть список пользователей,
    где в каждом элементе списка появляется значок
    с кол-вом новых сообщений от данного пользователя.

    Пример кода:

      <!-- Default -->
      <ion-badge>99</ion-badge>

      <!-- Colors -->
      <ion-badge color="primary">11</ion-badge>
      <ion-badge color="secondary">22</ion-badge>
      <ion-badge color="tertiary">33</ion-badge>
      <ion-badge color="success">44</ion-badge>
      <ion-badge color="warning">55</ion-badge>
      <ion-badge color="danger">66</ion-badge>    

  • Button | кастомизируемая кнопка, обычная/круглая/FAB/outline/...

    Кнопки являются важным способом взаимодействовать с 
    приложением, и перемещаться по нему. Они должны
    ясно сообщать, какое действие последует после 
    нажатия на них. Компонент Button позволяет серьёзно
    кастомизировать кнопки, изменяя цвет, форму и размер.

    Поддерживаются разные кнопки:

    ▪ Круглые
    ▪ FAB
    ▪ Outline-кнопки
    ▪ ... и многие другие ...

    Пример кода:

      <ion-button shape="round" color="primary" fill="outline">Hello World</ion-button>
      <ion-button size="small">Small Button</ion-button>

  • Card | карточка с контентом

    Компонент карточка является отличным способом отображать
    важные кусочки контента, и быстро становится основным
    шаблоном проектирование приложений.

    Карточка может содержать картинки, кнопки, текст и 
    много чего ещё. 

    Можно использовать одну карточку, можно список карточек,
    а можно сетку карточек.

    Пример кода:

      <ion-card>
        <ion-img src="/assets/myImg.png"></ion-img>

        <ion-card-content>
          <ion-card-title>Hello World</ion-card-title>

          <p>The content for this card</p>
        </ion-card-content>
      </ion-card>    

  • Checkbox | чекбокс с внершим видом: чекбокса, радиобуттона, переключателя

    Чекбоксы могут быть использованы в ситуациях, когда 
    нужно дать пользователю возможность сделать бинарное
    решение. 

    Чекбокс обеспечивает четкую визуализацию выбора в 
    стиле true/false.

    ion-checkbox ДОЛЖЕН ВСЕГДА быть использован внутри 
    ion-item.

    Вы моете использовать:

                        Какой внешний вид предпочитаете
    ▪ ion-checkbox    | похожий на чекбоксы
    ▪ ion-radio       | похожий на радиобуттоны
    ▪ ion-toggle      | похожий на переключатели

    Пример кода:

      <ion-checkbox color="primary" checked></ion-checkbox>
      <ion-checkbox color="secondary"></ion-checkbox>
      <ion-checkbox color="danger" checked></ion-checkbox>
      <ion-checkbox color="light"></ion-checkbox>
      <ion-checkbox color="dark" checked></ion-checkbox>

  • DateTime | date time picker

    DateTime позволяет пользователю легко выбрать дату и
    время. Будет выглядить нативно на iOS, а для прочих
    платформ будет использоваться Material Design.

    DateTime ДОЛЖЕН ВСЕГДА быть использован внутри 
    ion-item.

    Пример кода:

      <ion-item>
        <ion-label>Date</ion-label>
        <ion-datetime display-format="MM/DD/YYYY"></ion-datetime>
      </ion-item>

  • Fab | FABы (плавающие кнопки действия)

    FAB расшифровывается, как FLOATING ACTION BUTTON,
    или, плавающая кнопка действия.

    Представляет из себя круглую кнопку, которая выполняет
    главное, или наиболее часто используемое действие
    на экране.

    Она может находиться в разных местах на экране, 
    и, обычно, окрашена в отличающийся от фона цвет,
    чтобы привлекать внимание.

    Позиционирование FAB также осуществляется с помощью
    атрибутов horizontal, vertical и slot.

    Пример кода:

      <ion-fab vertical="bottom" horizontal="end" slot="fixed">
        <ion-fab-button>
          <ion-icon name="add"></ion-icon>
        </ion-fab-button>
      </ion-fab>

  • Grid | CSS-сеточка для формирования макате приложения (клон Bootstrap'овской)

    Сеточка является отличным инструментом для формирования
    макета вашего приложения. Она очень похожа на оную в 
    Bootstrap, я думаю, клон, и авторы Ionic об этом
    явно говорят в документации.

    Используйте сеточку, чтобы ваше приложение выглядело
    прекрасно как на ultra wide экране настольного 
    компьютера, так и на мелком экране 4-го айфончика.

    Пример кода:

      <ion-grid>
        <ion-row>
          <ion-col>
            ion-col
          </ion-col>
          <ion-col>
            ion-col
          </ion-col>
          <ion-col>
            ion-col
          </ion-col>
          <ion-col>
            ion-col
          </ion-col>
        </ion-row>

        <ion-row>
          <ion-col size="6">
            ion-col [size="6"]
          </ion-col>
          <ion-col>
            ion-col
          </ion-col>
          <ion-col>
            ion-col
          </ion-col>
        </ion-row>
      </ion-grid>

  • Infinite scroll | бесконечный скролл с триггерами от дистанции снизу/сверху документа

    Бесконечный скролл позволяет вам осуществлять некое 
    действие, когда пользователь доскроллит до определенного
    расстояния снизу или сверху документа. 

    Например, можно подгружать следующие элементы списка,
    если таковые имеются, если пользователь доскроллил
    до его низа.

    Этот компонент можно кастомизировать различными поддерживаемыми
    индикаторами загрузки.

    Пример кода:

      <ion-infinite-scroll>
        <ion-infinite-scroll-content
          loadingSpinner="bubbles"
          loadingText="Loading more data...">
        </ion-infinite-scroll-content>
      </ion-infinite-scroll>    

  • Input | обычный текстовый input         

    Инпуты позволяют пользователям вводить данные.
    Чаще всего их можно увидеть в формах и диалогах.

    Input ДОЛЖЕН ВСЕГДА быть использован внутри 
    ion-item.

    Пример кода:

      <ion-item>
        <ion-input required type="text" placeholder="First Name"></ion-input>
      </ion-item>

  • List | списочек, позволяет организовать разное в список

    Компонент списочек используется для отображение строк
    с информацией. Например, списка контактов, плейлист,
    или меню.

    В списке можно выводить карточки, элементы списка,
    и много чего ещё.

    Списки также хорошо поддаются кастомизации, и совпадают
    по дизайну с нативными на Android и iOS.

    Пример кода:

      <ion-list>
        <ion-item>
          <ion-avatar slot="start">
            <img src="assets/img/avatar-finn.png"></img>
          </ion-avatar>
          <ion-label>
            <h2>Finn</h2>
            <h3>I'm a big deal</h3>
            <p>Listen, I've had a pretty messed up day...</p>
          </ion-label>
        </ion-item>
      </ion-list>    

  • Loading | загрузочка, модальный экран загрузки со спинером

    Загрузочка является модальным экраном загрузки, который
    обычно используют, когда пользователю надо заблокировать 
    на время выполения каких-то действий возможность 
    взаимодействовать с интерфейсом.

  • Menu | менюшечка обычная, появляется слева по кнопке или свайпу

    Менюшечка является общим навигационным шаблоном для
    приложений. Она может быть 3-х видов:

    ▪ Постоянно на экране
    ▪ Выезжать свайпом через левый край экрана
    ▪ Вызываться кнопкой меню

    Пример кода:

      <ion-menu side="start">
        <ion-header translucent>
          <ion-toolbar color="secondary">
            <ion-title>Menu</ion-title>
          </ion-toolbar>
        </ion-header>
      </ion-menu>

  • Modal | модалочка полноэкранная, отображает временный UI

    Модалочка полноэкранная наезжает на экран, полностью его
    перекрывая (по сути, напоминает отдельный экран в SPA),
    и представляет собой временный UI.

    Модалочки полноэкранные часто используются для страниц
    логина или регистрации, составления сообщений, и выбора
    опций.

  • Nav | навигация между страницами приложения

    Навигация позволяет пользователям перемещаться между
    страницами вашего приложения.

    Концепция анимации и навигации в Ionic следуют 
    общепринятым стандартам. 

    Навигация в Ionic также может адаптироваться к большим
    viewports, используя ion-split-pane.

    Пример кода:

      <ion-app>
        <ion-nav root="page-one"></ion-nav>
      </ion-app>

  • Popover | тултипчик с расширенным функционалом

    Тултипчик представляет из себя окошечко, которое появляется
    поверх контента, и выглядящее, как тултип с расширенным
    функционалом.

    Чаще всего тултипчик используют в следующих ситуациях:

    ▪ Показать больше информации о текущем экране
    ▪ Выбрать часто используемый инструмент или настройку
    ▪ Показать список действий для текущего экрана

  • Range | слайдерок, для выбора значения из диапазона

    Слайдерок является элементом формы, который позволяет
    пользователям выбирать значение из диапазона путём
    перемещения ползунка.

    Range ДОЛЖЕН ВСЕГДА быть использован внутри 
    ion-item.

    Пример кода:

      <ion-item>
        <ion-range>
          <ion-icon slot="start" size="small" name="sunny"></ion-icon>
          <ion-icon slot="end" name="sunny"></ion-icon>
        </ion-range>
      </ion-item>

  • Refresher | обновлялочка, тянешь вниз и контент обновляется

    Обновлялочка представляет pull-to-request функциональность
    компонента content. 

    Чаще всего используется для обновления контента страницы.
    То есть, вам надо потянуть вниз, появится спиннер, 
    после чего контент на странице обновится.

    Пример кода:

      <ion-content fullscreen>
        <ion-refresher slot="fixed">
          <ion-refresher-content></ion-refresher-content>
        </ion-refresher>
      </ion-content>

  • Searchbar | искалочка, input для поиска/фильтрации

    Искалочка используется для поиска или фильтрации
    элементов. Обычно, она используется внутри
    ion-toolbar.

    Пример кода:

      <ion-toolbar>
        <ion-searchbar></ion-searchbar>
      </ion-toolbar>

  • Select | аналог обычного select с расширенным функционалом

    Компонент ion-select похож на обычный HTML'ый элемент 
    <select>, однако, позволяет проще сортировать и выбирать
    необходимую опцию. Его внешний вид совпадает с 
    select inputs на Android и iOS.

    Select ДОЛЖЕН ВСЕГДА быть использован внутри 
    ion-item.

    Пример кода:

      <ion-item>
        <ion-label>Hair Color</ion-label>
        <ion-select value="brown" ok-text="Okay" cancel-text="Dismiss">
          <ion-select-option value="brown">Brown</ion-select-option>
          <ion-select-option value="blonde">Blonde</ion-select-option>
          <ion-select-option value="black">Black</ion-select-option>
          <ion-select-option value="red">Red</ion-select-option>
        </ion-select>
      </ion-item>

  • Slides | слайдер страниц, с пролистыванием свайпами

    Слайдер позволяет легко делать функционал, основанный
    на слайдах, такой как галереи, туториалы. А также
    приложения, в которых есть возможно пролистывать
    страницы вправо-влево (например, калькулятор калогий
    ХиКи).

    Пример кода:

      <ion-slides pager="true">
        <ion-slide>
          <h1>Slide 1</h1>
        </ion-slide>

        <ion-slide>
          <h1>Slide 2</h1>
        </ion-slide>

        <ion-slide>
          <h1>Slide 3</h1>
        </ion-slide>
      </ion-slides>

  • Spinner | набор анимированных SVG-спинеров

    Компонент ion-spinner представляет собой набор
    анимированных SVG-спинеров. 

    Вы можете применять спинер, чтобы дать пользователям
    понять, что происходит какая-то активность.

    Пример кода:

      <ion-spinner></ion-spinner>
      <ion-spinner name="lines"></ion-spinner>

  • Tabs | навигационные табы

    Этот компонент включает навигационные табы, которые
    являются стандартным навигационным шаблоном в 
    современных приложениях.

    Табы могут отображать иконку и/или надпись, чтобы 
    давать понять пользователю, куда он попадёт, если
    нажмёт.

    По умолчанию, навигационны табы расположены в нижней
    части приложения, что соответствует руководствам
    Material Design и iOS Design. Однако, если надо,
    их можно поместить и сверху.

    Пример кода:

      <ion-tabs>
        <ion-tab label="Music" icon="musical-note"></ion-tab>
        <ion-tab label="Profile" icon="person"></ion-tab>
        <ion-tab label="people" icon="people"></ion-tab>
      </ion-tabs>

  • Toast | тосты обыкновенные, быстро появляются и исчезают

    Компонент тосты позволяет уведомить пользователя 
    коротким сообщением. Они быстро появляются и исчезают.

    Тосты могут появлятсья сверху, снизу, посередине, 
    иметь кнопку закрытия тоста.

    На планшетах или больших экранах настольных компьютеров
    или ноутбуков, ширина тостов не будет 100%, и они будут
    появляться по центру.

  • Virtual Scroll | производительный скроллинг больших списков

    Элемент виртуальный скролл является виртуальным списком,
    который позволяет вам обеспечить высокую производительность
    при скролле через ГИГАНТСКИЕ списки.

    Суть его состоит в том, что он отрисовывает лишь те 
    элементы, которые в текущий момент видимы на экране.

    Вообще, это известная техника для повышения производительности
    работы с большими списками на слабомощных мобильных устройствах.


А6. Организация layout'а в Ionic-приложении
--------------------------------------

  # Примеры layout'ов

    ▪ Header
    ▪ Footer
    ▪ Header + Footer
    ▪ Header + Tabs
    ▪ Header + Menu
    ▪ Разные layout'ы в зависимости от ширины экрана


--------------------------------------

> Примеры layout'ов

  • Header


  • Footer


  • Header + Footer


  • Header + Tabs


  • Header + Menu

  
  • Разные layout'ы в зависимости от ширины экрана
