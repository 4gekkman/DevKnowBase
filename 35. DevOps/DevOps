////=================================================////
////                                                 ////
////                      Devops                     ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////




////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////

  
  А1. Настройка ВМ Vagrant Ubuntu 16.04
  А2. Подключение диска ВМ к windows в виде тома
  А3. Подготовка каталога проекта в ВМ к разработке
  А4. Настроить терминальный доступ к docker registry на gitlab
  А5. Установка моего стартового Laravel-проекта
  А6. Настройка SSH-подключения только через ключи к VDS-серверу
  А7. Связать домен с сервером, настроить поддомен, сделать переадресацию
  А8. Установка, настройка GitLab EE
  


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Настройка ВМ Vagrant Ubuntu 16.04
-------------------------------------
Подоглавление:

  # Постановка задачи
  # Пошаговая инструкция
  # Советы по настройке
  # Образцы файлов

    ▪ Образец Vagrantfile
    ▪ Образец bootstrap.sh
    ▪ Образец .gitignore
    ▪ Образец README.md

--------------------------------------

> Постановка задачи

  Требуется настроить пригодную для разработки проекта
  виртуальную машину с помощью vagrant на ubuntu 16.04,
  с установленными docker и docker compose.

> Пошаговая инструкция

  1. Создать папку проекта

    Например: C:\WebDev\projects\manveloff\cleaning

  2. В этой папке создать папку vagrant
  3. В vagrant создать файлы по образцам:

    ▪ Vagrantfile
    ▪ bootstrap.sh
    ▪ .gitignore
    ▪ README.md

  4. Актуализировать данные в Vagrantfile

    ▪ config.vm.synced_folder

      Вписать сюда актуальные пути.

    ▪ config.ssh.username, config.ssh.password

      Сюда вписать 'vagrant' как для пароля,
      так и для логина (потом, когда включим
      пользователя root, надо будет сменить).

  5. Создать, запустить и войти в виртуальную машину

    cd "C:\WebDev\projects\manveloff\cleaning\vagrant"
    vagrant up
    vagrant ssh

  6. Разрешить логиниться пользователю root через ssh

    Открыть конфиг:
      sudo nano /etc/ssh/sshd_config

    Изменить значение PermitRootLogin на yes:
      PermitRootLogin yes

    Закрыть и сохранить конфиг.

  7. Включить пользователя root

    Выполните эту команду и задайте пароль 'root' для root:
      sudo passwd root

    Затем выполните эту команду, чтобы разблокировать root-аккаунт:
      sudo passwd -u root

  8. Остановить виртуальную машину

    cd "C:\WebDev\projects\manveloff\cleaning\vagrant"
    vagrant halt

  9. Актуализировать данные в Vagrantfile

    ▪ config.ssh.username, config.ssh.password

      Сюда вписать 'root' как для пароля,
      так и для логина (потом, когда включим
      пользователя root, надо будет сменить).

  10. Сделать так, чтобы при vagrant ssh не спрашивался пароль

    По умолчанию, даже учитывая, что у вас в Vagrantfile
    указан пароль root, команда vagrant ssh продолжает
    запрашивать пароль при входе, что напрягает.

    Сделаем, чтобы она не запрашивала. Для этого заменим
    первым файлом второй:

      первый  C:\Users\<user>\.vagrant.d\insecure_private_key
      второй  C:\WebDev\projects\manveloff\cleaning\vagrant\.vagrant\machines\default\virtualbox\private_key

    После чего vagrant ssh перестанет спрашивать пароль.  

  11. Снова запустить VM и убедиться, что вы вошли, как root
    
    cd "C:\WebDev\projects\manveloff\cleaning\vagrant"
    vagrant root

> Образцы файлов

  • Образец Vagrantfile

    #################################################
    ##                                             ##
    ##   Vagrantfile for VM creating via Vagrant   ##
    ##                                             ##
    #################################################
    ## Table of contents ##
    #######################
    #
    # 1. Configure folders to share via NFS
    # 2. Other settings, you can don't touch them
    #   2.1. The base image (box)
    #   2.2. Configuring of initializers
    #   2.3. Configuring of NAT-network (guest<>host<>world)
    #   2.4. Configuring of host-only-network (guest<>host)
    #   2.5. Disable the check for updates box
    #   2.6. Set limits on virtual machine
    #   2.7. Configure the timeout for the virtual machine (1000 seconds default)
    #   2.n. Message after vagrant up
    #
    Vagrant.configure(2) do |config|
      
      ###########################################
      ## 1. Configure folders to share via NFS ##
      ###########################################  
      config.vm.synced_folder "c:/webdev/projects/manveloff/cleaning/vagrant", "/manveloff/cleaning/env/vagrant"

      #################################################
      ## 2. Other settings, you can don't touch them ##
      #################################################    
        
        ###############################
        ## 2.1. The base image (box) ##
        ###############################
        config.vm.box = "ubuntu/trusty64"
        config.ssh.username = 'root'
        config.ssh.password = 'root'
        
        ######################################
        ## 2.2. Configuring of initializers ##
        ######################################          
        
          ## 2.2.1. Running only in the 1st vagrant up ##
          ###############################################    
          config.vm.provision :shell, path: "bootstrap.sh"
            
          ## 2.2.2. Running every vagrant up ##
          ##################################### 
          # config.vm.provision "shell", inline: "sudo service docker start", run: "always"
            
        ##########################################################
        ## 2.3. Configuring of NAT-network (guest<>host<>world) ##
        ##########################################################
        config.vm.network :forwarded_port, guest: 80, host: 80
        config.vm.network :forwarded_port, guest: 443, host: 443
        config.vm.network :forwarded_port, guest: 25, host: 25
        config.vm.network :forwarded_port, guest: 587, host: 587
        config.vm.network :forwarded_port, guest: 465, host: 465
        config.vm.network :forwarded_port, guest: 993, host: 993
        config.vm.network :forwarded_port, guest: 143, host: 143
        config.vm.network :forwarded_port, guest: 110, host: 110
        config.vm.network :forwarded_port, guest: 995, host: 995
        # config.vm.network :forwarded_port, guest: 9050, host: 9050
        # config.vm.network :forwarded_port, guest: 9150, host: 9150
        
        config.vm.network :forwarded_port, guest: 3306, host: 3306
        config.vm.network :forwarded_port, guest: 6001, host: 6001
        config.vm.network :forwarded_port, guest: 3000, host: 3000
        config.vm.network :forwarded_port, guest: 3001, host: 3001
        config.vm.network :forwarded_port, guest: 3002, host: 3002
        config.vm.network :forwarded_port, guest: 8000, host: 8000
        
        #########################################################
        ## 2.4. Configuring of host-only-network (guest<>host) ##
        #########################################################     
        config.vm.network "private_network", ip: "10.10.10.10", adapter: 2
        
        ############################################
        ## 2.5. Disable the check for updates box ##
        ############################################    
        config.vm.box_check_update = false

        ########################################
        ## 2.6. Set limits on virtual machine ##
        ########################################    
        config.vm.provider "virtualbox" do |v|
          
          ## 2.6.1. Memory ##
          ###################   
          v.memory = 8192
          
          ## 2.6.2. cpu ##
          ################    
          v.cpus = 2
          
          ## 2.6.3. Enable vagrant GUI (for debugging) ##
          ###############################################
          # v.gui = true
          
        end  
        
        ###############################################################################
        ## 2.7. Configure the timeout for the virtual machine (1000 seconds default) ##
        ###############################################################################   
        config.vm.boot_timeout = 1000
        
        #####################################
        ## 2.n. Сообщение после vagrant up ##
        #####################################
        config.vm.post_up_message = "Virtual machine is ready to work!"
      
    end

  • Образец bootstrap.sh

    #!/usr/bin/env bash

    # Установить git
    sudo apt-get update && sudo apt-get install -y \

      git \
      jq

    # Установить docker
    curl -sSL https://get.docker.com/ | sh

    # Установить docker-compose
    curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose

    # Настроить PS1 prompt
    sed -i -e '$aPS1='\''\\s->\\W\\$ '\' /home/vagrant/.bashrc

    # Создать группу docker и добавить в неё пользователя vagrant
    sudo usermod -aG docker vagrant

  • Образец .gitignore

    .vagrant

  • Образец README.md

    # Vagrant box, ubuntu 16.04, docker and docker compose
    ---
    ## Оглавление

      - [Ссылки](#link1)
      - [Описание](#link2)

    ---

    ## Ссылки <a id="link1"></a>
    ```

      > Address
          https://gitlab.manveloff.ru/general/vagrant.git

          
    ```
    ## Описание <a id="link2"></a>
    ```

      Общее описание
      - Это box для vagrant для локальной разработки проектов под брендом manveloff.
      - Cодержит Ubuntu 16.04 и установленные docker и docker compose.
      - Работает как на Windows, так и на MacOS.
      
      Настройка проброса папок
      - В box необходимо пробрасывать папку с проектом с машины-хоста, её надо настроить.
      - Это делается в файле Vagrantfile, в разделе "1. Configure folders to share via NFS".
      
    ```  

А2. Подключение диска ВМ к windows в виде тома
-------------------------------------

  # Постановка задачи
  # Пошаговая инструкция

-------------------------------------

> Постановка задачи

  После каждого запуска ВМ, чтобы разработка с хост-машины
  была возможна, необходимо монтировать файловую систему
  виртуальной машины с ubuntu на windows в виде нового
  тома Z:

> Пошаговая инструкция

  1. Скачать и установить программу SFTP Net Drive.
  2. Настроить в ней новый профиль:

    server:     127.0.0.1:2222
    username:   root
    password:   root

  3. Зайти в advanced

    Выбрать вкладку drive.
    Там для "Root folder on the Server" выбрать 
    "Specified folder", и указать "/". Нажать OK.

  4. Нажать connect

    Должно произойти подключение, и новый том откроется
    в проводнике в новом окне.


А3. Подготовка каталога проекта в ВМ к разработке
-------------------------------------

  # Постановка задачи
  # Пошаговая инструкция

-------------------------------------

> Постановка задачи

  Необходимо подготовить каталог проекта, его структуру,
  в файловой структуре ВМ.

> Пошаговая инструкция

  1. Запустите ВМ и смонтируйте её ФС на хост.
  2. Подготовьте в любом месте смонтированной ФС папку для проекта:

    Например: /manveloff/cleaning

  3. Создайте файловую структуру проекта в этой папке:
  
    docs/
    env/
      docker/
        app/
        mysql/
        redis/
        nodejs/
      vagrant/
    other/
      production/
        backups/
        data/
        dumps/
        https/
        logs/
        secrets/
        storage/
      workbench/
    project/
  
  
А4. Настроить терминальный доступ к docker registry на gitlab
-------------------------------------

  # Постановка задачи
  # Пошаговая инструкция

-------------------------------------

> Постановка задачи

  Мои проекты используют Docker-образы, которые обычно лежат
  в Docker-реестре в GitLab. Но необходимо, чтобы новый проект 
  имел доступ к образам. Доступ надо настроить через 
  .bashrc для root.

> Пошаговая инструкция

  1. Сначала надо создать personal access token

    Идём в settings профиля.
    Там в Access Tokens.
    Создаём новый токен с одним scope'ом: "read_registry".
    Записываем его в project/other/secrets/docker/credentials.json, 
    т.к. потом доступа к нему не будет.

  2. Добавляем строку входа в /root/.bashrc

    Запускаем ВМ.
    Редактируем .bashrc:

      sudo nano /root/.bashrc

    В конце добавляем строки:

      # Login to the GitLab Docker registry
      docker login <адрес>:<порт> -u <login> -p <personal access token>

    Адрес и порт можно посмотреть, открыв проект на gitlab, 
    и там зайдя в Registry.

    Логин используйте тот же, для которого создавался 
    personal access token.


А5. Установка моего стартового Laravel-проекта
-------------------------------------

  # Постановка задачи
  # Пошаговая инструкция

-------------------------------------

> Постановка задачи

  Чаще всего новый проект стартуют не с нуля, а используют
  либо какую-то заготовку под стартовый проект, либо 
  просто клонируют предыдущий проект, и настраивают
  его под новый.

  Я разрабатываю Laravel-проекты, и после клонирования
  такого-проекта требуется выполнить кое-какие действия.

> Пошаговая инструкция

  1. Перейти в каталог проекта.
  2. Установить composer-зависимости

    composer install

  3. Установить npm зависимости

    npm install

  4. Собрать фронтенд для dev

    npm run development

  5. Изменить права для папки storage

    sudo chmod -R 777 storage

  6. Создать папку other/logs/security

    sudo mkdir other/logs/security
    sudo chmod -R 777 other/logs

  7. Создать и заселить базу данных

    artisan migrate:refresh --seed --force
    artisan vendor:publish --tag=extensions --force


А6. Настройка SSH-подключения только через ключи к VDS-серверу
--------------------------------------
Подоглавление:

  # Ссылки
  # Введение
  # Пошаговая инструкция

    1. Создай новую пару public/private ключей
    2. Положи публичный ключ в файл authorized_keys на сервере
    3. Сохрани куда-нибудь ключи из PuTTY
    4. В PuTTY укажи путь к приватному ключу для подключения    
    5. Деактивируй возможность подключаться к серверу через логин/пароль
    6. В настройках WinSCP не забудь указать ключ вместо пароля
    7. Настрой стартовый каталог при подключении к серверу

--------------------------------------

> Ссылки

  # Хороший туториал по теме
      https://www.8host.com/blog/ssh-klyuchi-dlya-podklyucheniya-vps-s-pomoshhyu-putty/

> Введение

  Когда покупаешь новый виртуальный сервер, первым делом
  необходимо обезопасить его от взлома, и настроить
  подключение только через ssh-ключи, отключив возможность
  входа через пароль.

  - Каждый раз вводить пароль для подключения к VDS через SSH надоедает.
  - Кроме того, подключаться к базе данных через пароль небезопасно.
  - Поэтому, лучше организовать подключение через SSH-ключ.
  - В этой главе дана пошагавая инструкция, как это сделать.

> Пошаговая инструкция

  1. Перейти в папку, куда хочешь сохранить пару SSH-ключей

  2. Создай пару SSH-ключей на своём локальном Linux
    - Введи команду:

      ssh-keygen -t rsa

    - Он спросит, куда сохранить: id_rsa
    - Pass Phrase оставить пустой.
    - Проверить, что ключи создались: ls

  3. Запиши созданный public-ключ в authorized_keys удалённого сервера
    - Введи пароль, когда попросит.

      ssh-copy-id -i id_rsa.pub root@185.58.205.88

  4. Подключись к серверу по паролю, и проверь
    - Что появился файл authorized_keys.

      ssh root@185.58.205.88
      sudo nano ~/.ssh/authorized_keys

  5. Деактивируй возможность подключаться к серверу через логин/пароль
    - Открой программу WinSCP и подключись к серверу.
    - Открой файл /etc/ssh/sshd_config (не перепутай с ssh_config).
    - Отредактируй там следующим образом следующие св-ва:

        PasswordAuthentication no
        UsePAM no

    - Затем выполни на сервере команду:

        sudo reload ssh         | ubuntu 14.04
        service ssh restart     | ubuntu 16.04

  6. Проверь, работает ли подключение по SSH по ключу

    ssh -i id_rsa root@185.58.205.88

  7. [При использовании WinSCP] В настройках WinSCP не забудь указать ключ вместо пароля
    - После пункта #5 ты уже не сможешь подключаться по логину/паролю.
    - Поэтому, отредактируй подключение в WinSCP, указав приватный ключ.
    - Для WinSCP понадобится putty-версия приватного ключа, но 
      последние версии WinSCP сами создают putty-версию при попытке
      назнаичть не putty-версию.


А7. Связать домен с сервером, настроить поддомен, сделать переадресацию
--------------------------------------
Подоглавление:

  # Ссылки
  # Введение
  # Пошаговые инструкции

    • Создание поддомена
    • Привязка домена к хостингу
    • Переадресация с одного домена на другой

--------------------------------------

> Ссылки

  • Как привязать домен к хостингу?
      https://www.reg.ru/support/hosting-i-servery/sajty-i-domeny/kak-nastroit-dns/kak-privyazat-domen-k-hostingu

  • Как привязать домен к стороннему хостингу?
      https://www.reg.ru/support/domains/dns_servery_i_nastroika_zony/DNS-servery/kak-privyazat-domen-k-storonnemu-hostingu

  • Как создать поддомен?
      https://www.reg.ru/support/hosting-i-servery/sajty-i-domeny/kak-dobavit-novy-domen-poddomen-psevdonim/kak-dobavit-poddomen

  • Что такое «Ресурсные записи DNS»
      https://www.reg.ru/support/domains/dns_servery_i_nastroika_zony/Nastroika-zony/chto-takoe-resursnye-zapisi-dns

> Введение

  В любом новом проекте вам понадобится связать домен
  с IP-адресом сервера. Также, часто требуется создать
  поддомен.

> Ситуация-пример для рассмотрения в этой главе

  • Есть такие домены и поддомены

    manveloff.com
    manveloff.ru
    cleaning.manveloff.ru
    gitlab.manveloff.ru

  • Что надо сделать

    1. Переадресацию 301 с .com на .ru

      Чтобы с manveloff.com и любых поддоменов запрос
      переадресовывался на manveloff.ru и соответствующий
      поддомен.

      Примеры:

        manveloff.com           -->  manveloff.ru
        gitlab.manveloff.com    -->  gitlab.manveloff.ru
        cleaning.manveloff.com  -->  cleaning.manveloff.ru
        abcde.manveloff.com     -->  abcde.manveloff.ru

    2. Переадресации c www. на без www.
    3. Связать gitlab.manveloff.ru с gitlab-сервером.
    4. Связать cleaning.manveloff.ru с клининговым сервером.
    5. Связать manveloff.ru с тем же клининговым сервером.

      Идея состоит в том, чтобы просто-напросто в роутинге
      Laravel прописать разные роуты для доменов manveloff.ru,
      и cleaning.manveloff.ru.

      Если домен manveloff.ru, то используется набор роутов
      для моего личного сайта.

      Если домен cleaning.manveloff.ru, то используется набор
      роутов для клинингового агрегатора.

> Пошаговые инструкции

  1. Используем бесплатные DNS-сервера регистратора домена

    Выполняем следующее для каждого домена 
    (manveloff.com, manveloff.ru).

    Заходим на сайт регистратора домена, в панель управления.

    Там заходим в раздел "DNS-серверы", и устанавливаем
    для домена бесплатные DNS-серверы регистратора.

  2. Настраиваем ресурсные записи DNS

    Заходим на сайт регистратора домена, в панель управления.
    Открываем "Управление зоной".

    • Для домена manveloff.com 
    
      КЛАСС   ПОДДОМЕН    ДОМЕН           ЗНАЧЕНИЕ
      --------------------------------------------
      NS      @           manveloff.com   ns1.reg.ru.
      NS      @           manveloff.com   ns2.reg.ru.
      CNAME   www         manveloff.com   manveloff.ru
      CNAME   gitlab      manveloff.com   gitlab.manveloff.ru
      CNAME   cleaning    manveloff.com   cleaning.manveloff.ru
      CNAME   *           manveloff.com   cleaning.manveloff.ru
    
    • Для домена manveloff.ru

      КЛАСС   ПОДДОМЕН    ДОМЕН           ЗНАЧЕНИЕ
      --------------------------------------------
      NS      @           manveloff.ru    ns1.reg.ru.
      NS      @           manveloff.ru    ns2.reg.ru.
      CNAME   www         manveloff.ru    manveloff.ru
      CNAME   *           manveloff.ru    cleaning.manveloff.ru
      A       @           manveloff.ru    <ip клинингового сервера>
      A       gitlab      manveloff.ru    <ip сервера с гитлабом>
      A       cleaning    manveloff.ru    <ip клинингового сервера>

  • Создание поддомена



  • Привязка домена к хостингу

    1. Используем бесплатные DNS-сервера регистратора домена

      Заходим на сайт регистратора домена, в панель управления.

      Там заходим в раздел "DNS-серверы", и устанавливаем
      для домена бесплатные DNS-серверы регистратора.

    2. Настраиваем домен

      Заходим на сайт регистратора домена, в панель управления.
      Открываем "Управление зоной".

      • Добавляем записи "A"




    1. Привязать DNS-сервера хостинг-провайдера у регистратора домена

      Надо зайли в личный кабинет хостинг-провайдера, где у 
      вас куплен домен, и там посмотреть адреса его DNS-
      серверов.

      Затем взять эти адреса, открыть личный кабинет регистратора
      вашего домена, и вписать их туда.

    2. 

  • Переадресация с одного домена на другой








А8. Установка, настройка GitLab EE
--------------------------------------
Подоглавление:

  # Ссылки
  # Введение
  # Пошаговая инструкция

    1. Создай новую пару public/private ключей
    2. Положи публичный ключ в файл authorized_keys на сервере
    3. Сохрани куда-нибудь ключи из PuTTY
    4. В PuTTY укажи путь к приватному ключу для подключения    
    5. Деактивируй возможность подключаться к серверу через логин/пароль
    6. В настройках WinSCP не забудь указать ключ вместо пароля
    7. Настрой стартовый каталог при подключении к серверу

--------------------------------------

> Ссылки

  • Официальная инструкция по устаноке GitLab Omnibus
      https://about.gitlab.com/installation/#ubuntu

> Введение

  В наше время (2018 год), многие проекты, в том числе мои,
  используют GitLab. Наиболее популярная версия, наверное,
  это GitLab EE за 4$/месяц с человека. Рассмотрим здесь,
  как её установить и настроить.

> Пошаговая инструкция

  1. Подключитесь к вашему серверу, куда хотите установить gitlab

    Желательно, чтобы кроме gitlab на этом сервере ничего
    другого не было.

  2. Установите gitlab
  
    sudo apt-get update
    sudo apt-get install -y curl openssh-server ca-certificates
    sudo apt-get install -y postfix
    curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash

    В следующей строке замените <domain> на домен, где будет
    лежать ваш gitlab. Например, "gitlab.example.com"

    sudo EXTERNAL_URL="http://<domain>" apt-get install gitlab-ee

  3. Установите пароль для администратора

    Откройте установленный GitLab в браузере, 
    так как это будет первое посещение,
    он попросит установить пароль для администратора.

  4. Войдите в GitLab, как администратор

    Используя логин root и установленный для него пароль.


