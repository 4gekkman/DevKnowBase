////=================================================////
////                                                 ////
////                     Cordova                     ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  # Cordova

    • Сайт
      
        https://cordova.apache.org

    • Документация

        https://cordova.apache.org/docs/en/latest/

  # Плагины

    • Поиск

        https://cordova.apache.org/plugins/
        https://www.npmjs.com/search?q=ecosystem%3Acordova

    • Разработка

        https://cordova.apache.org/docs/en/8.x/guide/hybrid/plugins/index.html


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Теоретические основы Cordova

    А1. Обзор Cordova
    А2. Архитектура Cordova

  # X.  Практика и наработки

    X1. 



////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Обзор Cordova
--------------------------------------
Подоглавление:

  # Что такое Cordova

    ▪ Фреймворк для мобильной разработки на html/css/js
    ▪ Фреймворк для кроссплатформенной разработки (android/ios/...)
    ▪ Приложение выполняется в обёртке, которая взаимодействует с API платформы
    ▪ В каком случае использовать Cordova
      ▪ Ты мобильный разработчик, и нужна кроссплатформенность
      ▪ Ты мобильный разработчик, и хочешь миксовать нативные компоненты с WebView
      ▪ Ты веб-разработчик, и хочешь быстро научить делать мобильные приложения

--------------------------------------

> Что такое Cordova

  • Фреймворк для мобильной разработки на html/css/js
  
    Apache Cordova, это open-source фреймворк для мобильной
    разработки. Он позволяет использовать стандартные 
    веб-технологии - html5, css3, javascript - для разработки
    мобильных приложений.

  • Фреймворк для кроссплатформенной разработки (android/ios/...)
  
    Cordova-приложения являются кроссплатформенными - пишешь
    одно приложение, которое работает и на android, и на 
    ios, и на windows mobile, и на других платформах. Важно
    лишь следить, чтобы все используемые в приложении плагины
    поддерживались на всех платформах, которые тебе нужны.

  • Приложение выполняется в обёртке, которая взаимодействует с API платформы
  
    Cordova-приложение запускается в особой обёртке. Для каждой
    платформы эта обёртка своя. Внутри обёртки работает ваше
    html/css/js приложение, из которого вы обращаетесь к обёртке,
    а она уже обращается к нативному API данной платформы 
    (например, запускает камеру смартфона, имеет доступ к данным, и т.д.)

  • В каком случае использовать Cordova

    ▪ Ты мобильный разработчик, и нужна кроссплатформенность
    
      Ты мобильный разработчик, и ты не хочешь писать для каждой
      платформы изучать свои технологии, писать и поддерживать
      своё приложение. А хочешь, чтобы у тебя было 1-но приложение,
      работающее на всех нужных тебе платформах.

    ▪ Ты мобильный разработчик, и хочешь миксовать нативные компоненты с WebView
    
      Ты мобильный рзработчик, и хочешь смешивать нативные
      компоненты с WebView (специальное окно браузера), 
      которое может иметь доступ к нативным API платформы. 
      Либо, ты хочешь разработать плагин (интерфейс) между
      WebView и нативным функционалом.

    ▪ Ты веб-разработчик, и хочешь быстро научить делать мобильные приложения

      Ты веб-разработчик, у тебя есть какое-то веб-приложение,
      и ты не прочь запилить на html/css/js интерфейс для него
      в виде мобильного приложения, и задеплоить его в app store,
      google play.

> А2. Архитектура Cordova
--------------------------------------

  # Кратко об архитектуре Cordova-приложения

    • Оно, как ящик, в который суёшь веб-приложение
    • Сам ящик можно установить на android, ios, и пр.платформы
    • Ящик показывает ваше веб-приложение через браузер
    • У ящика есть интерфейсы для связи веб-приложения с API платформ

  # Про WebView

    • Встроенный в cordova-приложение браузер
    • В нём и живёт ваше веб-приложение внутри Cordova-приложения
    • Ещё его можно вставить в нативное приложение

  # Про Web App

    • Имеется в виду ваше html/css/js приложение
    • Веб-приложение выполняется в WebView в нативном Cordova-приложении (ящике)
    • У ящика есть оч.важный файл config.xml для его настройки

  # Про Cordova-плагины

    • Взаимодействием между Cordova-приложением и нативным API платформы
    • Core-плагины
    • Сторонние плагины
    • Можно запилить свой плагин
    • Плагины в проект надо явно добавлять, изначально там 0

  # Workflow #1: кросс-платформенный

    • Cordova предоставляет 2 варианта workflow
    • Процесс установки Cordova отличается в завис.от выбранного workflow
    • MAX число платформ, MIN платформо-специфичных доделок
    • Этот workflow выстроен вокруг Cordova CLI
    • Этот workflow является рекомендуемым

  # Workflow #2: платформо-центричный

    • Cordova предоставляет 2 варианта workflow
    • Процесс установки Cordova отличается в завис.от выбранного workflow
    • Одна платформа, низкоуровневый контроль
    • Надо уметь нативную разработку
    • Обратного пути нет



--------------------------------------

> Кратко об архитектуре Cordova-приложения

  • Оно, как ящик, в который суёшь веб-приложение

    Cordova-приложение, оно, как ящик. Туда можно внутрь
    запихнуть своё веб-приложение.

  • Сам ящик можно установить на android, ios, и пр.платформы

    Этот ящик, это как заготовка под приложение на любой
    платформе (android, ios, и пр.). Чистый лист.
    Можно прям взять, и эту заготовку запилить в 
    app store и google play, и оно будет устанавливаться
    на apple и android смартфоны.

  • Ящик показывает ваше веб-приложение через браузер

    Когда ящик ставят на конкретную платформу (android, ios, и пр.),
    и запускают, он показывают юзеру WebView (встроенный браузер),
    а в нём выводит ваше приложение. 

  • У ящика есть интерфейсы для связи веб-приложения с API платформ

    Все запросы вашего веб-приложения к API ящика он, в зависимости
    от платформы, где он выполняется, преобразует в запросы к 
    API этой платформы через cordova-плагины. Для каждого плагина
    на сайте указано, какие он платформы поддерживает. 

> Про WebView

  • Встроенный в cordova-приложение браузер
  
    WebView, это встроенный в cordova-приложение браузер.

  • В нём и живёт ваше веб-приложение внутри Cordova-приложения
  
    Когда вы запускаете приложение на конкретной платформе,
    то в этом браузере внутри приложения и отображается ваше
    веб-приложение, и через него идёт его взаимодейстие 
    с нативным API платформы.

  • Ещё его можно вставить в нативное приложение

    Можно просто взять любое нативное приложение, и вставить
    туда WebView с веб-приложением.

> Про Web App

  • Имеется в виду ваше html/css/js приложение
  
    Весь код приложения реализован на html/css/js. По умолчанию,
    точкой входа является index.html.

  • Веб-приложение выполняется в WebView в нативном Cordova-приложении (ящике)
  
    Веб-приложение выполняется в WebView в нативном Cordova-приложении 
    (ящике), который можно деплоить в app store, google play и т.д.

  • У ящика есть оч.важный файл config.xml для его настройки

    Cordova-приложение имеет очень важный файл - config.xml.
    Это его конфиг, здесь можно настраивать всякие важные штуки,
    например, что делать при смене ориентации устройства, и т.д.

> Про Cordova-плагины

  • Взаимодействием между Cordova-приложением и нативным API платформы

    Плагины являются очень важной частью экосистемы.
    Они обеспечивают взаимодействие между кордовой и нативными
    API платформ, на которых Cordova-приложение должно будет
    работать. Что и позволяет вызывать нативный код соотв.
    платформы прямо из JS.

  • Core-плагины

    У кордовы есть core-плагины, которые она поддерживает,
    и которые дают доступ к основной функциональности
    устройств, такой как батарея, камера, контакты и т.д.

  • Сторонние плагины

    А есть куча сторонних плагинов, которые реализовывают
    различные фичи (иногда, специфичные для той или иной
    платформы).

  • Можно запилить свой плагин

    Плюс, можно запиливать и свои собственные плагины,
    но для этого надо уметь нативную разработку на тех
    платформах, для которых эти плагины будут предназначены.

  • Плагины в проект надо явно добавлять, изначально там 0

    При создании Cordova-проекта, в нём 0 плагинов. Их надо
    явно вручную подключать.

> Workflow #1: кросс-платформенный

  • Cordova предоставляет 2 варианта workflow

    Первый, кросс-платформенный.
    Второй, платформо-центричный.

  • Процесс установки Cordova отличается в завис.от выбранного workflow

    В зависимости от выбранного (одного из 2х) workflow,
    процесс установки отличается. 

  • MAX число платформ, MIN платформо-специфичных доделок

    Используйте этот workflow, если хотите, чтобы ваше
    приложение запускалось на максимальном количестве
    разных платформ, с минимальными потребностями
    в платформо-специфичных доработках.

  • Этот workflow выстроен вокруг Cordova CLI

    CLI позволяет собирать проект для разных платформ
    за один приём; абстрагироваться от низко-уровневых
    shell-скриптов, просто используя команды CLI.

    CLI рассовывает файлы вашего веб-приложения по 
    подпапкам для каждой из поддерживаемых вашим 
    приложением платформ; 
    выполняет необходимую настройку для каждой из них; 
    запускает скрипты, выпоняющие сборку приложений для
    каждой платформы, и генерирующие соотв.бинарники.

    В CLI также есть интерфейс для управления плагинами
    приложения, добавления, удаления, и пр.

  • Этот workflow является рекомендуемым

    Пока вам прям очень не понадобится платформо-центричный
    workflow, рекомендуется придерживаться этого workflow.

> Workflow #2: платформо-центричный

  • Cordova предоставляет 2 варианта workflow

    Первый, кросс-платформенный.
    Второй, платформо-центричный.

  • Процесс установки Cordova отличается в завис.от выбранного workflow

    В зависимости от выбранного (одного из 2х) workflow,
    процесс установки отличается. 

  • Одна платформа, низкоуровневый контроль

    Используйте этот workflow, если хотите, чтобы 
    выше приложение было сфокусировано на одной
    конкретной платформе, и у вас была возможность
    вносить изменения на низком уровне.

    Например, если вам нужно, чтобы приложение
    сочетало в себе кастомные нативные компоненты
    с базирующимися на web компонентами кордовы.

  • Надо уметь нативную разработку

    Чтобы этим заниматься, надо уметь нативную разработку.
    Это подходит тем, кто умеет и нативные приложения делать
    для конкретной платформы, и гибридные. И хочет сделать
    приложение, содержащее всего и нативные, и гибридные вещи.
    Но, зато, это даёт больше гибкости в разработке.
  
  • Обратного пути нет

    Если переходишь от CLI-центричного workflow к платформо-
    центричному, обратного пути нет. CLI при каждой сборке
    приложения перезаписывает платформо-специфичный код,
    и стирает все изменения, которые вы могли туда внести.

    Поэтому, чтобы избежать потери ваших платформо-специфичных
    изменений, вам нужно переключаться на платформо-центричные
    shell-инструменты, которые игнорируют кросс-платформенный
    исходный код, и, вместо этого, полагаются на платформо-
    специфичный исходный код.

