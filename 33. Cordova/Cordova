////=================================================////
////                                                 ////
////                     Cordova                     ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  # Cordova

    • Сайт
      
        https://cordova.apache.org

    • Документация

        https://cordova.apache.org/docs/en/latest/

  # Плагины

    • Поиск

        https://cordova.apache.org/plugins/
        https://www.npmjs.com/search?q=ecosystem%3Acordova

    • Разработка

        https://cordova.apache.org/docs/en/8.x/guide/hybrid/plugins/index.html


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Теоретические основы Cordova

    А1. Обзор Cordova
    А2. Архитектура Cordova
    А3. Подготовка Docker-среды для разработки Cordova-приложений
    А4. Создание Cordova-приложения (туториал)

  # X.  Практика и наработки

    X1. 



////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Обзор Cordova
--------------------------------------
Подоглавление:

  # Что такое Cordova

    ▪ Фреймворк для мобильной разработки на html/css/js
    ▪ Фреймворк для кроссплатформенной разработки (android/ios/...)
    ▪ Приложение выполняется в обёртке, которая взаимодействует с API платформы
    ▪ В каком случае использовать Cordova
      ▪ Ты мобильный разработчик, и нужна кроссплатформенность
      ▪ Ты мобильный разработчик, и хочешь миксовать нативные компоненты с WebView
      ▪ Ты веб-разработчик, и хочешь быстро научить делать мобильные приложения

--------------------------------------

> Что такое Cordova

  • Фреймворк для мобильной разработки на html/css/js
  
    Apache Cordova, это open-source фреймворк для мобильной
    разработки. Он позволяет использовать стандартные 
    веб-технологии - html5, css3, javascript - для разработки
    мобильных приложений.

  • Фреймворк для кроссплатформенной разработки (android/ios/...)
  
    Cordova-приложения являются кроссплатформенными - пишешь
    одно приложение, которое работает и на android, и на 
    ios, и на windows mobile, и на других платформах. Важно
    лишь следить, чтобы все используемые в приложении плагины
    поддерживались на всех платформах, которые тебе нужны.

  • Приложение выполняется в обёртке, которая взаимодействует с API платформы
  
    Cordova-приложение запускается в особой обёртке. Для каждой
    платформы эта обёртка своя. Внутри обёртки работает ваше
    html/css/js приложение, из которого вы обращаетесь к обёртке,
    а она уже обращается к нативному API данной платформы 
    (например, запускает камеру смартфона, имеет доступ к данным, и т.д.)

  • В каком случае использовать Cordova

    ▪ Ты мобильный разработчик, и нужна кроссплатформенность
    
      Ты мобильный разработчик, и ты не хочешь писать для каждой
      платформы изучать свои технологии, писать и поддерживать
      своё приложение. А хочешь, чтобы у тебя было 1-но приложение,
      работающее на всех нужных тебе платформах.

    ▪ Ты мобильный разработчик, и хочешь миксовать нативные компоненты с WebView
    
      Ты мобильный рзработчик, и хочешь смешивать нативные
      компоненты с WebView (специальное окно браузера), 
      которое может иметь доступ к нативным API платформы. 
      Либо, ты хочешь разработать плагин (интерфейс) между
      WebView и нативным функционалом.

    ▪ Ты веб-разработчик, и хочешь быстро научить делать мобильные приложения

      Ты веб-разработчик, у тебя есть какое-то веб-приложение,
      и ты не прочь запилить на html/css/js интерфейс для него
      в виде мобильного приложения, и задеплоить его в app store,
      google play.


> А2. Архитектура Cordova
--------------------------------------

  # Кратко об архитектуре Cordova-приложения

    ▪ Оно, как ящик, в который суёшь веб-приложение
    ▪ Сам ящик можно установить на android, ios, и пр.платформы
    ▪ Ящик показывает ваше веб-приложение через браузер
    ▪ У ящика есть интерфейсы для связи веб-приложения с API платформ

  # Про WebView

    ▪ Встроенный в cordova-приложение браузер
    ▪ В нём и живёт ваше веб-приложение внутри Cordova-приложения
    ▪ Ещё его можно вставить в нативное приложение

  # Про Web App

    ▪ Имеется в виду ваше html/css/js приложение
    ▪ Веб-приложение выполняется в WebView в нативном Cordova-приложении (ящике)
    ▪ У ящика есть оч.важный файл config.xml для его настройки

  # Про Cordova-плагины

    ▪ Взаимодействием между Cordova-приложением и нативным API платформы
    ▪ Core-плагины
    ▪ Сторонние плагины
    ▪ Можно запилить свой плагин
    ▪ Плагины в проект надо явно добавлять, изначально там 0

  # Workflow #1: кросс-платформенный

    ▪ Cordova предоставляет 2 варианта workflow
    ▪ Процесс установки Cordova отличается в завис.от выбранного workflow
    ▪ MAX число платформ, MIN платформо-специфичных доделок
    ▪ Этот workflow выстроен вокруг Cordova CLI
    ▪ Этот workflow является рекомендуемым

  # Workflow #2: платформо-центричный

    ▪ Cordova предоставляет 2 варианта workflow
    ▪ Процесс установки Cordova отличается в завис.от выбранного workflow
    ▪ Одна платформа, низкоуровневый контроль
    ▪ Надо уметь нативную разработку
    ▪ Обратного пути нет

--------------------------------------

> Кратко об архитектуре Cordova-приложения

  • Оно, как ящик, в который суёшь веб-приложение

    Cordova-приложение, оно, как ящик. Туда можно внутрь
    запихнуть своё веб-приложение.

  • Сам ящик можно установить на android, ios, и пр.платформы

    Этот ящик, это как заготовка под приложение на любой
    платформе (android, ios, и пр.). Чистый лист.
    Можно прям взять, и эту заготовку запилить в 
    app store и google play, и оно будет устанавливаться
    на apple и android смартфоны.

  • Ящик показывает ваше веб-приложение через браузер

    Когда ящик ставят на конкретную платформу (android, ios, и пр.),
    и запускают, он показывают юзеру WebView (встроенный браузер),
    а в нём выводит ваше приложение. 

  • У ящика есть интерфейсы для связи веб-приложения с API платформ

    Все запросы вашего веб-приложения к API ящика он, в зависимости
    от платформы, где он выполняется, преобразует в запросы к 
    API этой платформы через cordova-плагины. Для каждого плагина
    на сайте указано, какие он платформы поддерживает. 

> Про WebView

  • Встроенный в cordova-приложение браузер
  
    WebView, это встроенный в cordova-приложение браузер.

  • В нём и живёт ваше веб-приложение внутри Cordova-приложения
  
    Когда вы запускаете приложение на конкретной платформе,
    то в этом браузере внутри приложения и отображается ваше
    веб-приложение, и через него идёт его взаимодейстие 
    с нативным API платформы.

  • Ещё его можно вставить в нативное приложение

    Можно просто взять любое нативное приложение, и вставить
    туда WebView с веб-приложением.

> Про Web App

  • Имеется в виду ваше html/css/js приложение
  
    Весь код приложения реализован на html/css/js. По умолчанию,
    точкой входа является index.html.

  • Веб-приложение выполняется в WebView в нативном Cordova-приложении (ящике)
  
    Веб-приложение выполняется в WebView в нативном Cordova-приложении 
    (ящике), который можно деплоить в app store, google play и т.д.

  • У ящика есть оч.важный файл config.xml для его настройки

    Cordova-приложение имеет очень важный файл - config.xml.
    Это его конфиг, здесь можно настраивать всякие важные штуки,
    например, что делать при смене ориентации устройства, и т.д.

> Про Cordova-плагины

  • Взаимодействием между Cordova-приложением и нативным API платформы

    Плагины являются очень важной частью экосистемы.
    Они обеспечивают взаимодействие между кордовой и нативными
    API платформ, на которых Cordova-приложение должно будет
    работать. Что и позволяет вызывать нативный код соотв.
    платформы прямо из JS.

  • Core-плагины

    У кордовы есть core-плагины, которые она поддерживает,
    и которые дают доступ к основной функциональности
    устройств, такой как батарея, камера, контакты и т.д.

  • Сторонние плагины

    А есть куча сторонних плагинов, которые реализовывают
    различные фичи (иногда, специфичные для той или иной
    платформы).

  • Можно запилить свой плагин

    Плюс, можно запиливать и свои собственные плагины,
    но для этого надо уметь нативную разработку на тех
    платформах, для которых эти плагины будут предназначены.

  • Плагины в проект надо явно добавлять, изначально там 0

    При создании Cordova-проекта, в нём 0 плагинов. Их надо
    явно вручную подключать.

> Workflow #1: кросс-платформенный

  • Cordova предоставляет 2 варианта workflow

    Первый, кросс-платформенный.
    Второй, платформо-центричный.

  • Процесс установки Cordova отличается в завис.от выбранного workflow

    В зависимости от выбранного (одного из 2х) workflow,
    процесс установки отличается. 

  • MAX число платформ, MIN платформо-специфичных доделок

    Используйте этот workflow, если хотите, чтобы ваше
    приложение запускалось на максимальном количестве
    разных платформ, с минимальными потребностями
    в платформо-специфичных доработках.

  • Этот workflow выстроен вокруг Cordova CLI

    CLI позволяет собирать проект для разных платформ
    за один приём; абстрагироваться от низко-уровневых
    shell-скриптов, просто используя команды CLI.

    CLI рассовывает файлы вашего веб-приложения по 
    подпапкам для каждой из поддерживаемых вашим 
    приложением платформ; 
    выполняет необходимую настройку для каждой из них; 
    запускает скрипты, выпоняющие сборку приложений для
    каждой платформы, и генерирующие соотв.бинарники.

    В CLI также есть интерфейс для управления плагинами
    приложения, добавления, удаления, и пр.

  • Этот workflow является рекомендуемым

    Пока вам прям очень не понадобится платформо-центричный
    workflow, рекомендуется придерживаться этого workflow.

> Workflow #2: платформо-центричный

  • Cordova предоставляет 2 варианта workflow

    Первый, кросс-платформенный.
    Второй, платформо-центричный.

  • Процесс установки Cordova отличается в завис.от выбранного workflow

    В зависимости от выбранного (одного из 2х) workflow,
    процесс установки отличается. 

  • Одна платформа, низкоуровневый контроль

    Используйте этот workflow, если хотите, чтобы 
    выше приложение было сфокусировано на одной
    конкретной платформе, и у вас была возможность
    вносить изменения на низком уровне.

    Например, если вам нужно, чтобы приложение
    сочетало в себе кастомные нативные компоненты
    с базирующимися на web компонентами кордовы.

  • Надо уметь нативную разработку

    Чтобы этим заниматься, надо уметь нативную разработку.
    Это подходит тем, кто умеет и нативные приложения делать
    для конкретной платформы, и гибридные. И хочет сделать
    приложение, содержащее всего и нативные, и гибридные вещи.
    Но, зато, это даёт больше гибкости в разработке.
  
  • Обратного пути нет

    Если переходишь от CLI-центричного workflow к платформо-
    центричному, обратного пути нет. CLI при каждой сборке
    приложения перезаписывает платформо-специфичный код,
    и стирает все изменения, которые вы могли туда внести.

    Поэтому, чтобы избежать потери ваших платформо-специфичных
    изменений, вам нужно переключаться на платформо-центричные
    shell-инструменты, которые игнорируют кросс-платформенный
    исходный код, и, вместо этого, полагаются на платформо-
    специфичный исходный код.







План действий

  1. Создаём новый образ Cordova, как обрезанный клон NodeJS.
     (это нужно, т.к. cordova и ionic лучше разнести по разным образам).
     Заливаем этот образ в наш docker registry.
  2. Делаем в проекте алиас для кордовы.
  3. На винду ставим Android SDK.
  4. Создаем простое демо-приложение с платформами
     Browser, Android.
     Почему без iOS? 
     Для него нужен OSX, а его можно только на виртуалке иметь,
     и там надо будет ставить отдельно Cordova CLI, что геморно,
     и нам сейчас не нужно.
     Всё равно работать будем с ionic, и собарить всё в его
     облаке, а это всё в учебных чисто целях.
  5. Собираем демо-приложение через cli кордовы.
  6. Деплоим его в Google Play.


А3. Создание Cordova-приложения (туториал)
--------------------------------------

  # План действий

    ▪ Подготовить Docker-образ
    ▪ Создать и собрать приложение
    ▪ Задеплоить приложение в Google Play

  # Подготовка Docker-образа
  # Создание, сборка, обновление и деплой приложения в Google Play

    ▪ Создать рыбу проекта
    ▪ Настроить, какие платформы будет поддерживать приложение
    ▪ Собрать проект для всех платформ
      ▪ Собрать проект
      ▪ Результат для платформы browser
      ▪ Результат для платформы android

    ▪ Протестировать проект для платформы android
      ▪ Установить Android Studio
      ▪ Установить плагин Phonegap/Cordova
      ▪ Импортировать проект
      ▪ Тест на реальном android-телефоне
      ▪ Тест на эмуляторе устройства (AVD manager)

--------------------------------------

> Ссылки

  • Установка необходимых для сборки Android-приложения инструментов на Linux:
      https://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html
      https://gist.github.com/aryeharmon/85673d69b07c5b7061c38ac4323f409c

  • Деплой приложения в Google Play
      https://codeburst.io/publish-a-cordova-generated-android-app-to-the-google-play-store-c7ae51cccdd5
      https://developer.android.com/studio/publish/

  • Работа с платформой browser
      https://www.raymondcamden.com/2016/03/22/the-cordova-browser-platform

  • Android Studio
      https://developer.android.com/studio/

> План действий

  • Подготовить Docker-образ

    Необходимо создать отдельный Docker-образ на основе
    Ubuntu 16.04, который будет включать:

      Менеджер пакетов и Git:

        ▪ NPM + NodeJS, 
        ▪ Git,

      Cordova CLI:

        ▪ Cordova

      Необходимые для сборки проекта под android инструменты:

        ▪ Java Development Kit (JDK)
        ▪ Gradle
        ▪ Android SDK + пакеты для него

  • Создать и собрать приложение

    Этап 1: рыба

      ▪ С помощью Cordova CLI в Docker создаём рыбу приложения.
    
    Этап 2: цикл разработки (повторить, если надо)

      ▪ Меняем что-нибудь по мелочи.
      ▪ Собираем приложение с помощью Cordova CLI в Docker.
      ▪ Ставим на хост-машину (винду) Android Studio,
        открываем в нём проект.
      ▪ Подключаем смартфон на android к компу, 
        смотрим результат, нажав в Android Studio соотв.кнопку.

  • Задеплоить приложение в Google Play

      ▪ Настроить package.json и config.xml (и версию в нём)
      ▪ Настроить иконку приложения
      ▪ Собрать проект с флагом --release (получив unsigned apk)
      ▪ Создать ключ и подписать им проект (получив signed apk)
      ▪ Создать и оплатить Play Store dev-аккаунт ($25)
      ▪ Загрузить в Play Store свой signed apk.
      ▪ Дождаться, пока его кто-нибудь проверит из Google.
      ▪ Опубликовать приложение.

> Подготовка Docker-образа

  Образ подготовлен, называется "cordova" и находится в 
  docker registry в gitlab нашего проекта.

  Контейнер cordova запускается вместе с проектом, получить
  доступ к Cordova CLI можно через alias "cordova" в папке
  проекта.

> Создание, сборка, обновление и деплой приложения в Google Play

  • Создать рыбу проекта

    Я решил размещать демо-проекты для cordova в папке
    /bubbles/mobile/cordova.

    Перейдём в /bubbles/mobile/cordova и создадим проект
    DemoApp1 c помощью следующей команды:

      cordova create demoapp1 pro.bubbles.demoapp1 DemoApp1

  • Настроить, какие платформы будет поддерживать приложение

    Для этого сначала переходим в проект:
    
      cd /bubbles/mobile/cordova/demoapp1

    Чтобы посмотреть список доступных и уже установленных
    платформ, нужно ввести:

      cordova platform ls

    Мы выберем 2 платформы:

      ▪ browser     | чтобы можно было тестировать проект в браузере
      ▪ android     | чтобы можно было собрать проект для android

      cordova platform add browser
      cordova platform add android

    После добавления платформ с помощью platform ls 
    удостоверьтесь, что платформы добавились.

  • Собрать проект для всех платформ

    Собрать проект для всех платформ, либо для конкретной
    платформы, можно командой:

      cordova build <имя платформы/пусто, если для всех>

      cordova build             | для всех
      cordova build browser     | для платформы 'browser'
      cordova build android     | для платформы 'android'

    ▪ Результат для платформы browser

      Для платформы browser результатом будет браузерная
      версия приложения по адресу:
     
        /bubbles/project/project/mobile/cordova/demoapp1/platforms/browser

      С точкой входа по адресу:

        /bubbles/project/project/mobile/cordova/demoapp1/platforms/browser/www/index.html

    ▪ Результат для платформы android
      
      Для платформы android результатом будет файл

        /bubbles/project/project/mobile/cordova/demoapp1/platforms/android/app/build/outputs/apk/debug/app-debug.apk

      Это debug-версия приложения, которую можно использовать
      для его отладки, но не для деплоя в Google Play 
      (об этом будет подробнее ниже)

  • Протестировать проект для платформы browser

    Для этого запускаем на 8000 порту веб-сервер с проектом
    командой:

      cordova serve

    После чего можно перейти по по следующему адресу и откроется
    приложение: http://localhost:8000/browser/www

    *Техническое примечание: 

      Проброс порта 8000 из контейнера на Linux-хост 
      осуществляется вовсе не в docker-compose.yml, а
      в месте определения алиаса в project/other/cli/aliases.

  • Протестировать проект для платформы android

    1. Установить Android Studio

    2. Установить плагин Phonegap/Cordova
      
      Settings -> plugins -> browse repositories
      Перезапустить Android Studio

    3. Импортировать проект

      File -> New -> Import Project
      Импортируй папку mobile/cordova/demoapp1/platforms/android
      Дождись, пока всё импортируется.
      Устрани все ошибки при импорте, импорт при ошибке встаёт на паузу.
      Например, может не хватать какого-то пакета, он сам предложит установить.
      Установив этот пакет, импорт продолжится.
      Всё это может занять прилично времени, минут 30.

    4. Тест на реальном android-телефоне

      Подключаем через провод телефон.
      Включаем "Usb debugging"
      Сначала включаем "Отладка по USB" в телефоне (инструкция для android 8)
      - Настройки -> Система -> О телефоне -> 7 раз тап по "Номер сборки"
      - Настройки -> Система -> Для разработчиков -> Отладка по USB
      
      В Android Studio выбираем папочку app и кликаем Run -> Run app в верхнем меню.
      На экране телефона разрешаем студии подключиться USB Debug к телефону.
      Ждём, пока всё загрузится.
      Приложение установится и откроется, также оно будет доступно,
      как и любые другие приложения, в приложениях на телефоне.
      
      *Если вы до этого жали "отмена" на телефоне при запросе
      отладки по USB, и вылезла ошибка "insltall apk error",
      просто перевоткните провод в телефон, и попробуйте запустить снова.

    5. Тест на эмуляторе устройства (AVD manager)

      В верхнем меню: tools -> AVD manager -> Create virtual device
      Дальше выбираем экран, образ с определённой версией Android 
      (надо выбрать и нажать download, если ещё не скачен).
      
      И завершаем создание виртуального устройства.
      В Android Studio выбираем папочку app и кликаем Run -> Run app в верхнем меню.
      Выбираем там в "Available Virtual Devices" наше виртуальное устройство.
      Включится эмулятор, сначала ОС загрузится, потом приложение само включится.

  • Деплой приложения в Google Play






