////=================================================////
////                                                 ////
////                     Cordova                     ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  # Cordova

    • Сайт
      
        https://cordova.apache.org

    • Документация

        https://cordova.apache.org/docs/en/latest/

  # Плагины

    • Поиск

        https://cordova.apache.org/plugins/
        https://www.npmjs.com/search?q=ecosystem%3Acordova

    • Разработка

        https://cordova.apache.org/docs/en/8.x/guide/hybrid/plugins/index.html


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Теоретические основы Cordova

    А1. Обзор Cordova
    А2. Архитектура Cordova
    А3. Создание Cordova-приложения (туториал)
    А4. Cordova CLI
    А5. Cordova Events

  # X.  Практика и наработки

    X1. 


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Обзор Cordova
--------------------------------------
Подоглавление:

  # Что такое Cordova

    ▪ Фреймворк для мобильной разработки на html/css/js
    ▪ Фреймворк для кроссплатформенной разработки (android/ios/...)
    ▪ Приложение выполняется в обёртке, которая взаимодействует с API платформы
    ▪ В каком случае использовать Cordova
      ▪ Ты мобильный разработчик, и нужна кроссплатформенность
      ▪ Ты мобильный разработчик, и хочешь миксовать нативные компоненты с WebView
      ▪ Ты веб-разработчик, и хочешь быстро научить делать мобильные приложения

--------------------------------------

> Что такое Cordova

  • Фреймворк для мобильной разработки на html/css/js
  
    Apache Cordova, это open-source фреймворк для мобильной
    разработки. Он позволяет использовать стандартные 
    веб-технологии - html5, css3, javascript - для разработки
    мобильных приложений.

  • Фреймворк для кроссплатформенной разработки (android/ios/...)
  
    Cordova-приложения являются кроссплатформенными - пишешь
    одно приложение, которое работает и на android, и на 
    ios, и на windows mobile, и на других платформах. Важно
    лишь следить, чтобы все используемые в приложении плагины
    поддерживались на всех платформах, которые тебе нужны.

  • Приложение выполняется в обёртке, которая взаимодействует с API платформы
  
    Cordova-приложение запускается в особой обёртке. Для каждой
    платформы эта обёртка своя. Внутри обёртки работает ваше
    html/css/js приложение, из которого вы обращаетесь к обёртке,
    а она уже обращается к нативному API данной платформы 
    (например, запускает камеру смартфона, имеет доступ к данным, и т.д.)

  • В каком случае использовать Cordova

    ▪ Ты мобильный разработчик, и нужна кроссплатформенность
    
      Ты мобильный разработчик, и ты не хочешь писать для каждой
      платформы изучать свои технологии, писать и поддерживать
      своё приложение. А хочешь, чтобы у тебя было 1-но приложение,
      работающее на всех нужных тебе платформах.

    ▪ Ты мобильный разработчик, и хочешь миксовать нативные компоненты с WebView
    
      Ты мобильный рзработчик, и хочешь смешивать нативные
      компоненты с WebView (специальное окно браузера), 
      которое может иметь доступ к нативным API платформы. 
      Либо, ты хочешь разработать плагин (интерфейс) между
      WebView и нативным функционалом.

    ▪ Ты веб-разработчик, и хочешь быстро научить делать мобильные приложения

      Ты веб-разработчик, у тебя есть какое-то веб-приложение,
      и ты не прочь запилить на html/css/js интерфейс для него
      в виде мобильного приложения, и задеплоить его в app store,
      google play.


> А2. Архитектура Cordova
--------------------------------------

  # Кратко об архитектуре Cordova-приложения

    ▪ Оно, как ящик, в который суёшь веб-приложение
    ▪ Сам ящик можно установить на android, ios, и пр.платформы
    ▪ Ящик показывает ваше веб-приложение через браузер
    ▪ У ящика есть интерфейсы для связи веб-приложения с API платформ

  # Про WebView

    ▪ Встроенный в cordova-приложение браузер
    ▪ В нём и живёт ваше веб-приложение внутри Cordova-приложения
    ▪ Ещё его можно вставить в нативное приложение

  # Про Web App

    ▪ Имеется в виду ваше html/css/js приложение
    ▪ Веб-приложение выполняется в WebView в нативном Cordova-приложении (ящике)
    ▪ У ящика есть оч.важный файл config.xml для его настройки

  # Про Cordova-плагины

    ▪ Взаимодействием между Cordova-приложением и нативным API платформы
    ▪ Core-плагины
    ▪ Сторонние плагины
    ▪ Можно запилить свой плагин
    ▪ Плагины в проект надо явно добавлять, изначально там 0

  # Workflow #1: кросс-платформенный

    ▪ Cordova предоставляет 2 варианта workflow
    ▪ Процесс установки Cordova отличается в завис.от выбранного workflow
    ▪ MAX число платформ, MIN платформо-специфичных доделок
    ▪ Этот workflow выстроен вокруг Cordova CLI
    ▪ Этот workflow является рекомендуемым

  # Workflow #2: платформо-центричный

    ▪ Cordova предоставляет 2 варианта workflow
    ▪ Процесс установки Cordova отличается в завис.от выбранного workflow
    ▪ Одна платформа, низкоуровневый контроль
    ▪ Надо уметь нативную разработку
    ▪ Обратного пути нет

--------------------------------------

> Кратко об архитектуре Cordova-приложения

  • Оно, как ящик, в который суёшь веб-приложение

    Cordova-приложение, оно, как ящик. Туда можно внутрь
    запихнуть своё веб-приложение.

  • Сам ящик можно установить на android, ios, и пр.платформы

    Этот ящик, это как заготовка под приложение на любой
    платформе (android, ios, и пр.). Чистый лист.
    Можно прям взять, и эту заготовку запилить в 
    app store и google play, и оно будет устанавливаться
    на apple и android смартфоны.

  • Ящик показывает ваше веб-приложение через браузер

    Когда ящик ставят на конкретную платформу (android, ios, и пр.),
    и запускают, он показывают юзеру WebView (встроенный браузер),
    а в нём выводит ваше приложение. 

  • У ящика есть интерфейсы для связи веб-приложения с API платформ

    Все запросы вашего веб-приложения к API ящика он, в зависимости
    от платформы, где он выполняется, преобразует в запросы к 
    API этой платформы через cordova-плагины. Для каждого плагина
    на сайте указано, какие он платформы поддерживает. 

> Про WebView

  • Встроенный в cordova-приложение браузер
  
    WebView, это встроенный в cordova-приложение браузер.

  • В нём и живёт ваше веб-приложение внутри Cordova-приложения
  
    Когда вы запускаете приложение на конкретной платформе,
    то в этом браузере внутри приложения и отображается ваше
    веб-приложение, и через него идёт его взаимодейстие 
    с нативным API платформы.

  • Ещё его можно вставить в нативное приложение

    Можно просто взять любое нативное приложение, и вставить
    туда WebView с веб-приложением.

> Про Web App

  • Имеется в виду ваше html/css/js приложение
  
    Весь код приложения реализован на html/css/js. По умолчанию,
    точкой входа является index.html.

  • Веб-приложение выполняется в WebView в нативном Cordova-приложении (ящике)
  
    Веб-приложение выполняется в WebView в нативном Cordova-приложении 
    (ящике), который можно деплоить в app store, google play и т.д.

  • У ящика есть оч.важный файл config.xml для его настройки

    Cordova-приложение имеет очень важный файл - config.xml.
    Это его конфиг, здесь можно настраивать всякие важные штуки,
    например, что делать при смене ориентации устройства, и т.д.

> Про Cordova-плагины

  • Взаимодействием между Cordova-приложением и нативным API платформы

    Плагины являются очень важной частью экосистемы.
    Они обеспечивают взаимодействие между кордовой и нативными
    API платформ, на которых Cordova-приложение должно будет
    работать. Что и позволяет вызывать нативный код соотв.
    платформы прямо из JS.

  • Core-плагины

    У кордовы есть core-плагины, которые она поддерживает,
    и которые дают доступ к основной функциональности
    устройств, такой как батарея, камера, контакты и т.д.

  • Сторонние плагины

    А есть куча сторонних плагинов, которые реализовывают
    различные фичи (иногда, специфичные для той или иной
    платформы).

  • Можно запилить свой плагин

    Плюс, можно запиливать и свои собственные плагины,
    но для этого надо уметь нативную разработку на тех
    платформах, для которых эти плагины будут предназначены.

  • Плагины в проект надо явно добавлять, изначально там 0

    При создании Cordova-проекта, в нём 0 плагинов. Их надо
    явно вручную подключать.

> Workflow #1: кросс-платформенный

  • Cordova предоставляет 2 варианта workflow

    Первый, кросс-платформенный.
    Второй, платформо-центричный.

  • Процесс установки Cordova отличается в завис.от выбранного workflow

    В зависимости от выбранного (одного из 2х) workflow,
    процесс установки отличается. 

  • MAX число платформ, MIN платформо-специфичных доделок

    Используйте этот workflow, если хотите, чтобы ваше
    приложение запускалось на максимальном количестве
    разных платформ, с минимальными потребностями
    в платформо-специфичных доработках.

  • Этот workflow выстроен вокруг Cordova CLI

    CLI позволяет собирать проект для разных платформ
    за один приём; абстрагироваться от низко-уровневых
    shell-скриптов, просто используя команды CLI.

    CLI рассовывает файлы вашего веб-приложения по 
    подпапкам для каждой из поддерживаемых вашим 
    приложением платформ; 
    выполняет необходимую настройку для каждой из них; 
    запускает скрипты, выпоняющие сборку приложений для
    каждой платформы, и генерирующие соотв.бинарники.

    В CLI также есть интерфейс для управления плагинами
    приложения, добавления, удаления, и пр.

  • Этот workflow является рекомендуемым

    Пока вам прям очень не понадобится платформо-центричный
    workflow, рекомендуется придерживаться этого workflow.

> Workflow #2: платформо-центричный

  • Cordova предоставляет 2 варианта workflow

    Первый, кросс-платформенный.
    Второй, платформо-центричный.

  • Процесс установки Cordova отличается в завис.от выбранного workflow

    В зависимости от выбранного (одного из 2х) workflow,
    процесс установки отличается. 

  • Одна платформа, низкоуровневый контроль

    Используйте этот workflow, если хотите, чтобы 
    выше приложение было сфокусировано на одной
    конкретной платформе, и у вас была возможность
    вносить изменения на низком уровне.

    Например, если вам нужно, чтобы приложение
    сочетало в себе кастомные нативные компоненты
    с базирующимися на web компонентами кордовы.

  • Надо уметь нативную разработку

    Чтобы этим заниматься, надо уметь нативную разработку.
    Это подходит тем, кто умеет и нативные приложения делать
    для конкретной платформы, и гибридные. И хочет сделать
    приложение, содержащее всего и нативные, и гибридные вещи.
    Но, зато, это даёт больше гибкости в разработке.
  
  • Обратного пути нет

    Если переходишь от CLI-центричного workflow к платформо-
    центричному, обратного пути нет. CLI при каждой сборке
    приложения перезаписывает платформо-специфичный код,
    и стирает все изменения, которые вы могли туда внести.

    Поэтому, чтобы избежать потери ваших платформо-специфичных
    изменений, вам нужно переключаться на платформо-центричные
    shell-инструменты, которые игнорируют кросс-платформенный
    исходный код, и, вместо этого, полагаются на платформо-
    специфичный исходный код.


А3. Создание Cordova-приложения (туториал)
------------------------------------------

  # План действий

    ▪ Подготовить Docker-образ
    ▪ Создать и собрать приложение
    ▪ Задеплоить приложение в Google Play

  # Подготовка Docker-образа
  # Создание, сборка, обновление и деплой приложения в Google Play

    ▪ Создать рыбу проекта
    ▪ Настроить, какие платформы будет поддерживать приложение
    ▪ Собрать проект для всех платформ
      ▪ Собрать проект
      ▪ Результат для платформы browser
      ▪ Результат для платформы android

    ▪ Протестировать проект для платформы android
      ▪ Установить Android Studio
      ▪ Установить плагин Phonegap/Cordova
      ▪ Импортировать проект
      ▪ Тест на реальном android-телефоне
      ▪ Тест на эмуляторе устройства (AVD manager)

    ▪ Деплой приложения в Google Play
      ▪ Настройка package.json
      ▪ Настройка config.xml
      ▪ Настройка иконки приложения
      ▪ Настройка версии приложения
      ▪ Собираем релизную версию приложения для платформы android
      ▪ Подписываем приложение сертификатом
      ▪ Регистрируемся в Google Play Console за $25
      ▪ Публикуем приложение в Google Play

--------------------------------------

> Ссылки

  • Установка необходимых для сборки Android-приложения инструментов на Linux:
      https://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html
      https://gist.github.com/aryeharmon/85673d69b07c5b7061c38ac4323f409c

  • Деплой приложения в Google Play
      https://codeburst.io/publish-a-cordova-generated-android-app-to-the-google-play-store-c7ae51cccdd5
      https://developer.android.com/studio/publish/

  • Работа с платформой browser
      https://www.raymondcamden.com/2016/03/22/the-cordova-browser-platform

  • Android Studio
      https://developer.android.com/studio/

  • Подписать приложение
      https://cordova.apache.org/docs/en/latest/guide/platforms/android/#signing-an-app
      https://developer.android.com/studio/publish/app-signing
      https://codeburst.io/publish-a-cordova-generated-android-app-to-the-google-play-store-c7ae51cccdd5
 
  • Google Play Console
      https://developer.android.com/distribute/console/

> План действий

  • Подготовить Docker-образ

    Необходимо создать отдельный Docker-образ на основе
    Ubuntu 16.04, который будет включать:

      Менеджер пакетов и Git:

        ▪ NPM + NodeJS, 
        ▪ Git,

      Cordova CLI:

        ▪ Cordova

      Необходимые для сборки проекта под android инструменты:

        ▪ Java Development Kit (JDK)
        ▪ Gradle
        ▪ Android SDK + пакеты для него

  • Создать и собрать приложение

    Этап 1: рыба

      ▪ С помощью Cordova CLI в Docker создаём рыбу приложения.
    
    Этап 2: цикл разработки (повторить, если надо)

      ▪ Меняем что-нибудь по мелочи.
      ▪ Собираем приложение с помощью Cordova CLI в Docker.
      ▪ Ставим на хост-машину (винду) Android Studio,
        открываем в нём проект.
      ▪ Подключаем смартфон на android к компу, 
        смотрим результат, нажав в Android Studio соотв.кнопку.

  • Задеплоить приложение в Google Play

      ▪ Настроить package.json и config.xml (и версию в нём)
      ▪ Настроить иконку приложения
      ▪ Собрать проект с флагом --release (получив unsigned apk)
      ▪ Создать ключ и подписать им проект (получив signed apk)
      ▪ Создать и оплатить Play Store dev-аккаунт ($25)
      ▪ Загрузить в Play Store свой signed apk.
      ▪ Дождаться, пока его кто-нибудь проверит из Google.
      ▪ Опубликовать приложение.

> Подготовка Docker-образа

  Образ подготовлен, называется "cordova" и находится в 
  docker registry в gitlab нашего проекта.

  Контейнер cordova запускается вместе с проектом, получить
  доступ к Cordova CLI можно через alias "cordova" в папке
  проекта.

> Создание, сборка, обновление и деплой приложения в Google Play

  • Создать рыбу проекта

    Я решил размещать демо-проекты для cordova в папке
    /bubbles/mobile/cordova.

    Перейдём в /bubbles/mobile/cordova и создадим проект
    DemoApp1 c помощью следующей команды:

      cordova create demoapp1 pro.bubbles.demoapp1 DemoApp1

  • Настроить, какие платформы будет поддерживать приложение

    Для этого сначала переходим в проект:
    
      cd /bubbles/mobile/cordova/demoapp1

    Чтобы посмотреть список доступных и уже установленных
    платформ, нужно ввести:

      cordova platform ls

    Мы выберем 2 платформы:

      ▪ browser     | чтобы можно было тестировать проект в браузере
      ▪ android     | чтобы можно было собрать проект для android

      cordova platform add browser
      cordova platform add android

    После добавления платформ с помощью platform ls 
    удостоверьтесь, что платформы добавились.

  • Собрать проект для всех платформ

    Собрать проект для всех платформ, либо для конкретной
    платформы, можно командой:

      cordova build <имя платформы/пусто, если для всех>

      cordova build             | для всех
      cordova build browser     | для платформы 'browser'
      cordova build android     | для платформы 'android'

    ▪ Результат для платформы browser

      Для платформы browser результатом будет браузерная
      версия приложения по адресу:
     
        /bubbles/project/project/mobile/cordova/demoapp1/platforms/browser

      С точкой входа по адресу:

        /bubbles/project/project/mobile/cordova/demoapp1/platforms/browser/www/index.html

    ▪ Результат для платформы android
      
      Для платформы android результатом будет файл

        /bubbles/project/project/mobile/cordova/demoapp1/platforms/android/app/build/outputs/apk/debug/app-debug.apk

      Это debug-версия приложения, которую можно использовать
      для его отладки, но не для деплоя в Google Play 
      (об этом будет подробнее ниже)

  • Протестировать проект для платформы browser

    Для этого запускаем на 8000 порту веб-сервер с проектом
    командой:

      cordova serve

    После чего можно перейти по по следующему адресу и откроется
    приложение: http://localhost:8000/browser/www

    *Техническое примечание: 

      Проброс порта 8000 из контейнера на Linux-хост 
      осуществляется вовсе не в docker-compose.yml, а
      в месте определения алиаса в project/other/cli/aliases.

  • Протестировать проект для платформы android

    1. Установить Android Studio

    2. Установить плагин Phonegap/Cordova
      
      Settings -> plugins -> browse repositories
      Перезапустить Android Studio

    3. Импортировать проект

      File -> New -> Import Project
      Импортируй папку mobile/cordova/demoapp1/platforms/android
      Дождись, пока всё импортируется.
      Устрани все ошибки при импорте, импорт при ошибке встаёт на паузу.
      Например, может не хватать какого-то пакета, он сам предложит установить.
      Установив этот пакет, импорт продолжится.
      Всё это может занять прилично времени, минут 30.

    4. Тест на реальном android-телефоне

      Подключаем через провод телефон.
      Включаем "Usb debugging"
      Сначала включаем "Отладка по USB" в телефоне (инструкция для android 8)
      - Настройки -> Система -> О телефоне -> 7 раз тап по "Номер сборки"
      - Настройки -> Система -> Для разработчиков -> Отладка по USB
      
      В Android Studio выбираем папочку app и кликаем Run -> Run app в верхнем меню.
      На экране телефона разрешаем студии подключиться USB Debug к телефону.
      Ждём, пока всё загрузится.
      Приложение установится и откроется, также оно будет доступно,
      как и любые другие приложения, в приложениях на телефоне.
      
      *Если вы до этого жали "отмена" на телефоне при запросе
      отладки по USB, и вылезла ошибка "insltall apk error",
      просто перевоткните провод в телефон, и попробуйте запустить снова.

    5. Тест на эмуляторе устройства (AVD manager)

      В верхнем меню: tools -> AVD manager -> Create virtual device
      Дальше выбираем экран, образ с определённой версией Android 
      (надо выбрать и нажать download, если ещё не скачен).
      
      И завершаем создание виртуального устройства.
      В Android Studio выбираем папочку app и кликаем Run -> Run app в верхнем меню.
      Выбираем там в "Available Virtual Devices" наше виртуальное устройство.
      Включится эмулятор, сначала ОС загрузится, потом приложение само включится.

  • Деплой приложения в Google Play

    ▪ Настройка package.json

      Надо настроить package.json, который находится непосредственно
      в папке с приложением (mobile/cordova/demoapp1).

      Значения для каких конкретно свойств надо настроить,
      и что они обозначают:

      ▪ name

        Это уникальный ID приложения. Общепринятым стандартом
        является использовать реверс-домен вашего сайта, плюс
        название проекта. Например:

          pro.bubbles.demoapp1

      ▪ displayName

        Это название приложения, как его будут видеть 
        пользователи. Например:

          DemoApp1

      ▪ version

        Это версия приложения. Например:

          1.0.0

      ▪ description

        Это описание приложения. Например:

          This is my test cordova app. It does nothing.

      ▪ author

        Это строка, где обозначен автор приложения. Например:

          German Manvelov

      ▪ license

        Это строка, обозначающая лицензию приложения. Например:

          MIT

    ▪ Настройка config.xml
    
      ▪ <widget id="...">

        Необходимо в ID вставить уникальный ID приложения.
        Это тоже самое, что в name в package.json.
        Общепринятым стандартом
        является использовать реверс-домен вашего сайта, плюс
        название проекта. Например:

          pro.bubbles.demoapp1

    ▪ Настройка иконки приложения

      Иконки обычно кладут в папку res/icon/generic, которая
      в корне приложения. В нашем случае это:

        /bubbles/project/mobile/cordova/demoapp1/res/icon/generic

      Надо открыть config.xml и добавить тэг/теги
      для иконки. 

      ▪ 1 общая иконка

          Можно использовать одну и ту же общую иконку
          для android и ios

          <widget>
            ...
            <icon src="res/icon/generic/icon.png" />
            ...
          </widget>

      ▪ Для каждой платформы своя иконка

        А можно свой набор отдельно для каждой платформы.

        <widget>
          ...
          <platform name="android">
            <icon src="/path/to/android/icon" />
          </platform>
          ...
        </widget>

      ▪ Для каждой платформы свой набор иконок под любое разрешение

        А можно для каждого разрешения экрана предусмотреть
        свою отдельную иконку:

          <widget>
            ...
            <platform name="android">
              <!--
                  ldpi    : 36x36 px
                  mdpi    : 48x48 px
                  hdpi    : 72x72 px
                  xhdpi   : 96x96 px
                  xxhdpi  : 144x144 px
                  xxxhdpi : 192x192 px
              -->
              <icon src="res/android/ldpi.png" density="ldpi" />
              <icon src="res/android/mdpi.png" density="mdpi" />
              <icon src="res/android/hdpi.png" density="hdpi" />
              <icon src="res/android/xhdpi.png" density="xhdpi" />
              <icon src="res/android/xxhdpi.png" density="xxhdpi" />
              <icon src="res/android/xxxhdpi.png" density="xxxhdpi" />
            </platform>      
            ...
          </widget>

    ▪ Настройка версии приложения

      Каждый раз при загрузке новой копии приложения
      в store, надо актуализировать его версию
      (version) в config.xml и в package.json.

      Это надо сделать ПЕРЕД тем, как собарить приложение
      и заливать его в store, иначе будет ошибка о том,
      что такая версия уже есть.

      В config.xml версия находится в widget:

        <widget id="..." version="1.0.1">

    ▪ Собираем релизную версию приложения для платформы android

      Для этого выполняем:

        cordova build android --release

      На выходе получаем файл 'unsigned' файл:

        /bubbles/project/mobile/cordova/demoapp1/
          platforms/android/app/build/outputs/apk/
            release/app-release-unsigned.apk

      *Примечание:

        Если вы ранее импортировали проект в Android Studio,
        то могут возникнуть следующие проблемы.

          1. Будет создан файл local.gradle

            А в нём будет прописан путь к android sdk,
            который находится в windows, поскольку 
            Android Studio установлен в windows. В
            результате, при попытке сборки проекта
            через docker-образ с cordova мы будем
            получать ошибку "не найден android sdk"
            и неправильный путь к нему.

            Решение: удалить local.gradle

          2. Установится плагин, требующий gradle >= 4.4

            Android Studio установит какой-то плагин,
            который требует gradle >= 4.4, но при этом,
            в файле "android/cordova/lib/builders/StudioBuilder"
            у нас прописан gradle 4.1. 

            Решение: прописать gradle 4.4 в этом файле

        Ещё вопрос можно решать путём передобавления платформы
        android:

          cordova platform rm android
          cordova platform add android

    ▪ Подписываем приложение сертификатом

      При выполнении "cordova build android --release" на 
      выходе мы получаем файл app-release-unsigned.apk.
      Где "unsigned" обозначает, что файл не подписан.

      Google требует, чтобы APK-файл приложения был
      подписан сертификатом. По этой подписи они проверяют,
      что у вас есть право обновлять приложение.

      ▪ С помощью keytool из JDK создаём keystore

        Переходим в папку с нашим приложением - "demoapp1".

        Назовём это хранилище для ключей "android.keystore",
        так как мы будем хранить в нём ключи, связанные с android.
        Keystore, который мы тут создадим, появится в папке
        нашего приложения по адресу "demoapp1/android.keystore".

        Вводим следующую команду, только alias меняем на свой:

          keytool -genkey -v -keystore android.keystore -alias pro.bubbles.demoapp1 -keyalg RSA -keysize 2048 -validity 10000

        После ввода она запросит обязательный пароль, имя/фамилию
        и прочее. Всё вводим, в конце вводим "yes".

        После этого она запросит пароль для конкретного создаваемого
        ключа для, в нашем случае, pro.bubbles.demoapp1. Можно просто 
        нажать enter, и пароль применится тот же, что для всего keystore.

      ▪ Вариат №1: build.json и --buildConfig для команд build/run

        Можно создать файл build.json,
        записать туда явки от keystore и созданноо ключа,
        и с помощью --buildConfig во время выполнения build/run
        указывать этот файл. Тогда Cordova при сборке будет
        подписывать приложение соответствующим ключём.

        Однако, файл будет содержать пароли от keystore и ключа,
        поэтому, он не может быть залит в git или показан посторонним.
        Необходимо позаботиться о безопасности при использовании этого способа.

      ▪ Вариант №2: --keystore/--storePassword/--alias/--password для build/run

        Можно просто вручную при выполнении сборки указывать через
        аргументы все необходимые явки. Конечно, этот способ не
        годится для продолжительной разработки, но для разового
        использования в нашем демо-приложении подойдёт.

        Пример (выполняем, находясь в папке demoapp1):

          cordova build android --release -- --keystore=android.keystore --storePassword=<пароль> --alias=pro.bubbles.demoapp1 --password=<пароль>

        Результатом успешного выполнения команды будет файл:
        /bubbles/project/mobile/cordova/demoapp1/platforms/android/app/build/outputs/apk/release/app-release.apk

        Как видим, он уже не "unsigned". Значит, всё ОК.

        *Примечание:

          Если будет следующая ошибка, значит неправильно указаны
          какие-то вещи, может пароль, может путь к keystore,
          перепроверьте все внимательно:

          Failed to create component for 'dialog' reason: java.awt.HeadlessException
          > java.awt.HeadlessException (no error message)          

    ▪ Регистрируемся в Google Play Console за $25

      Чтобы публиковать приложения на Google Play,
      необходимо зарегистрировать аккаунт разработчика
      в Google Play Console. Это будет стоить $25.

      Ссылка есть выше в ссылках.

    ▪ Публикуем приложение в Google Play

      1. Заходим в Google Play Console

      2. Создаём новый проект

        Все приложения -> Новое приложение

        Заполняем там всё, создаём.

      3. Опубликовать приложение

        Заходим в проект.
        Слева в меню выбираем "Версии приложения".
        Выбираем что это - релиз, демка или ещё что.
        Загружаем наш релизный подписанный APK.

        Лучше всего выбирать версию для внутреннего
        тестирования, т.к. это позволяет быстро дать
        доступ к приложению по списку email.
        (но при публикации первого приложения, оно станет
        доступно в течение 48 часов).


А4. Cordova CLI
--------------------------------------
  
  # Синтаксис
  # Общие для всех команд опции

    ▪ -d                    | более подробный лог в output
    ▪ -v                    | вывести версию Cordova CLI
    ▪ --no-update-notifier  | не проверять обновления
    ▪ --nohooks             | подавляет выполнение хуков
    ▪ --no-telemetry        | отключить телеметрию для текущей команды

  # Глобальные команды

    С подробным описанием:
    
      ▪ create                | создать проект
      ▪ telemetry             | вкл/выкл интерактивность (можно сделать, чтоб ничего не спрашивала)

    Без подробного описания:
    
      ▪ help                  | получить справку по команде
      ▪ config                | set/get/delete/edit и list глобальные опции cordova

  # Проектные команды

    С подробным описанием:

      ▪ platform              | манипуляции платформами проекта
        ▪ add                 | - добавить указанную платформу (<platform-spec>)
        ▪ remove              | - удалить указанную платформу
        ▪ update              | - обновить указанные платформы
        ▪ list                | - вывести список всех установленных и доступных платформ
        ▪ check               | - вывести список всех платформ, которые надо обновить
        ▪ save                | - сохранить <platform-spec> всех добавленных в config.xml платформ

      ▪ plugin                | манипуляции плагинами проекта
        ▪ add                 | - добавить плагин
        ▪ remove              | - удалить плагин
        ▪ list                | - вывести список установленных плагинов
        ▪ search              | - найти плагин
        ▪ save                | - сохранить <platform-spec> всех добавленных в проект плагинов

      ▪ prepare               | скопировать файлы в платформы (приготовить к сборке)
      ▪ compile               | скомпилировать скопированные командой prepare файлы (build без prepare)
      ▪ build                 | собрать проект для всех или указанных платформ (prepare + compile)
      ▪ clean                 | очистить проект от артефактов сборок
      ▪ run                   | запустить проект (вкл. prepare && compile)
      ▪ serve                 | запустить проект на локальном NodeJS веб-сервере

    Без подробного описания:

      ▪ info                  | вывести информацию о проекте
      ▪ requirements          | вывести требования всех платформ проекта

--------------------------------------

> Синтаксис

  cordova <command> [options] -- [platformOpts]

> Общие для всех команд опции

  См. оглавление.

> Глобальные команды

  Эти команды можно выполнять в любом месте, а не только
  лишь в папке с проектом.

  • Create
    создать проект
    
    ▪ Синтаксис

      cordova create path [id [name [config]]] [options]

      ▪ path
        - Путь к папке, которая ещё не должна существовать.
        - Cordova создаст эту папку, а в ней проект.

      ▪ id [io.cordova.hellocordova]
        - ID проекта по шаблону: реверс домена + название проекта.
        - Этот ID можно поменять в <widget> в config.xml
          (однако, рекомендуется сразу указывать правильный,
          ибо в различном коде могут остаться старые версии
          названия, например, в именах Java-пакетов).

      ▪ name
        - Имя приложения, которое будет отображаться.
        - Записывается в <name> в config.xml.
        - Его можно там менять, но лучше сразу указывать правильное,
          ибо в различном коде могут остаться старые версии
          названия, например, именах Java классов).

      ▪ config
        - JSON-строка, ключи/значения которой будут включены
          в <path>/.cordova/config.json.

    ▪ Опции

      ▪ --template      | использовать кастомный локальный шаблон из NPM или GitHub
      ▪ --copy-from\    | путь к проекту, который надо скопировать
      ▪ --link-to       | символьная ссылка на каталог www без копирования

    ▪ Структура создаваемого проекта

      myapp/
      |-- config.xml              | конфиг проекта
      |-- hooks/                  | папка с хуками (скриптами-доп-обработчиками событий Cordova CLI)
      |-- merges/                 | платформо-специфичные модиф.файлы из www, которые заменят оные
      | | |-- android/
      | | |-- windows/
      | | |-- ios/
      |-- www/                    | ваше веб-приложение
      |-- platforms/              | содержит исходники и сборки проекта для поддерживаемых платформ
      | |-- android/
      | |-- windows/
      | |-- ios/
      |-- plugins/                | папка с подключенными плагинами
        |--cordova-plugin-camera/

      ▪ www

        Здесь должна лежать основная часть кода приложения,
        которое вы пишите. После выполнения cordova prepare,
        содержимое попадает в www каждой из platforms
        (platrorms/android/www, platforms/ios/www, и т.д.)

        По этой причине, не надо редактировать www в платформах,
        потому что она всё равно потом перезапишется. А редактировать
        надо только www на верхнем уровне проекта.

      ▪ platforms

        Содержит исходный код и сборки приложения для каждой
        из поддерживаемых им платформ.

        Код в platforms не следует редактировать вручную,
        поскольку все содержимое этой папки гененируется
        Cordova CLI, и любые изменения будут затёрты.

      ▪ hooks

        Это папка для скриптов, которые дополнительно могут
        срабатывать before или after того или иного события
        Cordova CLI.

        Говорят, что это полезно, если надо встроить все это
        дело в свою собственную систему сборки проекта.

      ▪ merges

        В www на верхнем уровне проекта лежит код нашего
        приложения, это html/css/js и прочие файлы.

        При выполнении команды prepare содержимое www
        копируется в папки www для каждойплатформы в
        platforms.

        Но часто бывает, что для каждой из платформ надо
        внести какие-то небольшие или большие изменения
        в какие-то из файлов www. 

        В этом случае, мы берём и создаём свою версию
        таких файлов для каждой платформы, и раскладываем
        по тем же путям в папке merge.

        Тогда, при выполнении prepare, код из www сначала
        скопируется в каждую из платформ, а затем в результатах
        соответствующие файлы будут заменены файлами из merges.

        Это известный паттерн, который много где используется
        для настроек, в том числе, в apache или в моих проектах.

      ▪ Что добавить в .gitignore

        Рекомедтуется добавить папки platforms и plugins
        в .gitignore, поскольку их содержимое генерируется
        командой prepare, то есть, является вторичным.

    ▪ Примеры

      cordova create demoapp1 pro.bubbles.demoapp1 DemoApp1

  • telemetry
    вкл/выкл интерактивность (можно сделать, чтоб ничего не спрашивала)

    Когда запускаешь Cordova в первый раз, то она задаёт дурацкий
    вопрос: 

      "May Cordova anonymously report usage statistics to improve the tool over time?"

    и ждёт 30 секунд, пока ты не ответишь, а потом автоматически
    выбирает "да". 

    Если Cordova установлена глобально и используется на этой же
    машине, то можно просто отключить это, и она перестанет спрашивать:

      cordova telemetry off

    Если Cordova используется через Docker, то так телеметрию
    не отключишь, т.к. каждый новый вызов создаёт новый экземпляр
    кордовы. Тогда можно использовать флаг:

      cordova --no-telemetry

    Особенно это всё важно при использовании cordova из 
    Docker где-нибудь в коде.

    ▪ Синтаксис

      cordova telemetry [STATE]

      ▪ state

        on или off

    ▪ Примеры

      cordova telemetry on
      cordova telemetry off
      cordova build --no-telemetry

> Проектные команды

  Эти команды нужно выполнять, перейдя в папочку с проектом.

  • platform
    манипуляции платформами проекта

    Команда позволяет добавлять, удалять, просматривать
    списки добавленных и имеющихся платформ, обновлять
    платформы.

    Удаление платформы влечёт за собой удаление соответствующей
    папки из platforms. А добавление - добавление туда оной папки.

    ▪ Синтаксис

      cordova {platform | platforms} [
          add <platform-spec> [...] {--save | link=<path> } |
          {remove | rm}  platform [...] {--save}|
          {list | ls}  |
          check |
          save |
          update ]

      ▪ add <platform-spec>
        добавить указанную платформу (<platform-spec>).

        --nosave    | не добавлять <platform-spec> в config.xml и package.json используя тег <engine> 
        --link=     | когда <platform-spec> это локальный путь, не копировать библиотеку платформы, а создать ссылку на неё

      ▪ remove <platform>
        удалить указанную платформу

        --nosave  | не удалять <platform> из config.xml и package.json

      ▪ update <platform>
        обновить указанные платформы

        Без <platform> - все. 
        Если <platform> указан, оную.

        --save  | обновляет указанную в config.xml версию

      ▪ list
        вывести список всех установленных и доступных платформ

      ▪ check
        вывести список всех платформ, которые надо обновить

      ▪ save
        сохранить <platform-spec> всех добавленных в config.xml платформ

    ▪ Формат Platform-spec

      Есть несколько способов, как можно обозначить 
      платформу.

        <platform-spec> : platform[@version] | path | url[#commit-ish]  

      ▪ platform    | имя платформы, например: android, ios, windows
      ▪ version     | версия (semver) платформы, major.minor.path
      ▪ path        | путь к каталогу или архиву с платформой
      ▪ url         | url к git-репозиторию или архиву с платформой
      ▪ commit-ish  | [master] коммит/тег/ветка

    ▪ Поддерживаемые платформы

      ▪ Android
      ▪ iOS
      ▪ Windows (8.1, Phone 8.1, UWP - Windows 10)
      ▪ Blackberry10
      ▪ Ubuntu
      ▪ Browser

    ▪ Примеры

      cordova platform add android ios
      cordova platform add android@^5.0.0
      cordova platform add https://github.com/myfork/cordova-android.git#4.0.0
      cordova platform add ../android
      cordova platform add ../cordova-android.tgz
      cordova platform rm android
      cordova platform rm android --nosave
      cordova platform ls
      cordova platform save

  • plugin
    манипуляции плагинами проекта

    Команда позволяет добавлять, удалять, просматривать
    установленные плагины и искать доступные для 
    установки плагины.

    Удаление плагина влечёт за собой удаление соответствующей
    папки из plugins. А добавление - появление оной папки там.

    ▪ Синтаксис

      cordova {plugin | plugins} [
          add <plugin-spec> [..] {--searchpath=<directory> | --noregistry | --link | --save | --browserify | --force} |
          {remove | rm} {<pluginid> | <name>} --save |
          {list | ls} |
          search [<keyword>] |
          save |
      ]

      ▪ add <plugin-spec>
        добавить плагин

        --searchpath <directory>

          Во время поиска плагинов по ID, искать сначала в этой
          папке и всех её подпапках, а уж потом в регистре в инете.

        --noregistry    | Не искать плагины в регистре в инете.
        --link         

          При установке из локального каталога, создаёт
          символьную ссылку вместо копирования файлов.
          Полезно при разработке плагинов.

        --nosave        | не сохранять <plugin-spec> как часть плагина в config.xml или package.json
        --browserify    | скомпилировть JS плагина во время сборки используя browserfy
        --force         | копировать файлы из плагина, даже если они уже существуют

      ▪ remove
        удалить плагин

        --nosave  | не удалять указанный плагин из config.xml или package.json

      ▪ list
        вывести список установленных плагинов

      ▪ search [<keyword>]
        найти плагин

        Искать плагин по keyword на http://plugins.cordova.io

      ▪ save
        сохранить <platform-spec> всех добавленных в проект плагинов

    ▪ Формат Platform-spec

      Есть несколько способов, как можно обозначить 
      платформу.

        <plugin-spec> : [@scope/]pluginID[@version]|directory|url[#commit-ish][:subdir]

      ▪ scope       | пространство имён плагина, опубликованного, как scoped npm package
      ▪ plugin      | id плагина (в npm или в --searchPath)
      ▪ version     | версия (semver) плагина, major.minor.path
      ▪ directory   | каталог с plugin.xml
      ▪ url         | url к git-репозиторию с plugin.xml
      ▪ commit-ish  | [master] коммит/тег/ветка

    ▪ Примеры

      cordova plugin add cordova-plugin-camera cordova-plugin-file --save --searchpath ../plugins
      cordova plugin add cordova-plugin-camera@^2.0.0
      cordova plugin add ../cordova-plugin-camera
      cordova plugin add ../cordova-plugin-camera.tgz
      cordova plugin rm camera
      cordova plugin rm camera --nosave
      cordova plugin ls

  • prepare
    скопировать файлы в платформы (приготовить к сборке)

    Вот, что она делает

    ▪ Трансформирует данные из config.xml в специфичные
      для платформы manifest-файлы.
    ▪ Копирует сплэшскрины и иконки в платформы в platforms.
    ▪ Копирует плагины для указанных платформ.

    В итоге, для указанной платформы проект становится 
    готов к сборке с помощью соответствующего SDK платформы.

    Сама по себе команда используется редко. Чаще всего, в составе
    команд run или build.

    ▪ Синтаксис

      cordova prepare [<platform> [..]]
           [--browserify]
           
      ▪ <platform>   | имя платформы
      ▪ --browserify | скомпилировать JS плагинов во время сборки с помощью browserfy

  • compile
    скомпилировать скопированные командой prepare файлы (build без prepare)

    Так же, как и prepare, это одна из частей команды build.
    Команда compile должна выполняться после prepare, и 
    выполняет компиляцию для указанной платформы.

    Сама по себе команда используется редко. Чаще всего, в составе
    команд run или build.

    ▪ Синтаксис

      cordova build [<platform> [...]]
          [--debug|--release]
          [--device|--emulator|--target=<targetName>]
          [--buildConfig=<configfile>]
          [--browserify]
          [-- <platformOpts>]

  • build
    собрать проект для всех или указанных платформ (prepare + compile)

    Команда build просто последовательно выполняет сначала
    prepare, потом compile, для всех либо указанных платформ.

    ▪ Синтаксис

      cordova build [<platform> [...]]
          [--debug|--release]
          [--device|--emulator]
          [--buildConfig=<configfile>]
          [--browserify]
          [-- <platformOpts>]

      <platform> [..]

        Если не указано, то собирает для всех платформ.
        Можно указать 1 или несколько названийплатформ через пробел.

      --debug

        Выполнить debug-сборку для указанных платформ.
        Такие сборки не могут быть залиты в store'ы платформ.

      --release

        Выполнить release-сборку для указанных платформ.
        Такие сборки можно прямо во время сборки подписать
        ключём, и залить в store'ы платформ.

      --device    | собрать для девайса
      --emulator  

        Собрать для эмулятора. В частности, архитектура
        платформы может быть разной для device и emulator.

      --buildConfig=<configFile>

        Вместо того, чтобы добавлять необходимые для подписи
        release-сборки значения через опции, их можно расписать
        в build.json, и указать к нему путь через эту опцию.

        Однако, поскольку там присутствуют 2 пароля, этот
        файл должен быть обезопашен от посторонних.

      --browserify

        Скомпилировать JS плагина во время сборки проекта,
        а не во время его работы.

      <platformOpts>

        Чтобы добавить особые опции для платформы, нужно
        писать их после разделителя -- 

        Ищи эти платформо-специфичные опции в описаниях 
        платформ в документации Cordova.

    ▪ Примеры

      ▪ Собрать release-сборку для android и 
        сразу её подписать ключём из keystore

        cordova build android --release -- --keystore=android.keystore --storePassword=<пароль> --alias=pro.bubbles.demoapp1 --password=<пароль>

      ▪ Прочие примеры

        cordova build android windows --debug --device
        cordova build android --release --buildConfig=..\myBuildConfig.json
        cordova build android --release -- --keystore="..\android.keystore" --storePassword=android --alias=mykey

  • clean
    очистить проект от артефактов сборок

    Очищает все или указанные платформы от артефактов сборок.

    ▪ Синтаксис

      cordova clean [<platform> [...]]

    ▪ Примеры

      cordova clean android

  • run
    запустить проект (вкл. prepare && compile)

    Выполняет prepare, build, и деплой приложения на 
    указанное устройство или эмулятор.

    Если устройство подключено, оно будет использовано,
    в противном случае будет использован уже запущенный
    эмулятор.

    По факту, это всё не работает, если Cordova у 
    вас находится в Docker-контейнере. Вместо этого,
    надо использовать Android Studio для android,
    и что-то там ещё для ios.

  • serve
    запустить проект на локальном NodeJS веб-сервере

    Запускает локальный web-сервер на NodeJS для www,
    использует указанный порт (8000 по умолчанию).

    Доступ к проекту можно получить по URL:
    http://HOST_IP:PORT/<PLATFORM>/www

    Где <PLATFORM>, это android, ios или для какой там 
    платформы вы запустили serve.

    ▪ Синтаксис

      cordova serve [port]


А5. Cordova Events
--------------------------------------

  

--------------------------------------

> 



