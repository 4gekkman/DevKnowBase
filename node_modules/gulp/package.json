{
  "_args": [
    [
      "gulpjs/gulp#4.0",
      ""
    ]
  ],
  "_from": "gulpjs/gulp#4.0",
  "_id": "gulp@4.0.0-alpha.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/gulp",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/gulpjs/gulp/4.0/package.json",
      "gitUrl": "git://github.com/gulpjs/gulp.git#4.0",
      "httpsUrl": "git+https://github.com/gulpjs/gulp.git#4.0",
      "shortcut": "github:gulpjs/gulp#4.0",
      "ssh": "git@github.com:gulpjs/gulp.git#4.0",
      "sshUrl": "git+ssh://git@github.com/gulpjs/gulp.git#4.0",
      "type": "github"
    },
    "name": null,
    "raw": "gulpjs/gulp#4.0",
    "rawSpec": "gulpjs/gulp#4.0",
    "scope": null,
    "spec": "github:gulpjs/gulp#4.0",
    "type": "hosted"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/gulpjs/gulp.git#56e3e56a27b7920a081f7002d69d547c8fc91336",
  "_shasum": "2a46d99b97e8c6e8646e71aed55e635f47ccc41d",
  "_shrinkwrap": null,
  "_spec": "gulpjs/gulp#4.0",
  "_where": "",
  "author": {
    "email": "contact@wearefractal.com",
    "name": "Fractal",
    "url": "http://wearefractal.com/"
  },
  "bin": {
    "gulp": "./bin/gulp.js"
  },
  "bugs": {
    "url": "https://github.com/gulpjs/gulp/issues"
  },
  "dependencies": {
    "chokidar": "^1.2.0",
    "gulp-cli": "^1.0.0",
    "undertaker": "^0.13.0",
    "vinyl-fs": "^2.0.0"
  },
  "description": "The streaming build system",
  "devDependencies": {
    "coveralls": "^2.7.0",
    "graceful-fs": "^3.0.0",
    "istanbul": "^0.3.0",
    "jscs": "~1.12.0",
    "jshint": "^2.5.0",
    "jshint-stylish": "^1.0.0",
    "mkdirp": "^0.5.0",
    "mocha": "^2.0.1",
    "mocha-lcov-reporter": "^1.0.0",
    "q": "^1.0.0",
    "rimraf": "^2.2.5",
    "should": "^5.0.1"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "files": [
    "bin",
    "index.js"
  ],
  "gitHead": "56e3e56a27b7920a081f7002d69d547c8fc91336",
  "homepage": "http://gulpjs.com",
  "license": "MIT",
  "man": [
    "gulp.1"
  ],
  "name": "gulp",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\r\n  <a href=\"http://gulpjs.com\">\r\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\r\n  </a>\r\n  <p align=\"center\">The streaming build system</p>\r\n</p>\r\n\r\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\r\n\r\n## What is gulp?\r\n\r\n- **Automation** - gulp is a toolkit that helps you automate painful or time-consuming tasks in your development workflow.\r\n- **Platform-agnostic** - Integrations are built into all major IDEs and people are using gulp with PHP, .NET, Node.js, Java, and other platforms.\r\n- **Strong Ecosystem** - Use npm modules to do anything you want + over 2000 curated plugins for streaming file transformations\r\n- **Simple** - By providing only a minimal API surface, gulp is easy to learn and simple to use\r\n\r\n## Documentation\r\n\r\nFor a Getting started guide, API docs, recipes, making a plugin, etc. see the [documentation page](/docs/README.md)!\r\n\r\n## Sample `gulpfile.js`\r\n\r\nThis file is just a quick sample to give you a taste of what gulp does.\r\n\r\n```js\r\nvar gulp = require('gulp');\r\nvar coffee = require('gulp-coffee');\r\nvar concat = require('gulp-concat');\r\nvar uglify = require('gulp-uglify');\r\nvar imagemin = require('gulp-imagemin');\r\nvar sourcemaps = require('gulp-sourcemaps');\r\nvar del = require('del');\r\n\r\nvar paths = {\r\n  scripts: ['client/js/**/*.coffee', '!client/external/**/*.coffee'],\r\n  images: 'client/img/**/*'\r\n};\r\n\r\n/* Register some tasks to expose to the cli */\r\ngulp.task('build', gulp.series(\r\n  clean,\r\n  gulp.parallel(scripts, images)\r\n));\r\ngulp.task(clean);\r\ngulp.task(watch);\r\n\r\n// The default task (called when you run `gulp` from cli)\r\ngulp.task('default', gulp.series('build'));\r\n\r\n\r\n/* Define our tasks using plain functions */\r\n\r\n// Not all tasks need to use streams\r\n// A gulpfile is just another node program and you can use all packages available on npm\r\n// But it must return either a Promise or Stream or take a Callback and call it\r\nfunction clean() {\r\n  // You can use multiple globbing patterns as you would with `gulp.src`\r\n  // If you are using del 2.0 or above, return its promise\r\n  return del(['build']);\r\n}\r\n\r\n// Copy all static images\r\nfunction images() {\r\n  return gulp.src(paths.images)\r\n    // Pass in options to the task\r\n    .pipe(imagemin({optimizationLevel: 5}))\r\n    .pipe(gulp.dest('build/img'));\r\n}\r\n\r\n// Minify and copy all JavaScript (except vendor scripts)\r\n// with sourcemaps all the way down\r\nfunction scripts() {\r\n  return gulp.src(paths.scripts)\r\n    .pipe(sourcemaps.init())\r\n      .pipe(coffee())\r\n      .pipe(uglify())\r\n      .pipe(concat('all.min.js'))\r\n    .pipe(sourcemaps.write())\r\n    .pipe(gulp.dest('build/js'));\r\n}\r\n\r\n// Rerun the task when a file changes\r\nfunction watch() {\r\n  gulp.watch(paths.scripts, scripts);\r\n  gulp.watch(paths.images, images);\r\n}\r\n```\r\n\r\n## Incremental Builds\r\n\r\nYou can filter out unchanged files between runs of a task using\r\nthe `gulp.src` function's `since` option and `gulp.lastRun`:\r\n```js\r\nfunction images() {\r\n  return gulp.src(paths.images, {since: gulp.lastRun('images')})\r\n    .pipe(imagemin({optimizationLevel: 5}))\r\n    .pipe(gulp.dest('build/img'));\r\n}\r\n\r\nfunction watch() {\r\n  gulp.watch(paths.images, images);\r\n}\r\n```\r\nTask run times are saved in memory and are lost when gulp exits. It will only\r\nsave time during the `watch` task when running the `images` task\r\nfor a second time.\r\n\r\nIf you want to compare modification time between files instead, we recommend these plugins:\r\n- [gulp-changed];\r\n- or [gulp-newer] - supports many:1 source:dest.\r\n\r\n[gulp-newer] example:\r\n```js\r\nfunction images() {\r\n  var dest = 'build/img';\r\n  return gulp.src(paths.images)\r\n    .pipe(newer(dest))  // pass through newer images only\r\n    .pipe(imagemin({optimizationLevel: 5}))\r\n    .pipe(gulp.dest(dest));\r\n}\r\n```\r\n\r\nIf you can't simply filter out unchanged files, but need them in a later phase\r\nof the stream, we recommend these plugins:\r\n- [gulp-cached] - in-memory file cache, not for operation on sets of files\r\n- [gulp-remember] - pairs nicely with gulp-cached\r\n\r\n[gulp-remember] example:\r\n```js\r\nfunction scripts() {\r\n  return gulp.src(scriptsGlob)\r\n    .pipe(cache('scripts'))    // only pass through changed files\r\n    .pipe(header('(function () {')) // do special things to the changed files...\r\n    .pipe(footer('})();'))     // for example,\r\n                               // add a simple module wrap to each file\r\n    .pipe(remember('scripts')) // add back all files to the stream\r\n    .pipe(concat('app.js'))    // do things that require all files\r\n    .pipe(gulp.dest('public/'))\r\n}\r\n```\r\n\r\n## Want to contribute?\r\n\r\nAnyone can help make this project better - check out our [Contributing guide](/CONTRIBUTING.md)!\r\n\r\n[downloads-image]: http://img.shields.io/npm/dm/gulp.svg\r\n[npm-url]: https://npmjs.org/package/gulp\r\n[npm-image]: http://img.shields.io/npm/v/gulp.svg\r\n\r\n[travis-url]: https://travis-ci.org/gulpjs/gulp\r\n[travis-image]: http://img.shields.io/travis/gulpjs/gulp.svg\r\n\r\n[coveralls-url]: https://coveralls.io/r/gulpjs/gulp\r\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/gulp/master.svg\r\n\r\n[gitter-url]: https://gitter.im/gulpjs/gulp\r\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\r\n\r\n[gulp-cached]: https://github.com/wearefractal/gulp-cached\r\n[gulp-remember]: https://github.com/ahaurw01/gulp-remember\r\n[gulp-changed]: https://github.com/sindresorhus/gulp-changed\r\n[gulp-newer]: https://github.com/tschaub/gulp-newer\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gulpjs/gulp.git"
  },
  "scripts": {
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
    "lint": "jshint bin test index.js --reporter node_modules/jshint-stylish/stylish.js --exclude node_modules && jscs bin test index.js",
    "test": "npm run-script lint && mocha --reporter spec"
  },
  "tags": [
    "asset",
    "build",
    "make",
    "pipeline",
    "stream",
    "system",
    "tool"
  ],
  "version": "4.0.0-alpha.2"
}
