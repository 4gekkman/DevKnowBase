////=================================================////
////                                                 ////
////                  Facebook React                 ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  // Официальные ресурсы //
  //---------------------//

    # Сайт React
        https://facebook.github.io/react/

    # GitHub репозиторий React
        https://github.com/facebook/react

    # Документация React
        https://facebook.github.io/react/docs

    # Блог React
        https://facebook.github.io/react/blog/

    # Официально одобренные дополнительные инструменты
        https://github.com/facebook/react/wiki/Complementary-Tools

    # Официально одобренные примеры кода
        https://github.com/facebook/react/wiki/Examples

    # Туториал
        https://facebook.github.io/react/docs/tutorial.html

  // Неофициальные ресурсы //
  //-----------------------//

    # Качественный код от сообщества React
        https://github.com/reactjs

    # React.js курс для начинающих (от maxfarseer@gmail.com)
        https://maxfarseer.gitbooks.io/react-course-ru/content/


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Основы

    А1. Что такое React
    А2. Плюсы и минусы React
    А3. Hello world на React
    А4. Думай в стиле React

  # Б.  Туториал

    Б1.

  # В.  Руководства

    В1.

  # Г.  Справочники

    Г1.

  # Я.  Рецепты и наработки

    Я1.


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Что такое React

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Факты о React

      ▪ React, это open source проект
      ▪ React, это JS библиотека
      ▪ React нужен для отрисовки пользовательских интерфейсов
      ▪ React декларативен
      ▪ В основе React лежат компоненты
      ▪ React может использоваться с любым стеком технологий
      ▪ Нисходящий поток данных
      ▪ React уже сейчас используется на многих крупных сайтах

    # История React кратко

      ▪ React создал Jordan Walke
      ▪ Он создал React под впечатлением от XHP
      ▪ Впервые React засветился в 2011-м
      ▪ А React Native впервые засветился в 2015-м

    # Особенности React

      ▪ Однонаправленный нисходящий поток данных
      ▪ Виртуальный DOM
      ▪ Синтаксис JSX
      ▪ React Native

  --------------------------------------

  > Ссылки

    # Официальный сайт React
        https://facebook.github.io/react/

    # Страница про React в Wiki (en)
        https://en.wikipedia.org/wiki/React_(JavaScript_library)

  > Введение
    - В этой главе собраны общие сведения про React.

  > Факты о React

    • React, это open source проект
      - Входит в TOP-2 всех open source проектов Facebook.
      - И находится на 6-м месте на github по кол-ву присвоенных
        звёзд за всё время.

    • React, это JS библиотека
      - React, это JS библиотека.
      - Не фреймворк, а именно библиотека.

    • React нужен для отрисовки пользовательских интерфейсов
      - То есть, он помогает создавать клиентские интерфейсы.
      - Об этом так и пишут на официальном сайте React:
        "A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES".

    • React декларативен
      - Создаёшь простые представления для каждого состояния приложения.
      - И React обновляет и отрисовывает представление именно того
        компонента, для которых изменились данные.

    • В основе React лежат компоненты
      - Вся разработка на React построена вокруг компонентов.
      - Компоненты React могут быть вложены друг в друга, как матрёшки,
        образуя древообразную структуру.
      - Совокупность этих компонентов и образуют Rich UI.

    • React может использоваться с любым стеком технологий
      - PHP, NodeJS, и т.д.
      - Создатели React не проектировали его для какого-то конкретного стека.
      - Но всё же, лучше всего использовать его с NodeJS, поскольку
        это даёт расширенные возможности, например, возможность рендеринга
        стартовых состояний представлений на сервере.

    • Нисходящий поток данных
      - Выше упоминалось, что в React компоненты образуют древообразную структуру.
      - И в этой структуре данные могут течь лишь вниз, от корня по веткам.
      - То есть, компоненты-детки никак не могут изменять своих компонентов-родителей.

    • React уже сейчас используется на многих крупных сайтах
      - https://www.airbnb.ru
      - https://feedly.com
      - http://bleacherreport.com
      - https://imgur.com
      - https://www.netflix.com

  > История React кратко

    • React создал Jordan Walke
      - Программист из Facebook.

    • Он создал React под впечатлением от XHP
      - XHP, это дополнение к PHP, и грязный хак, созданный в Facebook.
      - Он позволяет использовать синтаксис XML для создания кастомных
        и реюзабельных HTML-элементов.

    • Впервые React засветился в 2011-м
      - В новострой ленте Facebook, и в 2012-м на instagram.com.

    • А React Native впервые засветился в 2015-м
      - На конференции Facebook's React.js.

  > Особенности React

    • Однонаправленный нисходящий поток данных

      ▪ Как работает 2-направленный binding в Knockout
        - В KO ты создаёшь в модели какое-нибудь свойство.
        - И связываешь это свойство с каким-нибудь DOM-элементом.
        - Например, это значение какого-нибудь текстового input.
        - Направление 1: ты меняешь значение св-ва в модели,
                         и меняется значение в представлении.
        - Направление 2: ты меняешь значение св-ва в представлении,
                         и меняется св-во в модели.


           input                ko.observable
           --------   ------>   ---------
           | View |             | Model |
           --------   <------   ---------


      ▪ Как работает 1-направленный binding в React

        ▪ Данные текут вниз
          - Props, States, Handlers, Styles - всё это может быть
            передано деткам через props.
          - Props не могут изменяться детками, а States могут.

        ▪ События текут вверх
          - Через переданные родителями обработчики событий.

        ▪ Иллюстрация

              --------------------
              | Parent component |
              --------------------
                ||           /\
                ||           ||
                || data      || events
                ||           ||
                ||           ||
                \/           ||
              -------------------
              | Child component |
              -------------------

    • Виртуальный DOM

      ▪ DOM в памяти
        - React создаёт в памяти копию реального DOM.

      ▪ Сначала калькуляции, потом изменения реального DOM
        - Когда требуется, React не сразу вносит изменерия в реальный DOM.
        - Сначала он вносит все изменения в виртуальный DOM.
        - Потом составляет план изменений в реальный DOM, исходя из
          минимизации "стоимости" этих изменений. Чем меньше "стоимость",
          тем быстрее эти изменения будут проведены.
        - И лишь после этого вносит изменения в реальный DOM, в соотв. с планом.
        - Это позволяет существенно повысить производительность.

      ▪ Это даёт возможность разработчику не париться по поводу производительности
        - Я имею в виду в той части проблем, которые решает виртуальный DOM.
        - То есть писать код так, как если бы всё представление должно было бы
          перерисовываться при каждом изменении.
        - Но этого не будет происходить благодаря такой вот умной системе виртуального DOM.

    • Синтаксис JSX

      ▪ Что такое JSX
        - XML-надстрока над JS от разработчиков React.
        - JSX не является, и не будет являться частью ECMAScript.

      ▪ Суть JSX
        - Ты пишешь код на JSX в JS-файле.
        - Затем специальный препроцессором обрабатываешь этот файл.
        - JSX-код преобразуется транспайлером в обычный JS-код.

      ▪ Зачем нужен JSX

        ▪ В JS нет многострочных текстов
          - А ведь как-то надо писать многострочную разметку для компонентов.
          - Есть разные костыли, позволяющие писать многострочные тексты.
          - Но разработчики React решили создать свой костыль в виде JSX.

        ▪ React-специфичные фишки
          - Весь JSX код потом преобразуется транспайлером в JS.
          - Что позволило разработчикам React включить фантазию, и приправить
            всё это дело функционалом на свой вкус.
          - Например, возможность подключать прямо в JSX дочерние компоненты.

        ▪ Никто не заставляет использовать JSX
          - Как видно из примера ниже, можно обходиться и без JSX вообще.
          - Однако, работа без JSX - удобство сомнительное.

        ▪ Пример одного и того же кода

          ▪ Без JSX

              class HelloMessage extends React.Component {
                render() {
                  return React.createElement(
                    "div",
                    null,
                    "Hello ",
                    this.props.name
                  );
                }
              }
              ReactDOM.render(React.createElement(HelloMessage, { name: "John" }), mountNode);

          ▪ С JSX

              class HelloMessage extends React.Component {
                render() {
                  return <div>Hello {this.props.name}</div>;
                }
              }
              ReactDOM.render(<HelloMessage name="John" />, mountNode);

    • React Native
      - Библиотеки React Native представлены в 2015-м году.
      - Они позволяют писать нативные iOS- и Android-приложения,
        используя архитектуру React.


А2. Плюсы и минусы React

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Плюсы

      • React быстрее Knockout / Angular

        ▪ Реакт разрабатывался с акцентом на скорость
        ▪ React реализует браузерно-независимые системы DOM и событий
        ▪ Тест скорости говорит, что React быстрее Knockout / Angular

      • Компонентный подход, реюзабельность компонентов

        ▪ Два подхода: не компонентный / компонентный
        ▪ Компоненты React лучше компонентов Knockout
        ▪ Компонентный подход средних/крупных приложений

      • React Native (мобильные приложения)

        ▪ Можно делать мобильные приложения на Javascript/React
        ▪ React Native использует ту же архитектуру, что React

      • Хорошая поддержка (Facebook & Instagram & Community)

        ▪ Разработку поддерживают крупные компании
        ▪ Вокруг React большое сообщество

      • Трендовая и востребованная всеми библиотека

        ▪ Используется во многих проектах
        ▪ Востребована работодателями, много вакансий
        ▪ Обрастает большим кол-вом доп.кода и документации
        ▪ Легче найти специалистов

      • Возможность рендерить стартовые состояния на сервере (для NodeJS)

        ▪ Что очень важно для SEO
        ▪ Ускорение стартовой загрузки документов

      • Хорошо подходит для командной разработки

        ▪ Каждый может работать над своим компонентом
        ▪ Тимлид может контролировать, как потом эти компоненты должны взаимодействовать

      • Хорошая масштабируемость

        ▪ Благодаря компонентному подходу, React-приложения хорошо масштабируются

    # Минусы

      • Сложнее и запутаннее, чем KnockoutJS
      • Документация хуже, чем у KnockoutJS
      • Не поддерживает браузеры <= IE8
      • React не лучший вариант для малых приложений
      • Придётся использовать JSX
      • Придётся использовать много доп.инструментов

  --------------------------------------

  > Ссылки

      # Тест скорости работы React / Knockout / Angular
          https://www.codementor.io/reactjs/tutorial/reactjs-vs-angular-js-performance-comparison-knockout

      # Официальный сайт React Native
          https://facebook.github.io/react-native/

  > Введение
    - Кратко рассматриваются наиболее выдающиеся плюсы и минусы React.
    - Я буду сравнивать с KnockoutJS, т.к. хорошо её знаю, и имею большой опыт.

  > Плюсы

    • React быстрее Knockout / Angular

      ▪ Реакт разрабатывался с акцентом на скорость
        - Есть основания предполагать, что React будет быстрее Knockout.

      ▪ React реализует браузерно-независимые системы DOM и событий
        - Для ускорения работы, и кроссбраузерности.

      ▪ Тест скорости говорит, что React быстрее Knockout / Angular
        - См.ссылку в разделе "Ссылки" выше.

    • Компонентный подход, реюзабельность компонентов

      ▪ Два подхода: не компонентный / компонентный

        1) Не компонентный подход
          - KnockoutJS разрабатывался с не компонентным подходом.
          - Где в одной модели всё смешивалось в кучу.
          - Очень часто, по принципу: 1 документ, 1 модель.
          - И лишь в поздних версиях появились компоненты.
          - Этот подход лучше годится для малых и средних приложений.

        2) Компонентный подход
          - ReactJS изначально разрабатывался с компонентным подходом.
          - В нём нет другого варианта, только писать компоненты, и всё.
          - Этот подход лучше годится для средних и крупных приложений.

      ▪ Компоненты React лучше компонентов Knockout
        - Потому React изначально разрабатывался с компонентным подходом.
        - И в нём всё заточено под работу с компонентами.

      ▪ Компонентный подход средних/крупных приложений
        - Например, у нас интернет магазин, в котором есть товарные позиции.
        - Эти товарные позиции встречаются в 10 разных документах этого магазина.
        - Без компонентного подхода, в каждом документе понадобилось бы использовать
          свою отдельную копию модели товарных позиций.
        - С компонентным подходом, надо создать лишь 1-ин компонент, который
          и использовать во всех 10 документах.

    • React Native (мобильные приложения)

      ▪ Можно делать мобильные приложения на Javascript/React
        - Причём, это будут нативные мобильные приложения.

      ▪ React Native использует ту же архитектуру, что React
        - То есть, можно использовать знания Javascript/React для разработки моб.приложений.

    • Хорошая поддержка (Facebook & Instagram & Community)

      ▪ Разработку поддерживают крупные компании
        - В качестве разработчиков не выступают 1.5 человека.
        - А выступают крупные компании, Facebook и Instagram.
        - Так что вероятность внезапного прекращения поддержки мала.

      ▪ Вокруг React большое сообщество
        - Эта библиотека является трендовой.
        - Поэтому её изучают много людей.
        - И они пишут много кода и доп.инструментов по работе с ней.
        - А также много туториалов, гайдов и другой обучающей литературы.

    • Трендовая и востребованная всеми библиотека

      ▪ Используется во многих проектах
      ▪ Востребована работодателями, много вакансий
      ▪ Обрастает большим кол-вом доп.кода и документации
      ▪ Легче найти специалистов

    • Возможность рендерить стартовые состояния на сервере (для NodeJS)

      ▪ Что очень важно для SEO
        - SEO-роботы, в настоящий момент (2016), не исполняют JS.
        - Они видят только то, что им отдал сервер.
        - А то, что отрисовано после JS, они не видят.
        - А значит, и не учитывают это в индексации твоего сайта.
        - Поэтому, индексируемый контент надо рендерить на серваке.

      ▪ Ускорение стартовой загрузки документов
        - Как правило, сервак работает быстрее, чем комп клиента.
        - Поэтому, он может быстрее отрендерить JS в представлении, чем клиентю.
        - Что может существенно ускорить загрузку документов для клиентов.

    • Хорошо подходит для командной разработки

      ▪ Каждый может работать над своим компонентом
      ▪ Тимлид может контролировать, как потом эти компоненты должны взаимодействовать

    • Хорошая масштабируемость

      ▪ Благодаря компонентному подходу, React-приложения хорошо масштабируются
        - С ростом размера приложения, растёт и сложность его поддержки/развития.
        - У приложений с компонентным подходом, эта сложность растет медленнее,
          чем у приложений без компонентного подхода.
        - В результате "предел" роста существенно отодвигается вверх.


  > Минусы

    • Сложнее и запутаннее, чем KnockoutJS
      - На начальном этапе React замедляет работу.
      - Понять, как работают props, state и как взаимодействуют компоненты непросто.

    • Документация хуже, чем у KnockoutJS
      - У React не самая лучшая документация.
      - В ней плохо проработана категоризация.
      - Так что, новичкам придётся попотеть над ней.

    • Не поддерживает браузеры <= IE8
      - И никогда не будет.
      - Хотя, вроде бы, есть какие-то инструменты для этого.

    • React не лучший вариант для малых приложений
      - Придётся писать много кода, чтобы достичь малых результатов.
      - Для малых приложений намного удобнее использовать Knockout.

    • Придётся использовать JSX
      - Это XML-образный синтаксис для использования внути render в React.
      - В случае с knockout, мы могли использовать обычный HTML.
      - Здесь же приходится использовать JSX (писать на чистом JS не вариант).

    • Придётся использовать много доп.инструментов
      - Redux, babel, и т.д. Тысячи их.


А3. Hello world на React

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Hello World на React

  --------------------------------------

  > Ссылки

      # Туториал
          https://facebook.github.io/react/docs/tutorial.html

  > Введение
    - Это глава содержит лишь Hello World на React.
    - С комментариями.

  > Hello World на React

      // 1] React-компонент, который выводит строку "Hello, world!"
      var CommentBox = React.createClass({
        render: function() {
          return (
            <div className="helloworld">
              <span>Hello, world!</span>
            </div>
          );
        }
      });

      // 2] Отрисовка компонента CommentBox в конце эл-та с ID == content
      ReactDOM.render(
        <HelloWorld />,
        document.getElementById('content')
      );


А4. Думай в стиле React

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Думай в стиле React #1: начни с дизайна
    # Думай в стиле React #2: подготовь API
    # Думай в стиле React #3: разбей весь UI на иерархию компонентов

      ▪ Нарисуй рамку вокруг каждого компонента
      ▪ Используй цвет при обведения компонентов рамками
      ▪ Как определить, что должно быть отдельным компонентом?
      ▪ Используй принцип: "один компонент - одно действие"
      ▪ Используй оригинальную модель данных из API сервера в компонентах React
      ▪ В итоге, в нашем примере мы выделяем 5 компонентов

    #
    #

  --------------------------------------

  > Ссылки

      # Думай в стиле React
          https://facebook.github.io/react/docs/thinking-in-react.html

  > Введение
    - В этой главе схематично описан ход разработки приложения на React.
    - Она учит "думать в стиле React" во время разработки приложений на React.
    - Глава построена на примере разработки таблицы с данными, и поиском.

  > Думай в стиле React #1: начни с дизайна
    - Сначала подготовь дизайн документа, или хотя-бы его прототип.
    - Чтобы на основе дизайна продумать структуру будущего React-приложения.
    - Для нашего примера, используем этот дизайн:

        https://facebook.github.io/react/img/blog/thinking-in-react-components.png

  > Думай в стиле React #2: подготовь JSON API
    - Затем на сервере подготовь API для работы с React-приложением на клиенте.
    - Например, это API должно возвращать стартовый набор данных в ответ на GET-запрос.
    - И возвращать необходимые данные в ответ на различные POST-запросы.
    - Все данные желательно передавать туда-сюда в формате JSON.
    - Например:

        [
          {category: "Sporting Goods", price: "$49.99", stocked: true, name: "Football"},
          {category: "Sporting Goods", price: "$9.99", stocked: true, name: "Baseball"},
          {category: "Sporting Goods", price: "$29.99", stocked: false, name: "Basketball"},
          {category: "Electronics", price: "$99.99", stocked: true, name: "iPod Touch"},
          {category: "Electronics", price: "$399.99", stocked: false, name: "iPhone 5"},
          {category: "Electronics", price: "$199.99", stocked: true, name: "Nexus 7"}
        ];

  > Думай в стиле React #3: разбей весь UI на иерархию компонентов

    ▪ Нарисуй рамку вокруг каждого компонента
      - Определи, что можно считать компонентами на макете.
      - Обведи каждый прямоугольной рамкой.
      - Учти, что любой компонент может быть вложен в другой.

    ▪ Используй цвет при обведения компонентов рамками
      - Каждому отличающемуся компоненту присваивай свой цвет.
      - Экземпляры одного и того же компонента обводи одним и тем же цветом.
      - Это как бы показывает, что все эти экземпляры относятся к 1-му компоненту.

    ▪ Как определить, что должно быть отдельным компонентом?
      - А как определить, что должно быть отдельной функцией или объектом?
      - Используй здесь тот же самый принцип, он должен быть тебе знаком.

    ▪ Используй принцип: "один компонент - одно действие"
      - Старайся следовать при разработке компонентов принципу "одного действия".
      - Когда один компонент, в идеале, ответственнен за одну вещь.
      - Если же компонен начинает разрастаться, можно дробить его на несколько.

    ▪ Используй оригинальную модель данных из API сервера в компонентах React
      - Заранее спроектируй модель данных так, чтобы было с ними удобно работать.
      - Передавай эти данные с сервера клиенту в формате JSON.
      - Используй эти данные прямо в том же формате, в котором они поступили.
      - Это существенно упрощает дело, ведь не нужно писать преобразователи
        данных клиент->сервер, сервер->клиент.

    ▪ В итоге, в нашем примере мы выделяем 5 компонентов



