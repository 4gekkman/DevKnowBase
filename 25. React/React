////=================================================////
////                                                 ////
////                  Facebook React                 ////
////                                                 ////
////=================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  // Официальные ресурсы //
  //---------------------//

    # Сайт React
        https://facebook.github.io/react/

    # GitHub репозиторий React
        https://github.com/facebook/react

    # Документация React
        https://facebook.github.io/react/docs

    # Блог React
        https://facebook.github.io/react/blog/

    # Официально одобренные дополнительные инструменты
        https://github.com/facebook/react/wiki/Complementary-Tools

    # Официально одобренные примеры кода
        https://github.com/facebook/react/wiki/Examples

  // Неофициальные ресурсы //
  //-----------------------//

    # Качественный код от сообщества React
        https://github.com/reactjs

    # React.js курс для начинающих (от maxfarseer@gmail.com)
        https://maxfarseer.gitbooks.io/react-course-ru/content/


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Основы

    А1. Что такое React
    А2. Плюсы и минусы React
    А3. Hello world на React
    А4. Думай в стиле React

  # Б.  Туториал

    Б1.

  # В.  Руководства

    В1.

  # Г.  Справочники

    Г1.

  # Я.  Рецепты и наработки

    Я1.


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Что такое React

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Факты о React

      ▪ React, это JS библиотека
      ▪ React нужен для отрисовки пользовательских интерфейсов
      ▪ Декларативность
      ▪ В основе React лежат компоненты
      ▪




  --------------------------------------

  > Ссылки

    # Официальный сайт React
        https://facebook.github.io/react/

    # Страница про React в Wiki (en)
        https://en.wikipedia.org/wiki/React_(JavaScript_library)

  > Введение
    - В этой главе собраны общие сведения про React.

  > Факты о React

    • React, это JS библиотека
      - React, это JS библиотека.
      - Не фреймворк, а именно библиотека.

    • React нужен для отрисовки пользовательских интерфейсов
      - То есть, он помогает создавать клиентские интерфейсы.
      - Об этом так и пишут на официальном сайте React:
        "A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES".

    • Декларативность
      - Создаёшь простые представления для каждого состояния приложения.
      - И React обновляет и отрисовывает представление именно того
        компонента, для которых изменились данные.

    • В основе React лежат компоненты
      - Вся разработка на 



А2. Плюсы и минусы React

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Плюсы

      • React быстрее Knockout / Angular

        ▪ Реакт разрабатывался с акцентом на скорость
        ▪ React реализует браузерно-независимые системы DOM и событий
        ▪ Тест скорости говорит, что React быстрее Knockout / Angular

      • Компонентный подход, реюзабельность компонентов

        ▪ Два подхода: не компонентный / компонентный
        ▪ Компоненты React лучше компонентов Knockout
        ▪ Компонентный подход средних/крупных приложений

      • React Native (мобильные приложения)

        ▪ Можно делать мобильные приложения на Javascript/React
        ▪ React Native использует ту же архитектуру, что React

      • Хорошая поддержка (Facebook & Instagram)

        ▪ Разработку поддерживают крупные компании
        ▪ Вокруг React большое сообщество

      • Трендовая и востребованная всеми библиотека

        ▪ Используется во многих проектах
        ▪ Востребована работодателями, много вакансий
        ▪ Обрастает большим кол-вом доп.кода и документации
        ▪ Легче найти специалистов

      • Возможность рендерить стартовые состояния на сервере (для NodeJS)

        ▪ Что очень важно для SEO
        ▪ Ускорение стартовой загрузки документов

      • Хорошо подходит для командной разработки

        ▪ Каждый может работать над своим компонентом
        ▪ Тимлид может контролировать, как потом эти компоненты должны взаимодействовать

    # Минусы

      • Сложнее и запутаннее, чем KnockoutJS
      • Документация хуже, чем у KnockoutJS
      • Не поддерживает браузеры <= IE8
      • React не лучший вариант для малых приложений
      • Придётся использовать JSX
      • Придётся использовать много доп.инструментов

  --------------------------------------

  > Ссылки

      # Тест скорости работы React / Knockout / Angular
          https://www.codementor.io/reactjs/tutorial/reactjs-vs-angular-js-performance-comparison-knockout

      # Официальный сайт React Native
          https://facebook.github.io/react-native/

  > Введение
    - Кратко рассматриваются наиболее выдающиеся плюсы и минусы React.
    - Я буду сравнивать с KnockoutJS, т.к. хорошо её знаю, и имею большой опыт.

  > Плюсы

    • React быстрее Knockout / Angular

      ▪ Реакт разрабатывался с акцентом на скорость
        - Есть основания предполагать, что React будет быстрее Knockout.

      ▪ React реализует браузерно-независимые системы DOM и событий
        - Для ускорения работы, и кроссбраузерности.

      ▪ Тест скорости говорит, что React быстрее Knockout / Angular
        - См.ссылку в разделе "Ссылки" выше.

    • Компонентный подход, реюзабельность компонентов

      ▪ Два подхода: не компонентный / компонентный

        1) Не компонентный подход
          - KnockoutJS разрабатывался с не компонентным подходом.
          - Где в одной модели всё смешивалось в кучу.
          - Очень часто, по принципу: 1 документ, 1 модель.
          - И лишь в поздних версиях появились компоненты.
          - Этот подход лучше годится для малых и средних приложений.

        2) Компонентный подход
          - ReactJS изначально разрабатывался с компонентным подходом.
          - В нём нет другого варианта, только писать компоненты, и всё.
          - Этот подход лучше годится для средних и крупных приложений.

      ▪ Компоненты React лучше компонентов Knockout
        - Потому React изначально разрабатывался с компонентным подходом.
        - И в нём всё заточено под работу с компонентами.

      ▪ Компонентный подход средних/крупных приложений
        - Например, у нас интернет магазин, в котором есть товарные позиции.
        - Эти товарные позиции встречаются в 10 разных документах этого магазина.
        - Без компонентного подхода, в каждом документе понадобилось бы использовать
          свою отдельную копию модели товарных позиций.
        - С компонентным подходом, надо создать лишь 1-ин компонент, который
          и использовать во всех 10 документах.

    • React Native (мобильные приложения)

      ▪ Можно делать мобильные приложения на Javascript/React
        - Причём, это будут нативные мобильные приложения.

      ▪ React Native использует ту же архитектуру, что React
        - То есть, можно использовать знания Javascript/React для разработки моб.приложений.

    • Хорошая поддержка (Facebook)

      ▪ Разработку поддерживают крупные компании
        - В качестве разработчиков не выступают 1.5 человека.
        - А выступают крупные компании, Facebook и Instagram.
        - Так что вероятность внезапного прекращения поддержки мала.

      ▪ Вокруг React большое сообщество
        - Эта библиотека является трендовой.
        - Поэтому её изучают много людей.
        - И они пишут много кода и доп.инструментов по работе с ней.
        - А также много туториалов, гайдов и другой обучающей литературы.

    • Трендовая и востребованная всеми библиотека

      ▪ Используется во многих проектах
      ▪ Востребована работодателями, много вакансий
      ▪ Обрастает большим кол-вом доп.кода и документации
      ▪ Легче найти специалистов

    • Возможность рендерить стартовые состояния на сервере (для NodeJS)

      ▪ Что очень важно для SEO
        - SEO-роботы, в настоящий момент (2016), не исполняют JS.
        - Они видят только то, что им отдал сервер.
        - А то, что отрисовано после JS, они не видят.
        - А значит, и не учитывают это в индексации твоего сайта.
        - Поэтому, индексируемый контент надо рендерить на серваке.

      ▪ Ускорение стартовой загрузки документов
        - Как правило, сервак работает быстрее, чем комп клиента.
        - Поэтому, он может быстрее отрендерить JS в представлении, чем клиентю.
        - Что может существенно ускорить загрузку документов для клиентов.

    • Хорошо подходит для командной разработки

      ▪ Каждый может работать над своим компонентом
      ▪ Тимлид может контролировать, как потом эти компоненты должны взаимодействовать

  > Минусы

    • Сложнее и запутаннее, чем KnockoutJS
      - На начальном этапе React замедляет работу.
      - Понять, как работают props, state и как взаимодействуют компоненты непросто.

    • Документация хуже, чем у KnockoutJS
      - У React не самая лучшая документация.
      - В ней плохо проработана категоризация.
      - Так что, новичкам придётся попотеть над ней.

    • Не поддерживает браузеры <= IE8
      - И никогда не будет.
      - Хотя, вроде бы, есть какие-то инструменты для этого.

    • React не лучший вариант для малых приложений
      - Придётся писать много кода, чтобы достичь малых результатов.
      - Для малых приложений намного удобнее использовать Knockout.

    • Придётся использовать JSX
      - Это XML-образный синтаксис для использования внути render в React.
      - В случае с knockout, мы могли использовать обычный HTML.
      - Здесь же приходится использовать JSX (писать на чистом JS не вариант).

    • Придётся использовать много доп.инструментов
      - Redux, babel, и т.д. Тысячи их.







