////===============================////
////                               ////
////              Dating           ////
////                               ////
////===============================////
////                    ////
////       Links        ////
////                    ////
////====================////


  - badoo.com


////==========================================================////
////                                   ////
////          Table of contents        ////
////                                   ////
////===================================////


  1. План действий
  2. Как реализовать план

  x. Скрипт


////==================================================////
////                      ////
////        Content       ////
////                      ////
////======================////


1. План действий

  Требуется возможность включать/выключать автоматическое
  (без временных и финансовых затрат) формирование входящего 
  потока чатов с девушками, которые что-то уже написали 
  (т.е. вышли на контакт) из Badoo*. 

  Кроме того, необходимо автоматически удалять все чаты, 
  в которых нет активности в течение 7 дней.

  Всё это даст возможность периодически (по настроению) посещать
  сайт или мобильное приложение badoo, и визуально просматривать
  "улов". С понравившимися визуально девушками можно 
  попереписываться.

  * Выбран именно Badoo, как самая популярная в России, и в 
  частности в РФ, площадка. На Tinder, например, в Сочи
  вообще почти никого.


2. Как реализовать план

  План реализовать не сложно. Для этого нужно написать
  всего лишь один JS скрипт. Его нужно будет запускать
  на сайте badoo.com, предварительно залогинившись.
  Этот скрипт должен автоматически запускаться после
  перезагрузки браузера на домене badoo.com с помощью
  расширения в Chrome.
  Вот, что он должен делать:

  • На странице "Encounters"

   ☑ Лайкать всех девушек подряд с заданными в профиле
      параметрами до лимита.

   ☑ Впадать в спячку по достижению лимита, и 
      каждый час проверять, не спал ли лимит. Если спал,
      продолжить. И так до бесконечности.

  • На странице "Messages"

   ☐ Писать сообщение всем девушкам, у которых ещё нет моих сообщений.

   ☑ Удалять все чаты, в которых последнее сообщение старше 14 дней.


x. Скрипт

---------------------


// Скрипт для страницы "Encounters"
var my_encounters = {
  data: {
    interval_ms: 1500,          // сколько ждать после каждого лайка, чтобы поставить следующий
    wait_counters_ms: 0,        // сколько скрипт уже ждёт новую квоту на свайпы
    wait_interval_ms: 3600000,  // как часто скрипт проверяет, не дали ли новую квоту на свайпы
    timerId: ""                 // идентификатор таймера
  },
  methods: {

    // Достигнут ли лимит свайпов
    is_limit_reached: function(){ 
      if(document.evaluate("//h1[contains(., 'out of votes!')]", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue) 
        return true; 
      return false; 
    },

    // Поставить лайк текущей анкете
    autolike: function(){ 
      document.querySelector('.js-profile-header-vote').click();
    },

    // При обнаружении, закрыть модальное окно
    close_modal: function(){ 
      document.querySelector('.icon.js-ovl-close').click();
    },

    // Перейти на вкладку "Encounters"
    goto_encounters: function(){
      document.evaluate("//a[contains(@href,'encounters')]", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click();
    },

    // Запустить скрипт
    start: function(){

      // Запустить setInterval через каждые my_encounters.data.interval_ms
      my_encounters.data.timerId = setInterval(function(){ 
        
        // Перейти на вкладку "Encounters"
        my_encounters.methods.goto_encounters();

        // Если лимит не достигнут
        if(!my_encounters.methods.is_limit_reached() && +my_encounters.data.wait_counters_ms<=0) 
          my_encounters.methods.autolike(); 

        // Если лимит достигнут
        else {

          // Если уже прошли my_encounters.data.wait_interval_ms, закрыть модалку и сбросить счетчик
          if(my_encounters.data.wait_counters_ms <= 0) { 
            my_encounters.data.wait_counters_ms = my_encounters.data.wait_interval_ms;
            my_encounters.methods.close_modal();
          }

          // Если ещё не прошли my_encounters.data.wait_interval_ms, прибавить к счётчику my_encounters.data.interval_ms
          else 
            my_encounters.data.wait_counters_ms = +my_encounters.data.wait_counters_ms - +my_encounters.data.interval_ms;

          // Сообщить, сколько уже прошло по счётчику
          console.log('LLR: '+my_encounters.data.wait_counters_ms);

        }

      }, my_encounters.data.interval_ms);    

    },

    // Остановить скрипт
    stop: function(){
      clearInterval(my_encounters.data.timerId);
    }

  }
};


// Скрипт для страницы "Messages"
var my_messages = {
  data: {
    interval_ms: 1000,          // частота тиков скрипта,
    contact_upl_sleep_ms: 1000, // сколько ждать загрузку данных после переход на контакт
    contacts: [],               // массив контактов
    no_dupl: true,              // не запускать скрипт, если предыдущий ещё выполняется
    invoking: false,            // выполняется ли ещё скрипт
    months: {
      January: 1,
      February: 2,
      March: 3,
      April: 4,
      May: 5,
      June: 6,
      July: 7,
      August: 8,
      September: 9,
      October: 10,
      November: 11,
      December: 12
    },
    days_in_month_avg: 30,
    await_delete_modal: false,
    greetings: [
      'Привет',
      'Девушка, а у вас вкусная помада? Можно попробовать?',
      'Мадмуазель, разрешите представиться',
      'Кажется, я безответственно влюбился в вашу улыбку',
      'Можно пригласить вас на танец?',
      'У вас потрясающая улыбка!',
      'Можно пригласить вас на танец?',
      'Я уже час придумываю повод с вами познакомиться, но пока у меня ничего не придумалось.',
      'Обычно я не знакомлюсь с девушками таким образом…',

      //'Мадмуазель, разрешите приставиться',
      //'Привет',
      //'Привет, у тебя есть парень?',
      //'Привет! Я один из тех надоедливых типов, кто считает, что вы потрясающе красивая.',
      //'Мне сказали, вы меня искали...',
      //'Кажется, я безответственно влюбился в вашу улыбку',
      //'У вас потрясающая улыбка!',
      //'Девушка, а не поможете мне найти мой пульс?',
      //'Обычно я не знакомлюсь с девушками таким образом…',
      //'Могу я заказать вам напиток?',
      //'Прошу прощения, что прерываю, но мне нужно срочно сообщить вам, что вы ужасно милая.',
      //'Хорошо, что здесь так многолюдно и вы все равно не услышите тех глупостей, которые я сейчас вам наговорю.',
      //'Мне кажется, ваших родителей надо выдвигать на Нобелевскую премию. Или что там еще выдают создателям мировых шедевров?',
      //'Можно пригласить вас на танец?',
      //'Вы знаете, в Конституции написано, что нельзя лишать человека права на счастье...',
      //'Девушка, а у вас вкусная помада? Можно попробовать?',
      //'Я уже час придумываю повод с вами познакомиться, но пока у меня ничего не придумалось.',
      //'Я проиграл пари и в качестве расплаты за проигрыш должен поцеловать самую красивую девушку на этом сайте.',
    ]
  },
  methods: {

    // Открыть окошко "Messages" с сообщениями (если ещё не открыто)
    open_messages: function(){
      if(!document.querySelector('.messenger-ovl__body'))
        document.evaluate("//a[contains(@href,'messenger')]", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click();
    },

    // Получить весь список контактов
    get_contacts: function(){
      return document.querySelectorAll('.js-contacts .js-im-users .contacts__item');
    },

    // Удалить старые контакты
    remove_old_contact: function(contact_name){

      // Получить кнопку "Delete" на модальном окне для подтверждения, и нажать
      var confirm_del_btn = document.querySelector('.btn.btn--sm.js-im-confirm-delete');
      if(confirm_del_btn) 
        confirm_del_btn.click();

      // Получить дату последнего сообщения
      var el = document.querySelectorAll('#messages_body .message__date')[document.querySelectorAll('#messages_body .message__date').length-1];
      if(!el)
        return;
      var lastdate = el.textContent;

      // Если lastdate содержит фразу "minutes ago" или "hours ago", завершить
      if(lastdate.trim().search(/minutes ago/g) != -1 || lastdate.trim().search(/hours ago/g) != -1)
        return;

      // Получить дату сообщения и текущую дату UTC
      var dates = {
        msg: {
          year: lastdate.trim().slice(lastdate.trim().search(/\b(19|20)\d{2}\b/g), lastdate.trim().length),
          month: my_messages.data.months[lastdate.trim().substr(lastdate.trim().search(/\D/g)+1, lastdate.trim().search(/\b(19|20)\d{2}\b/g)-2-lastdate.trim().search(/\D/g))],
          day: lastdate.trim().substr(0, lastdate.trim().search(/\D/g))
        },
        now: {
          year: new Date(Date.now()).getUTCFullYear(),
          month: new Date(Date.now()).getUTCMonth(),
          day: new Date(Date.now()).getUTCDay()
        }
      }

      // Сколько дней прошло
      var days_gone = (function(){
        return (Date.parse(dates.now.year + "-" + dates.now.month + "-" + dates.now.day) - Date.parse(dates.msg.year + "-" + dates.msg.month + "-" + dates.msg.day))/1000/60/60/24;
      })();

      // Если более 14, удалить контакт
      if(days_gone > 14) {

        // Получить кнопку remove и нажать на неё
        var remove_el = document.querySelector('.option__in.js-im-contact-remove');
        console.log(remove_el);
        if(!remove_el) {
          console.log('Проблема в my_messages, метод remove_old_contact. Не могу получить кнопку удаления контакта.')
          return;
        }
        if(!my_messages.data.await_delete_modal)
          remove_el.click();

        // Подать сигнал, что ожидается модальное окно для удаления
        my_messages.data.await_delete_modal = true;

        // Получить кнопку "Delete" на модальном окне для подтверждения, и нажать
        var confirm_del_btn = document.querySelector('.btn.btn--sm.js-im-confirm-delete');
        if(!confirm_del_btn) {
          console.log('Проблема в my_messages, метод remove_old_contact. Не могу получить кнопку подтверждения удаления контакта.')
          return;
        }
        confirm_del_btn.click();

        // Подать сигнал, что контакт удалён
        my_messages.data.await_delete_modal = false;

        // Сообщить, что контакт удалён
        console.log('Контакт '+contact_name+' удалён, так как прошло '+days_gone+' дней с момента последнего сообщения');

      }

    },

    // Написать приветственное сообщение
    write_a_greeting: function(name){

      // Получить input
      var input_field = document.querySelector('.messenger-tools__input');
      if(!input_field) {
        console.log("ERROR! В my_messages проблема с write_a_greeting: не могу найти элемент input для ввода сообщения!");
        return false;
      }

      // Получить кнопку "отправить сообщение"
      var send_button = document.querySelector('.messenger-tools__btn.js-send-message');
      if(!send_button) {
        console.log("ERROR! В my_messages проблема с write_a_greeting: не могу найти элемент кнопки отправки сообщения!");
        return false;
      }

      // Проверить, есть ли тут уже мои сообщения
      var are_my_msgs_present = (function(){
        return document.querySelectorAll('.messages .message.js-message-block.message--out').length;
      })();
      
      // Если моих сообщений тут ещё нет
      if(!are_my_msgs_present) {
        let message = my_messages.data.greetings[Math.floor(Math.random()*my_messages.data.greetings.length)];
        console.log(message);
        input_field.innerHTML = message;
        send_button.click();
      }

    },

    // Подождать, и выполнить какое-то действие
    sleep: (ms) => {
      return new Promise((resolve) => setTimeout(resolve, ms));
    },

    // Пробежаться по списку контактов и выполнить нужные операции
    run: function(){

      // Получить свежий список контактов
      my_messages.data.contacts.list = (function(){
        let result = my_messages.methods.get_contacts();
        if(!result) {
          console.log("ERROR! В my_messages проблема с get_contacts: возвращает пустое значение!");
          return [];
        }
        else
          return result;
      })();

      // Указать, что скрипт начал работу
      if(my_messages.data.contacts.list.length > 0)
        my_messages.data.invoking = true;      

      // Пробежаться по всем контактам
      for(let i=0; i<my_messages.data.contacts.list.length; i++) {

        setTimeout(() => {

          // Если ожидается модальное окно для удаления контакта
          if(my_messages.data.await_delete_modal) {
            var name = document.querySelector('.connection-header__name').textContent;
            my_messages.methods.remove_old_contact(name);
            return;
          }

          // Выполнить этот код через my_messages.data.contact_upl_sleep_ms/2 ms
          my_messages.methods.sleep(my_messages.data.contact_upl_sleep_ms/2).then(() => {

            // Перейти в i-тый контакт
            my_messages.data.contacts.list[i].querySelector('.im_user').click();

            // Получить имя контакта
            var name = document.querySelector('.connection-header__name').textContent;
            //console.log(name);

            // Удалить старые контакты
            //my_messages.methods.remove_old_contact(name);

            // Написать сообщение, если ещё ни одного моего нет
            my_messages.methods.write_a_greeting(name);

            // Указать, что скрипт закончил работу
            if(i == my_messages.data.contacts.list.length - 1)
              my_messages.data.invoking = false;

          });

        }, +my_messages.data.contact_upl_sleep_ms*(+i+1));

      }

    },

    // Запустить скрипт
    start: function(){

      // Запустить setInterval через каждые my_messages.data.interval_ms
      my_messages.data.timerId = setInterval(function(){ 

        // Если ожидается модальное окно для удаления контакта
        if(my_messages.data.await_delete_modal) {
          var name = document.querySelector('.connection-header__name').textContent;
          my_messages.methods.remove_old_contact(name);
        }

        // Если предыдущий скрипт ещё не закончил работу, завершить
        if(my_messages.data.no_dupl === true && my_messages.data.invoking === true)
          return;

        // Открыть окошко "Messages" с сообщениями (если ещё не открыто)
        my_messages.methods.open_messages();

        // Пробежаться по всем контактам и выполнить необходимые операции
        my_messages.methods.run();

      }, my_messages.data.interval_ms);    

    },

    // Остановить скрипт
    stop: function(){
      clearInterval(my_messages.data.timerId);
    }

  }
};




---------------------








