<?php
/*
MySQL
0. Оглавление



Главы:
==================================================

  1. Установка, настройка, обновление сервера MySQL
  2. Работа с mysql shell
  3. Аутентификация через утилиту mysql_config_editor
  4. Вводный tutorial в MySQL (+примеры)
  5. Storage engines и подробно об INNODB (+примеры)
  6. Типы данных в MySQL
  7. Лимиты в MySQL 5.6
  8. Синтаксис SQL-выражений
  9. Сохраняемые программы и представления
  10. Индексы, ключи, оптимизация
  11. Синтаксис SQL - data manipulation statements
  12. Синтаксис SQL - транзакции, составные выражения
  13. Синтаксис SQL - администрирование MySQL
  14. Функции и операторы SQL
  15. phpMyAdmin - UI для MySQL
  16. Workbench - UI для MySQL





Единое подробное оглавление для всего справочника по MySQL:
===========================================================



1. Установка, настройка, обновление сервера MySQL

  > Общая информация о MySQL
  > Работа с ошибками сервера MySQL
  > Устновка и обновление MySQL 5.6
    > Установка MySQL
      > Описание установки на официальном сайте
      > 2 способа установки: вручную и из установочного файла .msi
        > Установка из установочного файла .msi (доступен только для windows)
        > Установка из no-install zip архива
    > Обновление MySQL
      > Общие рекомендации
      > Обновление 5.6 -> 5.7
  > Настройка аккаунтов для доступа к серверу MySQL
  > MySQL Notofier for Microsoft Windows
  > Запуск / Остановка сервера MySQL
  > Как проверить, работает ли MySQL сервер
  > Как подключить MySQL к PHPStorm
  > Путь с папке bin с утилитами MySQL - записать в PATH windows



2. Работа с mysql shell

  > mysql.exe - это простой shell для работы с MySQL сервером.
  > Запуск mysql shell
  > Server Side Help
  > Выполнение SQL выражений из .txt файла
  > Использование "защиты от дурака" при исполнении команд UPDATE и DELETE
  > Потенциальная опасность использования опции Auto-Reconnect при обрыве соединения
  > Команды для работы с mysql shell
  > Формирование строки для настройки prompt
  > Опции mysql shell



3. Аутентификация через утилиту mysql_config_editor

  > Замечание о создании новых аккаунтов
  > Переменные среды и переменная MYSQL_TEST_LOGIN_FILE
  > Утилита mysql_config_editor и безопасность
  > Структура файла .mylogin.ini
  > Синтаксис использования mysql_config_editor
  > Как создать группу данных для аутентификации?
  > Как использовать группу данных из файла .mylogin.ini для аутентификации
  > Как просмотреть содержимое файла .mylogin.ini
  > О приоритет выполнения
  > Опции утилиты mysql_config_editor



4. Вводный tutorial в MySQL (+примеры)

  Практика
  ================================
  > Примеры ввода запросов
    > Запросить вывод версии и текущей даты
    > Запросить вывод версии и текущей даты (запрос разбит на несколько строк)
    > Пример математ. вычислений на SQL
    > Пример математ. вычислений на SQL (ввод 2-х запросов в 1 строку через ; )

  > Создание/удаление баз данных и таблиц; получение информации о структуре таблиц
    > Показать какие БД уже есть на сервере           | SHOW DATABASES;
    > Указать, какую БД использовать по умолчанию     | USE [db_name];
    > Создать новую базу данных                       | CREATE DATABASE [db_name];
    > Вывести все таблицы выбранной базы данных       | SHOW TABLES;
    > Создать таблицу                                 | CREATE TABLE
    > Удалить таблицу                                 | DROP TABLE [tbl_name];
    > Вывести информацию о макете таблицы             | DESCRIBE [tbl_name];
    > Загрузить в таблицу данные из файла             | LOAD DATA
    > Вставить данные в таблицу                       | INSERT

  > Извлечение/изменения данных из/в таблиц(ах)
    > Извлечь все данные из таблицы                   | SELECT *
    > Исправить сущесвующую в запись в таблице        | UPDATE

    > Извлечь определенные строки (удовл-ие условиям) | SELECT * WHERE ...
      > Извлечь все строки, в которых species='cat'
      > Извлечь все строки, в которых species='dog' и sex='m'
      > Извлечь все строки, в которых (и задаём условие для 2-х наборов строк):
        - (species='cat' и sex='f')    | это будет один набор строк
        - species='bird'               | это будет другой набор строк
      > Извлечь строку о животном, которого зовут Bowser (name='Bowser')
      > Извлесь все строки о животных, родившихся после 01.01.1990 (birth > '1990-01-01')

    > Извлечь определенные столбцы                    | SELECT [column_names]
      > Извлечь 2 столбца (owner, species) из таблицы
      > Извлечь столбец без повторений значений       | DISTINCT
      > Извлечь определенные столбцы, и из них строки, отвечающие условиям

    > Сортировка извлеченных данных                   | ORDER BY
      > Сортировка по дате
      > Сортировка в возрастающем и убывающем порядке | ASC, DESC
      > Сортировка с зависимостью от регистра и без неё (для символьных значений)   | ORDER BY BINARY
      > Сортировка одновременно по нескольким колонкам

  > Работа с датами
    > Получить текущую дату                           | CURDATE()
    > Назначить псевдоним для имени колонки           | SELECT [clm_name] AS здесь_псевдоним
    > Получить разницу между 2-мя датами в указанных единицах  | TIMESTAMPDIFF()
    > Метод сравнения NULL с другими значениями       | IS NOT NULL
    > Извлечь из даты год, месяц и число              | YEAR(), MONTH(), DAYOFMONTH()
    > Проблема перехода между 12-ым и 1-ым месяцами
      > Добавить к указанной дате указанный интервал времени функцией DATE_ADD
      > Добавить к указанной дате указанный интервал времени с использованием оператора MOD

  > Работа с типом NULL
    > Проверить, является ли значение NULL'ом         | [some_value] IS NULL
    > Проверить, является ли значение НЕ NULL'ом      | [some_value] IS NOT NULL

  > Извлечение данных с использованием фильтров: LIKE и RegExp
    > Использование оператора LIKE (паттернов MySQL)  | LIKE, NOT LIKE
      > Извлечь все строки, в которых name начинается с буквы 'b'
      > Извлечь все строки, в которых name заканчивается буквами 'fy'
      > Извлечь все строки, в которых name содержит букву 'w'
      > Извлечь все строки, в которых name имеет длину ровно 5 символов

    > Использование регулярных выражений POSIX        | REGEXP, NOT REGEXP
      > Извлечь все строки, в которых name начинается с буквы 'b' (регистронезависимо)
      > Извлечь все строки, в которых name начинается с маленькой буквы 'b' (регистрозависимо)
      > Извлечь все строки, в которых name заканчивается на fy
      > Извлечь все строки, в которых name содержит w
      > Извлечь все строки, в которых name состоит ровно из 5 любых символов

  > Подсчет строк с группировкой по указанному признаку
    > Вывести количество строк в таблице              | COUNT(*)
    > Совместное использование COUNT и GROUP BY       | COUNT(*) ... GROUP BY
      > Сколько животных у каждого хозяина (GROUP BY owner)
      > Сколько животных каждого вида (GROUP BY species)
      > Сколько животных каждого пола (GROUP BY sex)
      > Сколько животных каждой комбинации вида и пола (GROUP BY species, sex)
      > Сколько котов и собак каждой комбинации вида и пола
      > Сколько животных с известным полом (не NULL) каждой комбинации вида и пола

  > Извлечение данных одновременно из нескольких таблиц
    > Извлечение данных из 2-х разных таблиц          | INNER JOIN ... ON
      > Вернуть 5 самых правых символов в строке      | RIGHT()
      > Узнать, в каком возрасте каждый питомец обзавелся потомством
    > Извлечение данных из нескольких одинаковых таблиц (JOIN) таблицы с самой собой
      > Найти подходящие по виду и полу пары для размножения

  > Примеры типовых запросов и наиболее общих проблем при работе с MySQL
    > Создание учебной базы данных для демонстрации примеров
      > Создание базы
      > Выбор это базы данных для использования по умолчанию
      > Создание таблицы
      > Загрузка данных в таблицу
      > Посмотреть, успешно ли удалось создать таблицу с даннными?

    > Примеры
      > Найти максимальное значений в колонке
      > Вернуть строку, содержащую MAX значение для указанной колонки
      > Максимальные значения колонки для каждой из групп
      > Все строки для каждой из групп, содержащие MAX значения указанной колонки
      > Найти 2 строки с MIN и MAX значениями цены с помощью пользовательских переменных
      > Использование автоинкримента

  Теория
  ================================
  > 4.1. Соединение/отключение c/от сервером(а)
  > 4.2. Ввод запросов
    > Общая информация об SQL-запросах
    > Где можно вводить SQL-запросы
    > Возможные состояния строки prompt программы mysql shell, и их значения
  > 4.3. Создание и использование баз данных
  > 4.4. Извлечение данных из таблиц
  > 4.4.5. Работа с датами
  > 4.4.6. Работа с NULL значениями
  > 4.4.7. Извлечение данных с использованием RegExp в качестве фильтра
  > 4.4.8. Подсчет строк с группировкой по указанному признаку
  > 4.4.9. Извлечение данных одновременно из нескольких таблиц
  > 4.5. Есть 2 режима работы с MySQL: интерактивный и пакетный
    > Интерактивный режим
    > Пакетный режим
  > 4.6. Об использовании внешних ключей



5. Storage engines и подробно об INNODB (+примеры)

  Практика
  ================================
  > Узнать, какие движки хранилищ поддерживает запущенный сервер MySQL
  > Создать несколько таблиц, использующих разные движки
  > Конвертировать таблицу на движке MEMORY в таблицу на движке INNODB

  Теория
  ================================
  > Общая информация о движках хранилищ MySQL 5.6
  > Общая информацию о движке хранилищ INNODB
    > Движок INNODB подходит в подавляющем большинстве случаев
    > Ключевые преимущества INNODB
    > Особенности движка INNODB
    > "Best Practice" для INNODB
    > Настройка конфигурации INNODB
  > Администрирование INNODB
    > Основные задачи администрирования INNODB
    > В каком момент создается system tablespace?
    > Изменение размера файлов Redo Log, и файлов system tablespace.
      > Изменение количества и размера файлов Redo Log
      > Изменение размера файлов system tablespace
    > Резервное копирование и восстановление из копии БД на INNODB
      > Осуществление резервного копирования - есть 4 способа
      > Восстановление базы данных INNODB из бэкапа
    > Перемещение или копирование таблиц INNODB на другую машину
  > Поиск и устранение неисправностей при работе с INNODB
    > Общие рекомендации
  > Опции и системные переменные движка INNODB
    > Общая информация
    > Справочник опций и системных переменных движка INNODB (в конце).
  > Ограничения таблиц INNODB
    > Предупреждения
    > Максимумы и минимумы
    > Типы индексов
    > Ограничения для INNODB-таблиц
    > Ограничения для блокирования (locking) и транзакций
  > Обзор механизмов, обеспечивающих выполнение модели ACID в MySQL
    > Общая информация о модели ACID
    > Как в MySQL реазилован каждый из 4-х главных принципов ACID
      > Atomicity
      > Consistency
      > Isolation
      > Durability
  > Memcached + MySQL = NoSQL database
    > Что такое база данных NoSQL, и зачем она нужна?
    > В чем преимущество возможности работать с одной и той же таблицой, используя
    > Общие сведения о memcached в MySQL
  > Справочник опций и системных переменных движка INNODB



6. Типы данных в MySQL

  Практика
  ================================
  > Назначение DEFAULT'ных значений для столбца

  > Числа
    > Демонстрация превышения допустимого диапазона
    > Демонстрация использования атрибута display width с атрибутом ZEROFILL
    > Тестирование атрибута AUTO_INCREMENT

  > Дата и время
    > Тест десятичных секунд
    > Явное приведение типов       | CAST
    > Автоматическая инициализация и обновление типов TIMESTAMP и DATETIME

  > Строки
    > Настройка character set и collation на разных уровнях
    > Работа с типом ENUM

  Теория
  ================================
  > Общая информация о поддерживаеых сервером MySQL типах данных
  > Используемые в описании термины
  > Техника выбора оптимального типа данных для колонки
  > Назначение DEFAULT'ных значений для колонок
  > Описания типов
    > Числа
      > Особенности SIGNED и UNSIGNED чисел
      > Управление поведением сервера при пересечении значением числа границ типа
      > Атрибуты числовых типов
      > Обзор сигнатур всех числовых типов в MySQL
      > Описание каждого числового типа и его особенностей
        > BIT[(M)]
        > TINYINT[(M)] [UNSIGNED] [ZEROFILL]
        > BOOL, BOOLEAN
        > SMALLINT[(M)] [UNSIGNED] [ZEROFILL]
        > MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]
        > INT[(M)] [UNSIGNED] [ZEROFILL]
        > INTEGER[(M)] [UNSIGNED] [ZEROFILL]
        > BIGINT [(M)] [UNSIGNED] [ZEROFILL]
        > DECIMAL, DEC, NUMERIC, FIXED [(M[,D]) [UNSIGNED] [ZEROFILL]
        > FLOAT [(M,D)] [UNSIGNED] [ZEROFILL]
        > DOUBLE, DOUBLE PRECISION, REAL [(M,D)] [UNSIGNED] [ZEROFILL]

    > Дата и время
      > Общая информация
      > Что нужно иметь в виду при работе с дата-временными типами
      > Обзор сигнатур всех дата-временных типов в MySQL
      > Описание каждого дата-временного типа и его особенностей
        > DATE
        > DATETIME[(fsp)]
        > TIMESTAMP[(fsp)]
        > TIME([fsp])
        > YEAR[(4)]
      > Автоматическая инициализация и обновление типов TIMESTAMP и DATETIME
      > Преобразование междту дата-временными типами
      > Дробные секунды во временных типах

    > Строки
      > Общая информация
      > Character set и collation
        > Что такое Character Set и Collation
        > Общая информация
        > Настройка character set и collation на 4-х уровнях
          > 4 уровня
          > Настройка на уровне сервера
          > Настройка на уровне базы данных
          > Настройка на уровне таблицы
          > Настройка на уровне колонки
      > Обзор сигнатур всех строковых типов в MySQL
      > Описание каждого строкового типа и его особенностей
        > [NATIONAL] CHAR[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]
        > [NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE collation_name]
        > BINARY(M)
        > VARBINARY(M)
        > TINYBLOB
        > TINYTEXT [CHARACTER SET charset_name] [COLLATE collation_name]
        > BLOB[(M)]
        > TEXT[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]
        > MEDIUMBLOB
        > MEDIUMTEXT [CHARACTER SET charset_name] [COLLATE collation_name]
        > LONGBLOB
        > LONGTEXT [CHARACTER SET charset_name] [COLLATE collation_name]
        > ENUM('value1','value2',...) [CHARACTER SET charset_name] [COLLATE collation_name]
        > SET('value1','value2',...) [CHARACTER SET charset_name] [COLLATE collation_name]



7. Лимиты в MySQL 5.6

  Теория
  ================================
  > Лимиты на операции с JOIN, и на определение VIEW
  > Лимиты на количество DATABASES и TABLES
  > Лимиты на размер таблицы
  > Лимиты на количество столбцов и размер строки
  > Лимиты, наложенные структурой файлов .frm
  > Лимиты операционной системы Windows



8. Синтаксис SQL-выражений

  Теория и Практика
  ================================

  > CREATE          | создание структур данных
    > CREATE DATABASE      | создать базу данных
    > CREATE EVENT         | создать событие и настроить его расписание
    > CREATE FUNCTION      | создать хранимую функцию или пользовательскую функцию
    > CREATE INDEX         | создать индекс
    > CREATE LOGFILE GROUP | создать группу для лог-файлов
    > CREATE PROCEDURE     | создать хранимую процедуру
    > CREATE SERVER        | (для FEDERATED engine) создать определение сервера
    > CREATE TABLE         | создать таблицу
    > CREATE TABLESPACE    | создать табличное пространство
    > CREATE TRIGGER       | создать триггер
    > CREATE VIEW          | создать вьюху

  > ALTER           | изменение структур данных
    > ALTER DATABASE       | изменить базу данных
    > ALTER EVENT          | изменить событие
    > ALTER LOGFILE GROUP  | изменить группу для лог-файлов
    > ALTER FUNCTION       | изменить хранимую функцию
    > ALTER PROCEDURE      | изменить хранимую процедуру
    > ALTER SERVER         | (для FEDERATED engine) изменить сервер
    > ALTER TABLE          | изменить таблицу
    > ALTER TABLESPACE     | изменить табличное пространство
    > ALTER VIEW           | изменить вьюху

  > DROP            | удаление структур данных
    > DROP DATABASE        | удалить базу данных
    > DROP EVENT           | удалить событие
    > DROP FUNCTION        | удалить хранимую функцию
    > DROP INDEX           | удалить индекс
    > DROP LOGFILE GROUP   | удалить группу для лог-файлов
    > DROP PROCEDURE       | удалить хранимую процедуру
    > DROP SERVER          | (для FEDERATED engine) удалить сервер
    > DROP TABLE           | удалить таблицу
    > DROP TABLESPACE      | удалить табличное пространство
    > DROP TRIGGER         | удалить триггер
    > DROP VIEW            | удалить вьюху

  > RENAME TABLE           | переименовать 1 или более таблиц
  > TRANCATE TABLE         | полностью очистить таблицу от данных



9. Сохраняемые программы и представления

  Практика
  ================================
  > Определение и использование сохраняемой процедуры
    > Создать сохраняемую процедуру
    > Выполнить сохраняемую процедуру
    > Посмотреть теперь содержимое переменной @x
  > Метаданные скрипта
    > Посмотреть все метаданные          | INFORMATION_SCHEMA.ROUTINES
    > Посмотреть определение скрипта     | SHOW CREATE (PROCEDURE | FUNCTION) [name]
    > Посмотреть характеристики скрипта  | SHOW (PROCEDURE | FUNCTION) STATUS

  > Создание, использование, удаление триггера
    > Создать тренировочную таблицу
    > Создать BEFORE-триггер, реагирующий на INSERT
    > Провести 3 операции INSERT в эту таблицу
    > Посмотреть теперь значение переменной @sum
    > Удалить триггер

  > Метаданные триггера
    > Посмотреть все метаданные          | INFORMATION_SCHEMA.TRIGGERS
    > Посмотреть определение триггера    | SHOW CREATE TRIGGER [trg_name]
    > Посмотреть список триггеров в БД   | SHOW TRIGGERS

  > Метаданные события
    > Посмотреть все метаданные          | INFORMATION_SCHEMA.EVENTS
    > Посмотреть еще метаданные          | mysql.event
    > Посмотреть определение события     | SHOW CREATE EVENT [event_name]
    > Посмотреть список событий в БД     | SHOW EVENTS

  > Создание и использование представления  | CREATE VIEW
    > Создать таблицу, из которой потом будем создавать представление
    > Записать в нее значения
    > Создать представление
    > Обратиться к представлению и получить содержимое этой виртуальной таблицы

  > Метаданные представления
    > Таблица VIEWS базы данных INFORMATION_SCHEMA
    > Операция  SHOW CREATE VIEW [view_name]

  Теория
  ================================
  > Общая информация
    > Что такое сохраняемые программы и представления?
    > Есть 4 вида сохраняемых программ
    > Общая информация о каждом из видов сохраняемых программ
      > Процедуры
      > Функции
      > Триггеры
      > События
    > Представления (views, вьюхи)
  > Определение сохраняемых программ
  > Использование сохраняемых программ (процедур и функций)
    > Общая информация
    > Синтаксис сохраняемых скриптов
    > Метаданные сохраняемых скриптов
    > Особенности работы LAST_INSERT_ID() в сохраняемых процедурах, функциях, триггерах.
  > Использование триггеров
    > Общая информация
    > Синтаксис триггеров
    > Метаданные триггеров
  > Использование событий
    > Общая информация
    > Настройка планировщика событий
    > Синтаксис событий
    > Метаданные событий
    > Как планировщик событий работает с датами и временем
  > Использование представлений (view, вьюхи)
    > Общая информация
    > Синтатксис представлений
    > Алгоритмы обработки представлений
    > Обновляемые и не обновляемые представления
    > Метаданные представлений



10. Индексы, ключи, оптимизация

  Теория
  ================================
  > Общая информация об индексах и оптимизации
    > Брифинг
    > Как MySQL использует индексы
      > Индексы и скорость поиска
      > Структура данных B-TREE и индексы
      > В каких случаях и для чего используются индексы
  > Использование первичных ключей (Primary Keys)
  > Использование внешних ключей (Foreign Keys)
  > Одно-столбцовый индекс, типы индексов
    > Как работают подавляющее большинство индексов
    > Префиксные индексы для символьных столбцов
    > Полнотекстовые индексы (FULLTEXT)
    > Пространственные индексы (spatial indexes)
  > Много-столбцовый индекс



11. Синтаксис SQL - data manipulation statements

  Теория и Практика
  ================================
  > CALL                    | выполняет сохраняемую процедуру
  > DELETE                  | удаляет строки из таблицы
  > DO                      | аналог SELECT, только не возвращает результат
  > HANDLER                 | обеспечивает прямой доступ к интерфейсу движка, только INNODB и MyISAM
  > INSERT                  | вставляет строки в таблицу
  > LOAD DATE INFILE        | записывает строки из файла в таблицу
  > LOAD XML                | записывает строки из XML файла в таблицу
  > REPLACE                 | аналог INSERT, только заменяет совпавшие по первичному или уникальному ключу строки
  > SELECT                  | извлекает строки из 1-й или нескольких таблиц
  > UPDATE                  | обновляет значения указанных столбцов
  > Синтаксис подзапросов   | здесь описан синтаксис подзапросов



12. Синтаксис SQL - транзакции, составные выражения

  Теория
  ================================
  Транзакции
    > Общая информация
    > Синтаксис для START TRANSACTION, COMMIT и ROLLBACK.
    > Выражения, которые не могут быть rolled back.
    > Выражения, которые вызывают неявный COMMIT
    > Синтаксис для SAVEPOINT, ROLLBACK TO SAVEPOINT, и RELEASE SAVEPOINT

  Составные выражения
    > Общая информация
    > Синтаксис составного выражения BEGIN ... END
    > Использование меток (Labels) в составных выражениях
    > Синтаксис для DECLARE
    > Переменные в сохраняемых программах
    > Выражения для управления потоком (циклы, условия и т.д.)
      > Общая информация
      > CASE                 | аналог switch в PHP
      > IF                   | аналог if в PHP
      > ITERATE              | аналог continue в PHP
      > LEAVE                | анало break в PHP
      > LOOP                 | цикл, который можно прекратить с помощью LEAVE или RETURN.
      > REPEAT ... UNTIL     | аналог do ... while в PHP.
      > RETURN               | завершает работу сохраняемой функции и возвращает указанное значение.
      > WHILE                | аналог while в PHP



13. Синтаксис SQL - администрирование MySQL

  Теория
  ================================
  Администрирование базы данных
    > Управление аккаунтами
      > ALTER USER           | изменить аккаунт MySQL
      > CREATE USER          | создать новый MySQL аккаунт
      > DROP USER            | удалить 1 или более аккаунтов MySQL
      > GRANT                | дать права аккаунту MySQL
      > RENAME USER          | переименовать существующий аккаунт MySQL
      > REVOKE               | аннулировать права аккаунту MySQL
      > SET PASSWORD         | задать пароль для аккаунта MySQL

    > Обслуживание таблиц
      > ANALYZE TABLE        | собрать статистику по запросам в таблице для их оптимизации
                               > если опция innodb_stats_persistent, то статистика собирается автоматом
      > CHECK TABLE          | проверить таблицу на наличие ошибок.
      > CHECKSUM TABLE       | получить контрольную сумму для содержимого таблицы
      > OPTIMIZE TABLE       | реорганизует физич. хранение данных в таблице для уменьшения их размера и ускорения доступа
      > REPAIR TABLE         | отремонтировать поврежденную таблицу
    > Создание-удаление пользовательских функций
    > Синтаксис операции SET - пользовательские переменные @x
    > Синтаксис операций SHOW

        SHOW AUTHORS           | (удалено в MySQL > 5.6.8) Отображает информацию о разработчиках сервера MySQL.
        SHOW LOGS              | Показывает список binary logs на сервере.
        SHOW BINLOG EVENTS     | Показывает события в binary log.
        SHOW CHARACTER SET     | Показывает все character set и их collation по умолчанию.
        SHOW COLLATION         | Показывает список collation, поддерживаемых сервером.
        SHOW COLUMNS           | Показывает информацию о колонках в выбранной таблице.
        SHOW CONTRIBUTORS      | Отображает информацию о тех, кто способствовал написанию кода MySQL.
        SHOW CREATE DATABASE   | Показывает выражение CREATE DATABASE, с помощью которого была создана указанная база данных.
        SHOW CREATE EVENT      | Показывает выражение CREATE EVENT, с помощью которого было создано событие, и можно его пересоздать.
        SHOW CREATE FUNCTION   | Показывает выражение CREATE FUNCTION, с помощью которого была создана функция, и можно её пересоздать.
        SHOW CREATE PROCEDURE  | Показывает выражение CREATE PROCEDURE, с помощью которого была создана процедура, и можно её пересоздать.
        SHOW CREATE TABLE      | Показывает выражение CREATE TABLE, которое было использовано для создания указанной таблицы.
        SHOW DATABASES         | Показывает список всех баз данных на этом сервере MySQL.
        SHOW ENGINE            | Показывает информацию о выбранном движке хранилища информации.
        SHOW ENGINES           | Показывает список из информационных блоков о каждом движке, который поддерживается сервером.
        SHOW ERRORS            | Показывает информацию о возникших ошибках.
        SHOW COUNT(*) ERRORS   | Показывает количество возникших ошибок.
        SHOW EVENTS            | Отображает информацию о событиях в планировщике событий.
        SHOW FUNCTION CODE     | Показывает код в теле сохраняемой функции.
        SHOW FUNCTION STATUS   | Возвращают свойства функции - имя, даты создания/модификации, кто DEFINER, кодировки, collations и пр.
        SHOW GRANTS FOR user   | Показывает список выражений GRANT, которые были использованы для назазначения привилегий указанному пользователю
        SHOW INDEX             | Возвращает информацию об индексе таблицы.
        SHOW MASTER STATUS     | Показывает информацию о состоянии файлов binary log.
        SHOW OPEN TABLES       | Показывает список не временных таблиц, которые в настоящий момент откркты
        SHOW PLUGINS           | Показывает список установленных на сервер плагинов и информацию о них.
        SHOW PROCEDURE CODE proc_name  | Показывает код в теле сохраняемой процедуры.
        SHOW PROCEDURE STATUS  | Возвращают свойства процедуры - имя, даты создания/модификации, кто DEFINER, кодировки, collations и пр.
        SHOW PRIVILEGES        | Показывает список привилегий, которые поддерживает сервер, и их описание.
        SHOW PROCESSLIST       | Показывает работающие потоки.
        SHOW PROFILE           | Показывает количество указанного типа type ресурсов, которые были израсходованы выполненными в течение этой сессии выражениями.
        SHOW PROFILES          | Тоже самое, что SHOW PROFILE, только для всех типов ресурсов.
        SHOW RELAYLOG EVENTS   | Показывает события в relay log of a replication slave
        SHOW SLAVE HOSTS       | Показывает список репликационных slave'ов, зарегистрированных в настоящее время на master'e.
        SHOW SLAVE STATUS      | Показывает информацию о состоянии по основным свойствам потоков slave'a.
        SHOW STATUS            | Показывает информацию о состоянии сервера.
        SHOW TABLE STATUS      | Показывает информацию о не временной таблице, более подробную, чем SHOW TABLES.
        SHOW TABLES            | Показывает список не временных таблиц из указанной БД и информацию о них.
        SHOW TRIGGERS          | Показывает список триггеров, определенных в настоящее время для таблиц в указанной БД.
        SHOW VARIABLES         | Показывает значение системных переменных MySQL.
        SHOW WARNINGS          | Показывает информацию о возникших предупреждениях.

    > Прочие административные операции

  Утилиты MySQL
    > DESCRIBE         | (синоним EXPLAIN)
    > EXPLAIN          | получить информацию о структуре таблицы или плане выполнения запроса
    > HELP             | ищет информацию в online справки сервера MySQL по указанной строке поиска
    > USE              | позволяет выбрать базу данных по умолчанию



14. Функции и операторы SQL

  Теория
  ================================
  > Общая информация
  > Приведение типов во время выполнения выражения
  > Операторы

          > Арифметические
              +                        | плюс
              -                        | минус
              *                        | умножить
              /                        | разделить
          > Операторы присвоения
              =                        | назначить значение
              :=                       | назначить значение
          > Сравнения
              =                        | равно
              <=>                      | NULL-безопасное равно
              !=, <>                   | не равно
              <=                       | меньше равно
              <                        | меньше
              >=                       | больше равно
              >                        | больше
          > Битовые
              <<                       | левый сдвиг
              >>                       | правый сдвиг
              &                        | битовое И
              ~                        | инвертировать биты
              |                        | битовое ИЛИ
              ^                        | битовое XOR
          > Логические
              AND, &&                  | логическое И
              OR, ||                   | логическое ИЛИ
              NOT, !                   | логическое НЕ
              XOR                      | логическое XOR
          > Прочие
              BETWEEN ... AND ...      | проверить, находится ли значение в пределах указанного диапазона
              NOT BETWEEN ... AND ...  | проверить, находится ли значение вне указанного диапазона
              LIKE                     | простое сопоставление с шаблоном
              NOT LIKE                 | отрицательное простое сопоставление с шаблоном
              BINARY                   | перевести строку в бинарную строку
              CASE                     | оператор case (аналог оператора switch из php)
              DIV                      | округление до INT (аналог FLOOR()), безопасное для BIGINT
              IS NOT NULL              | тест значения на NOT NULL
              IS NULL                  | тест значения на NULL
              IS                       | сравнение значения с boolean-значением (0, 1 или unknown)
              IS NOT                   | тоже, что IS, только результат (boolean) меняется на обратный
              %, MOD                   | остаток от деления
              REGEXP                   | сопоставление с шаблоном - регулярным выражением
              NOT REGEX                | отрицательное сопоставление с шаблоном - регулярным выражением
              RLIKE                    | (синоним REGEXP)
              SOUNDS LIKE              | сравнение звуков

  > Функции для сравнения

          COALESCE(value,...)         | Возвращает 1-е не нулевое value в списке.
          GREATEST(value1,value2,...) | Возвращает наибольший value из всех.
          LEAST(value1,value2,...)    | Возвращает наименьший value из всех.
          expr IN(value,...)          | Возвращает 1, если expr равен хотя бы 1-му из value в списке. Иначе 0.
          NOT IN(value,...)           | Возвращает 0, если expr равен хотя бы 1-му из value в списке. Иначе 1.
          INTERVAL(N,N1,N2,N3,...)    | Возвращает 0, если N < N1; возвращает 1 если N < N2; и так далее.
          ISNULL(expr)                | Если expr содержит NULL, возвращает 1. Иначе 0.
          STRCMP(expr1,expr2)         | Возвращает -1, если expr1 < expr2; 0 если они равны; 1 если expr1 > expr2.

  > Функции для управления потоком (CASE, IF ... )

          IF(expr1,expr2,expr3)  | Если expr1 = true (<> 0 и <> NULL), то IF возвращает expr2. Иначе - expr3.
          IFNULL(expr1,expr2)  | Если expr1 не NULL, то IFNULL вернет expr1. Иначе - expr2.
          NULLIF(expr1,expr2)  | Если expr1 = expr2, возвращает NULL. Иначе - возвращает expr1.

  > Строковые функции

          ASCII(str)              | (только 1-байтные кодировки) Возвращает числовое значение самого левого символа в строке.
          BIN(N)                  | Возвращает строку, представляющую бинарное значение целого числа N типа BIGINT.
          BIT_LENGTH(str)         | Возвращает длину строки в битах
          CHAR_LENGTH(str)        | Возвращает длину строки str, измеряемую в символах. Многобайтовый символ считается, как 1.
          LENGTH(str)             | Возвращает длину строки str в байтах.
          CHAR(N,... [USING charset_name])  | Возвращает строку (бинарную), каждое N понимает, как код символа их кодировки charset_name.
          CONCAT(str1,str2,...)   | Склеивает строки str.
          FIELD(str,str1,str2,str3,...)  | Возвращает позицию str в списке из строк str1, str2 ..., либо 0 (если не найдено)
          FORMAT(X,D[,locale])    | Приводит число к формату вроде '#,###,###.##', ограничивает до D чисел после запятой, и возвращает результат в виде строки.
          TO_BASE64(str)          | Кодирует строку str алгоритмом base-64
          FROM_BASE64(str)        | Декодирует строку str, закодированную алгоритмом base-64
          HEX(str), HEX(N)        | Возвращает 16-ричное представление строки str или числа N
          UNHEX(str)              | Переводит строку str из 16-ричного представления в нормальное.
          INSERT(str,pos,len,newstr)  | Заменяет в str, начиная с pos, len символов на newstr
          ELT(N,str1,str2,str3,...)  | Возвращает N-ный элемент из списка str. Если N = 1, то str1. Если N = 2, то str2. И т.д.
          FIND_IN_SET(str,strlist)  | Возвращает число в диапазоне от 1 до N, где N - это количество подстрок в strlist (разделенных запятыми), а возвращаемое число - номер подстроки (считает слева-направо), совпадающей со str.
          INSTR(str,substr)       | Возвращает позицию первого вхождения строки substr строку str.
          LOCATE(substr,str[,pos])  | возвращает позицию первого вхождения подстроки substr в строку str, начиная с позиции pos.
          LEFT(str,len)           | Возвращает подстроку строки str длиной len символов, начиная слева.
          RIGHT(str,len)          | Возвращает подстроку строки str длиной len символов, начиная справа.
          LOAD_FILE(file_name)    | Читает файл и возвращает его содержимое в виде строки.
          LOWER(str)              | Возвращает строку str в нижнем регистре.
          UPPER(str)              | Возвращает строку str в верхнем регистре.
          LPAD(str,len,padstr)    | Возвращает строку str, к которой слева прилепляется строка padstr, так что итоговая строка должна иметь размер len символов.
          RPAD(str,len,padstr)    | Возвращает строку str, к которой справа прилепляется строка padstr, так что итоговая строка должна името размер len символов.
          LTRIM(str)              | Возвращает строку str, из которой удалены все пробелы слева.
          RTRIM(str)              | Возвращает строку str, из которой удалены все пробелы справа.
          TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)  | Возвращает строку str, из которой удалены все суффиксы и префиксы вида remstr (по умолчанию ' ')
          OCT(N)                  | Возвращает строковое представление восьмеричного числа N.
          ORD(str)                | Если самый левый символ в str - многобайтовый - возвращает код для этого символа, рассчитанный по спец. формуле.
          QUOTE(str)              | Заключает строку в одинарные кавычки, и экранирует с помощью обратного слэша внутри строки следующее: \ ' NUL Control+Z
          REPEAT(str,count)       | Возвращает строку, состоящую из строки str, повторенной count раз.
          REPLACE(str,from_str,to_str)  | Возвращает строку str, в которой заменяет все вхождения подстроки from_str на подстроку to_str.
          REVERSE(str)            | Возвращает строку str, в которой порядок символов заменен на обратный.
          SOUNDEX(str)            | Возвращает soudex строку из str.
          SPACE(N)                | Возвращает строку, состоящую из N пробелов.
          STRCMP()                | сравнивает 2 строки (см. описание в разделе "функции для сравнения")
          SUBSTRING_INDEX(str,delim,count)  | Возвращает подстроку строки str, в которую разделитель delim входит count раз.
          WEIGHT_STRING()         | Рассчитывает вес строки.

  > Математические функции

          SIN(x)                     | вернуть синус от аргумента
          COS(x)                     | возвращает косинус
          TAN(x)                     | вернуть тангенс от аргумента
          COT(x)                     | возвращает котангенс
          ACOS(x)                    | возвращает арк косинус
          ASIN(x)                    | возвращает арк синус
          ATAN(x)                    | возвращает арк тангенс
          ATAN(x,y), ATAN2(x,y)      | возвращает арк тангенс от 2-х аргументов
          ABS(x)                     | возвращает значение по модулю
          CEIL(x)                    | округление в большую сторону.
          FLOOR(x)                   | округление в меньшую сторону
          ROUND(x), ROUND(x,d)       | округлить аргумент x до d десятичных знаков (d = 0 по умолчанию)
          CONV(N,from_base,to_base)  | конвертирует числа между разными числовыми основаниями
          CRC32(expr)                | вычисляет cyclic redundancy check value
          RADIANS(x)                 | аргумент конвертируется в радианы
          DEGRESS(x)                 | конвертирует радианы в градусы
          EXP(x)                     | возвращает базу натурального логарифма e, возведенную в указанную степерь
          LN(x)                      | вернуть натуральный логарифм (с базой e)
          LOG10(x)                   | вернуть десятичный логарифм (с базой 10)
          LOG2()                     | вернуть логарифм с 2 в основании
          LOG(x,b)                   | вернуть логарифм от x с базой b (если b не указан, то == e)
          MOD(N,M)                   | вернуть остаток от деления N на M
          PI()                       | вернуть число ПИ
          POW(x,y)                   | вернуть аргумент x, возведенный в степень y
          SQRT(x)                    | вернуть квадратный корень от x
          RAND(), RAND(N)            | вернуть рандумное число с плавающей запятой
          SIGN(x)                    | вернуть знак аргумента x (-1, 0, 1)
          TRUNCATE(x,d)              | обрезать x до d десятичных разрядов (по умолчанию d = 0)

  > Функции для работы с датой и временем

          ADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days)  | прибавляет expr единииц unit (или days) к дата-временному значению date.
          SUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)  | вычитает expr единииц unit (или days) к дата-временному значению date.
          ADDTIME(expr1,expr2)                     | Прибавляет expr2 к expr1, и возвращает результат, где expr1 - TIME/DATETIME, expr2 - TIME.
          CONVERT_TZ(dt,from_tz,to_tz)             | Конвертирует дата-временное значение tz из временной зоны from_tz во временную зону to_tz.
          CURDATE()                                | Возвращает текущую дату. Формат зависит от того, в каком контексте вызвана фукнция.
          CURTIME([fsp])                           | Возвращает текущее время. Формат зависит от того, в каком контексте вызвана фукнция. 0 <= fsp <= 6, возвращать ли результат с дробными секундами.
          DATE_ADD(date,INTERVAL expr unit)        | Прибавляет к значению date дата-временного типа expr единиц типа unit.
          DATE_FORMAT(date,format)                 | Возвращает значение date в виде строки с заказанным форматом format (см. описание в ИНФОРМАЦИИ)
          TIME_FORMAT(time,format)                 | Возвращает значение time в виде строки с заказанным форматом format (см. описание в ИНФОРМАЦИИ)
          DATE_SUB(date,INTERVAL expr unit)        | Вычитает из значения date типа datetime - expr единиц unit.
          DATE(expr)                               | Извлекает дату из значения expr (типа DATE/DATETIME), и возвращает в виде строки.
          DATEDIFF(expr1, expr2)                   | Возвращает разницу в днях между двумя датавременными значениями expr1 - expr2.
          DAYOFMONTH(date), DAY(date)              | Возвращает дату, которую извлекает из значения date, в диапазоне от 0 до 31. 0 допустим для нулевых незаконченных дат.
          DAYNAME(date)                            | Возвращает имя дня недели, который берет из значения date.
          DAYOFWEEK(date)                          | Возвращает номер для недели, который берет из date, в диапазоне от 1 до 7. (1 = Sunday, 2 = Monday ... 7 = Saturday).
          DAYOFYEAR(date)                          | озвращает номер дня в году, который берет из date, в диапазоне от 1 до 366.
          EXTRACT(unit FROM date)                  | Извлекает тип unit из дата-временного значения date. unit те же, что в DATE_ADD().
          FROM_DAYS(N)                             | Возвращает значение DATE, которое вычисляет по заданному кол-ву дней N, прошедших с Рождества Христова.
          FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)  | Возвращает представление unix_timestamp либо в заказанном формате format, либо в 1 из 2 стандартных форматов.
          GET_FORMAT({DATE|TIME|DATETIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})  | Возвращает один из доступных шаблонов строки format
          HOUR(time)                               | Возвращает число чисов из дата-временного значения time, в диапазоне [0, 23].
          LAST_DAY(date)                           | Возвращает последнее число текущего месяца из даты date.
          MAKEDATE(year,dayofyear)                 | Возвращает строку с DATE значением, скомпанованным из year и dayofyear [1 - 366]
          MAKETIME(hour,minute,second)             | Возвращает строку с DATE значением, скомпанованным из year и dayofyear [1 - 366]
          MICROSECOND(expr)                        | Возвращает кол-во микросекунд, которые берет из expr (TIME или DATETIME), в диапазоне от 0 до 999999.
          MINUTE(time)                             | Возвращает кол-во минут для времени time, в диапазоне от 0 до 59.
          MONTH(date)                              | Возвращает номер месяца для даты date, в диапазоне от 0 до 12.
          YEAR(date)                               | Возвращает год для даты date, в диапазоне от 1000 до 9999.
          MONTHNAME(date)                          | Возвращает полное имя месяца, который берет из даты date.
          NOW([fsp])                               | Возвращает текущую дату и время. fsp - кол-во символов для микросекунд, от 0 до 6.
          PERIOD_ADD(P,N)                          | Добавляет N месяцев к периоду P (в формате YYMM или YYYYMM). p - НЕ значение типа DATE.
          PERIOD_DIFF(P1,P2)                       | Возвращает число месяцев между периодами p1 и p2, которые должны быть в формате YYMM или YYYYMM. p1 и p2 - не значения типа DATE.
          QUARTER(date)                            | Возвращает квартал года, который берет из даты date, в диапазоне от 1 до 4.
          SEC_TO_TIME(seconds)                     | Возвращает значение типа TIME, созданное из кол-ва секунд seconds.
          SECOND(time)                             | Возвращает секунды, которые берет из time, в диапазоне от 0 до 59.
          STR_TO_DATE(str,format)                  | берет str и format, и образует из них DATETIME значение, соответствующее формату.
          SUBTIME(expr1,expr2)                     | Возвращает разность expr1 - expr2, где expr1 - TIME/DATETIME, expr2 - TIME.
          SYSDATE()                                | Возвращает текущую время и дату в одном из двух форматов.
          TIME_TO_SEC(time)                        | Возвращает аргумент time, конвертированный в секунды.
          TIME(expr)                               | Возвращает в виде строки TIME часть аргумента expr.
          TIMEDIFF(expr1,expr2)                    | Возвращает разность expr1 - expr2, как значение типа TIME, где expr1 и expr2 - одинаковые TIME/DATETIME значения.
          TIMESTAMP(expr1[,expr2])                 | возвращает expr в виде DATETIME значения, и (если есть) прибавляет к нему TIME значение expr2.
          TIMESTAMPADD(unit,interval,datetime_expr)  | Прибавляет int значение interval к DATE или DATETIME значению datetime_expr.
          TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)  | Возвращает разность datetime_expr2 - datetime_expr1, оба типа DATE/DATETIME.
          TO_DAYS(date)                            | Возвращает количество дней, прошедших по дату date с Рождества Христова.
          TO_SECONDS(expr)                         | Возвращает для expr (DATE/DATETIME) количество секунд, прошедших с Рождества Христова.
          UNIX_TIMESTAMP([date])                   | возвращает UNIX timestamp для указанной date (по умолчанию NOW())
          UTC_DATE()                               | Возвращает текущую дату, переведенную в UTC, в 1 из 2 форматов.
          UTC_TIME([fsp])                          | Возвращает текущее время, переведенное в UTC, в 1 из 2 форматов.
          UTC_TIMESTAMP([fsp])                     | Возвращает текущие время и дату, переведенные в UTC, в 1 из 2 форматов.
          WEEK(date[,mode])                        | Возвращает кол-во недель, прошедших с начала года, для даты date.
          WEEKDAY(date)                            | Возвращает номер дня недели для даты date, в диапазоне от 0 = Monday ... 6 = Sunday.
          WEEKOFYEAR(date)                         | Эквивалент WEEK(date,3).
          YEARWEEK(date[,mode])                    | Возвращает год и неделю для заданной date. mode как у функции WEEK().

  > Функции и операции для приведения типов

          BINARY  | Оператор BINARY приводит строку, следующую за ним, к бинарной строке.
          CONVERT(expr,type), CONVERT(expr USING transcoding_name)  | Приводит выражение expr к типу type (USING позволяет изменить кодировку)

  > Некоторые функции для шифрования и сжатия

          ENCODE(str,pass_str)                   | зашифровать str в бинарную строку, используя pass_str в качестве пароля
          DECODE(crypt_str,pass_str)             | расшифровать ранее зашифрованную str, используя pass_str в качестве пароля для расшифровки
          COMPRESS(string_to_compress)           | сжимает строку и возвращает результат в виде бинарной строки
          UNCOMPRESS(string_to_uncompress)       | разжимает строку, сжатую ранее функцией COMPRESS()
          UNCOMPRESSED_LENGTH(compressed_string) | возвращает длину строки, которая у нее была до того, как она была сжата
          MD5(str)                               | возвращает 128-битную MD5 контрольную сумму для строки str
          PASSWORD(str)                          | возвращает хэш строки str в виде не бинарной строки с кодировкой соединения

  > Информационные функции

          BENCHMARK(count,expr)  | выполняет выражение expr непрерывно count раз
          CHARSET(str)           | возвращает кодировку строки str
          COLLATION(str)         | возвращает collation строки str
          COERCIBILITY(str)      | возвращает collation coercibility строки str (флаг от 0 до 5)
          CONNECTION_ID()        | возвращает ID соединения
          CURRENT_USER()         | возвращает строку с именем и хостом текущего пользователя в формате 'user@localhost'
          DATABASE()             | возвращает имя текущей базы данных по умолчанию, или NULL, если её нет
          FOUND_ROWS()           | после SELECT ... LIMIT показывает, сколько бы это выражение вернуло строк без LIMIT
          LAST_INSERT_ID([expr]) | возвращает последнее успешно вставленное autoincrement значение
          ROW_COUNT()            | после DML-выражения вернет кол-во затронутых им строк
          USER()                 | имя и хост пользователя, указанные при подключении к серверу в формате 'user@localhost'
          VERSION()              | возвращает версию сервера MySQL

  > Разные функции (не попавшие в другие разделы, выборочно)

            DEFAULT(col_name)     | Возвращает значение по умолчанию для указанной колонки
            INET_ATON(expr)   | принимает ipv4 адрес типа '10.0.0.1', возвращает число - сетевой порядок байтов
            INET_NTOA(expr)   | противоположность INET_ATON - принимает число - сетевой порядок байтов, возвращает строку с ipv4 адресом
            IS_IPV4(expr)     | возвращает 1, если expr - допустимый ipv4 адрес. Иначе 0.
            IS_IPV6(expr)     | возвращает 1, если expr - допустимый ipv6 адрес. Иначе 0.
            NAME_CONST(name,value)  | возвращает value в колонке с именем name
            SLEEP(duration)       | делает паузу на duration секунд

  > Функции (выборочно) и модификаторы для использования в атрибуте GROUP BY (включая функции-агрегаторы)

            AVG([DISTINCT] expr)  | Возвращает среднее значение для expr (DISTINCT - считать только уникальные значения)
            COUNT(DISTINCT expr,[expr...])  | возвращает кол-во строк отдельно в каждом из expr (DISTINCT - считать только уникальные значения)
            GROUP_CONCAT(expr)  | возвращает строку, в которой все значения столбца идут через разделитель (в прямом или обратном порядке)
            MAX([DISTINCT] expr)  | возвращает максимальное значение expr (DISTINCT - считать только уникальные значения)
            MIN([DISTINCT] expr)  | возвращает минимальное значение expr (DISTINCT - считать только уникальные значения)
            SUM([DISTINCT] expr)  | возвращает сумму значений в expr (DISTINCT - считать только уникальные значения)

  > Дополнительно об атрибуте GROUP BY и его модификаторах
  > Точная математика
    > Общая информация
    > Настройка SQL-режима работы сервера для организации точной математики
    > Типы числовых значений
    > Особенности типа DECIMAL в MySQL 5.6
    > Обработка выражений
    > Поведение при округлении



  Практика
  ================================
  > Приведение типов во время выполнения выражения
    > Неявное приведение к числу (пример)
    > Неявное приведение к строке (пример) - возникает при использовании ф-ии CONCAT()
    > Явное приведение к строке с помощью ф-ии CAST()
    > Неявное приведение типов в операциях сравнения
    > Противоречивые результаты при сравнении чисел с плавающей запятой

  > Операторы
    > Примеры логических операций
    > Примеры оператора BETWEEN ... AND ...
    > Пример оператора BINARY
    > Пример оператора CASE (синтаксис №1)
    > Пример оператора CASE (синтаксис №2)
    > Пример оператора IS NULL
    > Пример оператора IS
    > Примеры оператора LIKE

  > Функции для сравнения значений
    > Примеры функции COALESCE  | Возвращает 1-е не нулевое value в списке.
    > Примеры функции GREATEST  | Возвращает наибольший value из всех.
    > Примеры функции IN        | Возвращает 1, если expr равен хотя бы 1-му из value в списке. Иначе 0.
    > Примеры функции INTERVAL  | Возвращает 0, если N < N1; возвращает 1 если N < N2; и так далее.
    > Примеры функции ISNULL    | Если expr содержит NULL, возвращает 1. Иначе 0.
    > Примеры функции LEAST     | Возвращает наименьший value из всех.
    > Примеры функции STRCMP    | Возвращает -1, если expr1 < expr2; 0 если они равны; 1 если expr1 > expr2.

  > Функции для управления потоком выполнения
    > Примеры функции IF        | Если expr1 = true (<> 0 и <> NULL), то IF возвращает expr2. Иначе - expr3.
    > Примеры функции IFNULL    | Если expr1 не NULL, то IFNULL вернет expr1. Иначе - expr2.
    > Примеры функции NULLIF    | Если expr1 = expr2, возвращает NULL. Иначе - возвращает expr1.

  > Строковые функции
    > ASCII(str)                      | возвращает числовое представление 1-го символа в str
    > BIN(N)                          | возвращает строку с бинарным представлением числа
    > BIT_LENGTH(str)                 | возвращает длину строки в битах
    > CHAR_LENGTH(str)                | возвращает длину строки в символах (многобайтовый символ считается как 1)
    > LENGTH(str)                     | Возвращает длину строки str в байтах (многобайтовый символ считается как много байт)
    > CHAR(N,... [USING charset_name])   | возвращает строку, собранную из цифровых представлений представленных символов
    > CONCAT(str1,str2,...)              | склеивает строки
    > CONCAT_WS(separator,str1,str2,...) | склеивает строки и ставит между ними разделитель
    > FIELD(str,str1,str2,str3,...)      | Возвращает позицию str в списке из строк str1, str2 ...
    > FORMAT(X,D[,locale])            | форматирует число, ограничивает D числами после запятой, результат - строка
    > TO_BASE64(str)                  | закодировать строку алгоритмом base_64
    > FROM_BASE64(str)                | раскодировать строку из алгоритма base_64, результат - бинарная строка
    > HEX(str), HEX(N)                | возвращает шестнадцатеричное значени строки str или числа N
    > UNHEX(str)                      | возвращает строку в нормальном состоянии из ее 16-ричного представления
    > INSERT(str,pos,len,newstr)      | в строке str с позиции pos заменяет подстроку длины len на newstr
    > ELT(N,str1,str2,str3,...)       | Возвращает N-ный элемент из списка str.
    > FIND_IN_SET(str,strlist)        | ищет str в strlist и возвращает её позицию слева
    > INSTR(str,substr)               | Возвращает позицию первого вхождения строки substr строку str.
    > LOCATE(substr,str), LOCATE(substr,str,pos)  | возвращает позицию вхождения substr в str начиная с pos
    > LEFT(str,len)                   | Возвращает подстроку строки str длиной len символов, начиная слева.
    > RIGHT(str,len)                  | Возвращает подстроку строки str длиной len символов, начиная cправа.
    > LOWER(str)                      | возвращает строку str в нижнем регистре
    > UPPER(str)                      | возвращает строку str в верхнем регистре
    > LPAD(str,len,padstr)            | возвращает str с прилепленной слева padstr, общи размер должен быть len
    > RPAD(str,len,padstr)            | возвращает str с прилепленной справа padstr, общи размер должен быть len
    > LTRIM(str)                      | Возвращает строку str, из которой удалены все пробелы слева.
    > TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)      | Возвращает строку, из которой удалены все суффиксы и префиксы remstr (или пробелы, если remstr не указан)RTRIM(str)  | Возвращает строку str, из которой удалены все пробелы справа.
    > QUOTE(str)                      | заключает str в одинарные кавычки, и экранирует ряд символов внутри нее обратным слэшем
    > REPEAT(str,count)               | Возвращает строку, состоящую из строки str, повторенной count раз.
    > REPLACE(str,from_str,to_str)    | возвращает str, где заменяет подстроки from_str на to_str
    > REVERSE(str)                    | инвертирует строку
    > SUBSTRING_INDEX(str,delim,count)  | Возвращает подстроку строки str, в которую разделитель delim входит count раз.
    > SUBSTRING(str,pos), SUBSTRING(str FROM pos), SUBSTRING(str,pos,len), SUBSTRING(str FROM pos FOR len)    | возвращает подстроку строки str длиной len, начиная с позиции pos

  > Математические функции
    > SIN(x)                      | вернуть синус от аргумента
    > COS(x)                      | возвращает косинус
    > TAN(x)                      | вернуть тангенс от аргумента
    > COT(x)                      | возвращает котангенс
    > ACOS(x)                     | возвращает арк косинус
    > ASIN(x)                     | возвращает арк синус
    > ATAN(x)                     | возвращает арк тангенс
    > ATAN(x,y), ATAN2(x,y)       | возвращает арк тангенс от 2-х аргументов
    > ABS(x)                      | возвращает значение по модулю
    > CEIL(x)                     | округление в большую сторону.
    > FLOOR(x)                    | округление в меньшую сторону
    > ROUND(x), ROUND(x,d)        | округлить аргумент x до d десятичных знаков (d = 0 по умолчанию)
    > CONV(N,from_base,to_base)   | конвертирует числа между разными числовыми основаниями
    > CRC32(expr)                 | вычисляет cyclic redundancy check value
    > RADIANS(x)                  | аргумент конвертируется в радианы
    > DEGRESS(x)                  | конвертирует радианы в градусы
    > EXP()                       | возвращает базу натурального логарифма e, возведенную в указанную степерь
    > LN(x)                       | вернуть натуральный логарифм (с базой e)
    > LOG10(x)                    | вернуть десятичный логарифм (с базой 10)
    > LOG2()                      | вернуть логарифм с 2 в основании
    > LOG(x,b)                    | вернуть логарифм от x с базой b (если b не указан, то == e)
    > MOD(N,M)                    | вернуть остаток от деления N на M
    > PI()                        | вернуть число ПИ
    > POW(x,y)                    | вернуть аргумент x, возведенный в степень y
    > SQRT(x)                     | вернуть квадратный корень от x
    > RAND(), RAND(N)             | вернуть рандумное число с плавающей запятой
    > SIGN(x)                     | вернуть знак аргумента x (-1, 0, 1)
    > TRUNCATE(x,d)               | обрезать x до d десятичных разрядов (по умолчанию d = 0)

  > Функции для работы с датой и временем
    > ADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days)    | прибавляет expr единииц unit к дата-временному значению date.
    > SUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)    | вычитает expr единииц unit из дата-временного значения date.
    > ADDTIME(expr1,expr2)                        | добавляет время к дата-временному значению
    > CONVERT_TZ(dt,from_tz,to_tz)                | конвертирует datetime dt из временной зоны from_tz в to_tz
    > CURDATE()                                   | возвращает текущую дату
    > CURTIME([fsp])                              | возвращает текущее время, fsp [0,6] - кол-во символов для дробных секунд
    > DATE_ADD(date,INTERVAL expr unit)           | Прибавляет к значению date дата-временного типа expr единиц типа unit.
    > DATE_SUB(date,INTERVAL expr unit)           | Вычитает из значения date дата-временного типа expr единиц типа unit.
    > DATE_FORMAT(date,format)                    | Возвращает значение date в виде строки с заказанным форматом format.
    > TIME_FORMAT(time,format)                    | Возвращает значение time в виде строки с заказанным форматом format.
    > DATE(expr)                                  | Извлекает дату из значения expr (типа DATE или DATETIME), и возвращает в виде строки.
    > DATEDIFF(expr1, expr2)                      | Возвращает разницу в днях между двумя датавременными значениями expr1 - expr2.
    > DAYOFMONTH(date), DAY(date)                 | Возвращает дату, которую извлекает из значения date, в диапазоне от 0 до 31.
    > DAYNAME(date)                               | Возвращает имя дня недели, который берет из значения date.
    > DAYOFWEEK(date)                             | Возвращает номер для недели, который берет из date, в диапазоне от 1 до 7.
    > DAYOFYEAR(date)                             | Возвращает номер дня в году, который берет из date, в диапазоне от 1 до 366.
    > EXTRACT(unit FROM date)                     | Извлекает тип unit из дата-временного значения date.
    > FROM_DAYS(N)                                | Возвращает значение DATE, которое вычисляет по заданному кол-ву дней N, прошедших с Рождества Христова.
    > FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)   | Возвращает представление unix_timestamp либо в заказанном формате format, либо в 1 из 2 стандартных форматов
    > GET_FORMAT({DATE|TIME|DATETIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})  | Возвращает format, который можно вставить в функции DATE_FORMAT() и STR_TO_DATE().
    > HOUR(time)                                  | Возвращает число чисов из дата-временного значения time, в диапазоне [0, 23].
    > LAST_DAY(date)                              | Возвращает последнее число текущего месяца из даты date.
    > MAKEDATE(year,dayofyear)                    | Возвращает строку с DATE значением, скомпанованным из year и dayofyear.
    > MAKETIME(hour,minute,second)                | Возвращает строку с TIME значением, собранным из hour, minute, second.
    > MICROSECOND(expr)                           | Возвращает кол-во мкСек, которые берет из expr (TIME или DATETIME), диапазон [0 - 999999]
    > MINUTE(time)                                | Возвращает кол-во минут для времени time, в диапазоне от 0 до 59.
    > MONTH(date)                                 | Возвращает номер месяца для даты date, в диапазоне от 0 до 12.
    > YEAR(date)                                  | Возвращает год для даты date, в диапазоне от 1000 до 9999.
    > MONTHNAME(date)                             | Возвращает полное имя месяца, который берет из даты date.
    > NOW([fsp]), LOCALTIMESTAMP(), LOCALTIME(), CURRENT_TIMESTAMP()   | Возвращает текущую дату и время. fsp - кол-во символов для микросекунд, от 0 до 6.
    > PERIOD_ADD(P,N)                             | Добавляет N месяцев к P (в формате YYMM или YYYYMM). p - не значение типа date.
    > PERIOD_DIFF(P1,P2)                          | Возвращает число месяцев между p1 и p2 (в формате YYMM или YYYYMM). p1 и p2 - не значения типа DATE.
    > QUARTER(date)                               | Возвращает квартал года, который берет из даты date, в диапазоне от 1 до 4.
    > SEC_TO_TIME(seconds)                        | Возвращает значение типа TIME, созданное из кол-ва секунд seconds.
    > SECOND(time)                                | Возвращает секунды, которые берет из time, в диапазоне от 0 до 59.
    > STR_TO_DATE(str,format)                     | берет str и format, образует DATETIME значение, соотв. format у.
    > SUBTIME(expr1,expr2)                        | Возвращает разность expr1 - expr2, где expr1 - TIME/DATETIME, expr2 - TIME.
    > SYSDATE()                                   | Возвращает текущую время и дату в одном из двух форматов.
    > TIME_TO_SEC(time)                           | Возвращает аргумент time, конвертированный в секунды.
    > TIME(expr)                                  | Возвращает в виде строки TIME часть аргумента expr.
    > TIMEDIFF(expr1,expr2)                       | Возвращает expr1 - expr2 (тип TIME) где expr1 и expr2 - одинаковые TIME/DATETIME значения
    > TIMESTAMP(expr), TIMESTAMP(expr1,expr2)     | возвращает expr в виде DATETIME значения, и прибавляет к нему TIME значение expr2.
    > TIMESTAMPADD(unit,interval,datetime_expr)   | Прибавляет int значение interval к DATE или DATETIME значению datetime_expr.
    > TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)   | Возвращает разность datetime_expr2 - datetime_expr1, оба типа DATE/DATETIME.
    > TO_DAYS(date)                               | Возвращает количество дней, прошедших по дату date с Рождества Христова.
    > TO_SECONDS(expr)                            | Возвращает для expr (DATE/DATETIME) количество секунд, прошедших с Рождества Христова.
    > UNIX_TIMESTAMP([date])                      | возвращает UNIX timestamp для указанной date (по умолчанию = NOW())
    > UTC_DATE()                                  | Возвращает текущую дату, переведенную в UTC, в 1 из 2 форматов.
    > UTC_TIME([fsp])                             | Возвращает текущее время, переведенное в UTC, в 1 из 2 форматов.
    > UTC_TIMESTAMP([fsp])                        | Возвращает текущие время и дату, переведенные в UTC, в 1 из 2 форматов.
    > WEEK(date[,mode])                           | Возвращает кол-во недель, прошедших с начала года, для даты date. Аргумент mode - для настроки (см. ниже в ИНФОРМАЦИИ)
    > WEEKDAY(date)                               | Возвращает номер дня недели для даты date, в диапазоне от 0 = Monday ... 6 = Sunday.
    > WEEKOFYEAR(date)                            | Эквивалент WEEK(date,3).
    > YEARWEEK(date), YEARWEEK(date,mode)         |   возвращает год и номер недели в году, слитно

  > Функции и операции для приведения типов
    > Оператор BINARY  | приводит строку к бинарному виду
    > CONVERT(expr,type), CONVERT(expr USING transcoding_name)  | Приводит выражение expr к типу type.

  > Некоторые функции для шифрования и сжатия
    > ENCODE(str,pass_str)              | зашифровать str в бинарную строку, используя pass_str в качестве пароля
    > DECODE(crypt_str,pass_str)        | расшифровать ранее зашифрованную str, используя pass_str в качестве пароля для расшифровки
    > COMPRESS(string_to_compress)      | сжимает строку и возвращает результат в виде бинарной строки
    > UNCOMPRESS(string_to_uncompress)  | разжимает строку, сжатую ранее функцией COMPRESS()
    > UNCOMPRESSED_LENGTH(compressed_string)  | возвращает длину строки, которая у нее была до того, как она была сжата
    > MD5(str)                          | возвращает 128-битную MD5 контрольную сумму для строки str
    > PASSWORD(str)                     | возвращает хэш строки str в виде не бинарной строки с кодировкой соединения

  > Информационные функции
    > BENCHMARK(count,expr)   | выполняет выражение expr непрерывно count раз
    > CHARSET(str)            | возвращает кодировку строки str
    > COLLATION(str)          | возвращает collation строки str
    > COERCIBILITY(str)       | возвращает collation coercibility строки str (флаг от 0 до 5)
    > CONNECTION_ID()         | возвращает ID соединения
    > USER()                  | имя и хост пользователя, указанные при подключении к серверу в формате 'user@localhost'
    > CURRENT_USER()          | возвращает строку с именем и хостом текущего пользователя в формате 'user@localhost'
    > DATABASE()              | возвращает имя текущей базы данных по умолчанию, или NULL, если её нет
    > FOUND_ROWS()            | после SELECT ... LIMIT показывает, сколько бы это выражение вернуло строк без LIMIT
    > LAST_INSERT_ID([expr])  | возвращает последнее успешно вставленное autoincrement значение
    > ROW_COUNT()             | после DML-выражения вернет кол-во затронутых им строк
    > VERSION()               | возвращает версию сервера MySQL

  > Разные функции (не попавшие в другие разделы, выборочно)
    > DEFAULT(col_name)       | Возвращает значение по умолчанию для указанной колонки
    > INET_ATON(expr)         | принимает ipv4 адрес типа '10.0.0.1', возвращает число - сетевой порядок байтов
    > INET_NTOA(expr)         | противоположность INET_ATON - принимает число - сетевой порядок байтов, возвращает строку с ipv4 адресом
    > IS_IPV4(expr)           | возвращает 1, если expr - допустимый ipv4 адрес. Иначе 0.
    > IS_IPV6(expr)           | возвращает 1, если expr - допустимый ipv6 адрес. Иначе 0.
    > NAME_CONST(name,value)  | возвращает value в колонке с именем name
    > SLEEP(duration)         | делает паузу на duration секунд

  > Функции (выборочно) и модификаторы для использования в атрибуте GROUP BY (включая функции-агрегаторы)
    > AVG([DISTINCT] expr)  | Возвращает среднее значение для expr (DISTINCT - считать только уникальные значения)
    > COUNT(DISTINCT expr,[expr...])  | возвращает кол-во строк отдельно в каждом из expr (DISTINCT - считать только уникальные значения)
    > GROUP_CONCAT(expr)  | возвращает строку, в которой все значения столбца идут через разделитель (в прямом или обратном порядке)
    > MAX([DISTINCT] expr)  | возвращает максимальное значение expr (DISTINCT - считать только уникальные значения)
    > MIN([DISTINCT] expr)  | возвращает минимальное значение expr (DISTINCT - считать только уникальные значения)
    > SUM([DISTINCT] expr)  | возвращает сумму значений в expr (DISTINCT - считать только уникальные значения)


  > Примеры применения атрибута GROUP BY
    > Посчитать суммарный price представленных фильмов для каждого жанра кино (category), отсортировать по результату
    > То же самое, но с применением WITH ROLLUP - добавляет доп. строку с итогом: суммарным price по всем жанрам
    > Пример работы WITH ROLLUP при анализе не 1-й колонки (как выше), а нескольких
    > ORDER BY запрещено использовать с WITH ROLLUP. Но зато можно использовать ASC и DESC:
    > Демонстрация того, как LIMIT срезает строки, добавленные WITH ROLLUP (использовать их вместе не рекомендуется)
    > Колонка, отсутствующая в GROUP BY, может присутствовать в списке SELECT (см. об этом в ИНФОРМАЦИИ)


  > Примеры точных вычислений
    > Наглядный пример отличия точных значений от не точных.
    > Еще один способ увидеть отличия точных значений от неточных, сложить маленькое число много раз
    > Умножение имеет размер S1 + S2, где S1, S1 - размеры умножаемых чисел.
    > Примеры округления для точных и не точных значений
    > Разница в поведении при вставке выходящих за ракми диапазона значений в строгом и не строгом SQL-режимах
      > В строгом SQL-режиме
      > В не строгом SQL-режиме
    > Разница в поведении, если INSERT содержит выражение, в котором происходит деление на 0, для нестрогого SQL-режима, и для строгого SQL-режима + ERROR_FOR_DIVISION_BY_ZERO
      > В строгом SQL-режиме + ERROR_FOR_DIVISION_BY_ZERO
      > В не строгом SQL-режиме
    > Демонстрация, что в MySQL >= 5.0.3 точные литералы обрабатываются, как DECIMAL значения
    > Если аргумент агрегирующей функции - точное число, то результат тоже будет точным числом



> 15. phpMyAdmin - UI для MySQL

  Теория
  ================================
  > Введение
    > Что такое phpMyAdmin
    > О привилегиях в phpMyAdmin
    > Пояснение по поводу управления пользователями в phpMyAdmin
    > В настоящее время (версия 4.0.8) phpMyAdmin может следующее...

  > Требования к среде
    > Веб сервер
    > PHP
    > База данных

  > Установка на Windows
    > Общая краткая инструкция по установке
    > Подробнее о создании конфигурационного файла config.inc.php вручную.
    > Использование скрипта с графическим интерфейсом для настройки "config.inc.php"
    > Настройка безопасности
    > Создание служебных таблиц
    > Как проводить обновление до новой версии
    > Доступные способы аутентификации

  > Настройка конфигурации
    > Ссылка на официальный категоризированный справочник всех доступных параметров phpMyAdmin
    > Общая информация
    > Описание настройки различной функциональности



> 16. Workbench - UI для MySQL

  Теория
  ================================
  > Введение
    > Что такое MySQL Workbench?
    > Какие версии сервера MySQL поддерживает Workbench?
    > MySQL Workbench обладает функциюнальностью для работы по следующим 5 основным направлениям
    > Платная и бесплатная версии MySQL Workbench

  > Установка на Windows
    > Требования к системе и программной среде.
    > Установка на Windows возможно 2-мя способами
    > Общая краткая инструкция по установке
    > Первоначальная настройка

  > Администрирование сервера
    > Настройка конфигурационного файла в Workbench
    > Просмотр логов для текущего подключенного сервера MySQL
    > Включение / Выключение текущего подключенного сервера MySQL
    > Просмотр и изменение системных переменных
    > Настройка пользовательских аккаунтов сервера MySQL

  > Редактор SQL и управление структурой и содержанием объектов данных
    > Иконки быстрого доступа под главным меню
    > Редактор SQL
    > Окно "SQL Additions" - подсказки и заготовленные SQL-выражения (snippets)
    > Окно "Schemas" и действия в нем
    > Окно "Information"
    > Добавление, редактирование, удаление данных в таблицах
    > Импорт / Экспорт данных

  > Работа с моделями.
    > Общая информация
    > Блок, посвященный моделям, на главной (черной) странице.
    > Меню по работе с моделями
      > Общая информация
      > Как сохранить / загрузить модель в файл / из файла.
      > Подробнее о блоке Model Overview
    > Меню по работе с диаграммами - редактор моделей
      > Общая информация
      > Работа с внешними ключами (Foreign Keys)
      > Как автоматически выровнять объекты на схеме

  > Форвард и реверс инжениринг. Синхронизация модели и БД.
    > Реверс инжениринг
    > Форвард инжениринг и синхронизация
      > Общая информация
      > Форвард инжениринг с помощью SQL Script
      > Форвард инжениринг в реальную базу данных
      > Синхронизация модели и реальной базы
      > Сравнение и получение отчета о разнице между моделью и реальной базой









*/