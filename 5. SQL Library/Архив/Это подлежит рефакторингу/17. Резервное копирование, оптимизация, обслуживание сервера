/* INFO
Темы:
- Резервное копирование и аварийное восстановление информации
- Проверки и восстановление таблиц
- Разделение прав пользователей
- Оптимизация запросов
- Оптимизация баз данных
- Оптимизация конфигурации сервера

 > Единственный способ восстановить удаленные данные - это бэкап.
 > Смешная поговорка: администраторы веб-серверов делятся на две группы:
                      те, кто делает бэкапы; те, кто теперь делает бэкапы.
          Вывод: бэкапы надо делать всегда и как можно чаще.
 > До создания базы данных надо:
   > Разработать план резервного копирования.
   > Все проверить. Сделать резервное копирование. Восстановиться из копии.


---------------------------------------------------------
| -- Резервное копирование и восстановление баз данных --
---------------------------------------------------------
Такими же методами можно переносить базу с одного сервера на другой

Всего рассмотрим 4 способа:
1. через консоль mysqldump'ом всю базу в 1 файл .sql
2. через консоль mysqldump'ом для каждой таблицы БД по паре файлов
   .sql (структура) и .txt (форматированные данные)
3. через workbench с современным граф. интерфейсом и доп. возможностями
4. (устарел) SQL командами BACKUP TABLE или RESTORE TABLE;
    подходит только для MyISAM

-- -------------- СПОСОБ №1: mysqldump -------------- --
* результат будет в виде 1 файла .sql, содержащего все данные.
+ Прост в исполнении
- База из файла может восстанавливаться долго
- Восстановить большую базу таким способом проблематично

Чтобы сделать дамп базы данных, надо:
  1. Зайти в консоль, перейти в папку, в которой будех хранитсья backup.
   ПРИМЕР  |  C:\ProgramData\MySQL\MySQL Server 5.6\data\backup
  2. Прописать путь (PATH) в windows к MySQL\bin (см. инструкцию в 03.txt)
  3. Написать в консоли следующее.
   ШАБЛОН  |  mysqldump -uUSERNAME -pPASSWORD ИМЯ_БАЗЫ > ИМЯ_ДАМПА.SQL
   ПРИМЕР  |  mysqldump -uroot -p77714SeVeN fselect > fselect_backup.SQL

Чтобы восстановить базу данных из бэкапа:
  1. Зайти в консоль, перейти в папку, в которой хранитсья backup.
  2. Написать в консоли следующее.
   ШАБЛОН  |  mysqldump -uUSERNAME -pPASSWORD ИМЯ_БАЗЫ < ИМЯ_ДАМПА.SQL
   ПРИМЕР  |  mysqldump -uroot -p77714SeVeN fselect < fselectbackup.sql
     В этом примере сервер дропнул все данные в fselect, и вкачал
     туда данные из бэкапа.
     * Примечание: база должна уже существовать; если ее нет, то надо
       создать пустую, затем делать восстановление данных.


-- -------------- СПОСОБ №2: с помощью утилиты mysqldump -------------- --
* результат будет в виде пар файлов для каждой таблицы 1) .txt (форматированные данные) и 2) .sql (структура таблицы) файлов.
+
- бэкап производится вручную; структуры таблиц восстанавливаются из .sql файлов; даные в них загружаются из .txt файлов с помощью LOAD DATA LOCAL (см. 6)

Чтобы сделать дамп базы данных, надо:
  1. Зайти в консоль
  2. Написать в консоли следующее.
   ШАБЛОН  |  mysqldump -uUSERNAME -pPASSWORD -T ПУТЬ_К_ПАПКЕ_ДЛЯ_СОХРАНЕНИЯ_БЭКАПА ИМЯ_БАЗЫ
   ПРИМЕР  |  mysqldump -uroot -p77714SeVeN -T C:\ProgramData\MySQL\MySQL Server 5.6\data\backup2 fselect

Чтобы восстановить базу данных из бэкапа:
> Структуры таблиц восстанавливаются из .sql файлов;
  даные в них загружаются из .txt файлов с помощью LOAD DATA LOCAL (см. 6)

-- -------------- СПОСОБ №3: с помощью workbench -------------- --
 > способ №3 похож на предыдущие два, но с прикрученным графическим интерфейсом.
   > export to dump project folder  |  результат - по файлу .sql для каждой таблицы, выгружается в указанную папку
   > export to self-contained file  |  результат - 1 файл на всю базу, как в способе №1
 > как решить проблему с ошибкой "Couldn't execute 'SET OPTION SQL_QUOTE_SHOW_CREATE=1'": http://stackoverflow.com/questions/15227171/dump-file-mysql-5-6-10

Чтобы сделать дамп базы данных, надо:
 1. Зайти в workbench
 2. Зайти в админ-панель сервера. Для этого 2 раза кликнуть по нему в колонке Server Administration
 3. Воспользоваться разделом Data Export
Чтобы восстановить базу данных из бэкапа:
 > воспользоваться разделом Data Import

-- ------------- СПОСОБ №4: через команды MySQL (устарел) -------------- --
 > подходит только для движка MYISAM
-- > есть две устаревшие нестандартные команды, которые копируют только данные
-- > 1. BACKUP TABLE _name_ TO _path_to_directory_
-- > 2. RESTORE TABLE _name_ FROM _path_to_directory_



----------------------------------------
| -- Проверка и восстановление таблиц --
----------------------------------------
Возможности:
-> CHECK TABLE _имя_таблицы_  |  проверяет, не повреждена ли таблица
-> REPAIR TABLE _имя_таблицы_ |  позволяет восстановить структуру таблицы (бывает, например, на MYISAM что-то недозаписалось, и структура нарушилась)
   > возможна потеря части данных
   > работает не движках MyISAM и ARCHIVE
-> OPTIMIZE TABLE _имя_таблицы_  |
   > дефрагментирует таблицу, реально удаляет удаленные записи и пр.
   > на MyISAM рекомендуется делать раз в 2-3 месяца
   > работает на движках INNODB, MyISAM и ARCHIVE


-------------------------------------
| -- РАЗДЕЛЕНИЕ ПРАВ ПОЛЬЗОВАТЕЛЕЙ --
-------------------------------------
 Есть 2 способа управлять привелегиями пользователей:
 > SQL командами (см. ниже примеры)
 > Через админку workbench, раздел Users and Privileges.

 > Сервер MySQL аутентифицирует пользователя по 3-м параметрам:
   1. Логин
   2. Пароль
   3. Сетевой адрес  |  можно указать % что значит с любого адреса
 > После создания пользователя по умолчанию у него нет никаких прав

 > ИНСТРУКЦИЯ    что делать, если забыл пароль от root:
   > Нужно иметь физически доступ к cmd сомпьютера
   1. Остановить службу через cmd (или через windows)
          net stop mysql
   2. Запустить в cmd:
          mysqld --skip-grant-tables    |    сервер будет считать всех root'ами, невзирая на права и ограничения
   3. Зайти на сервер mysql не указывая логин и пароль
          mysql
   4. Выполнить запрос:
          UPDATE mysql.user SET password = PASSWORD('новый пароль')
            WHERE user = 'root';
   5. Выйти из консоли mysql и выполнить команду
          mysqladmin flush-privileges
   6. Остановить mysqld
          mysqladmin shutdown
   7. Запустить службу
          net start mysql


-------------------------------------
| -- ОСНОВНЫЕ МЕТОДИКИ ОПТИМИЗАЦИИ --
-------------------------------------
1. Оптимизация индексов (см. 5. индексы)
2. Оптимизация движков (см. 16. Типы хранилищ MySQL)
3. Нормализация базы данных. Оптимальная - 2 нормальная форма.
4. Агригирующие таблицы. Если нужны какие-то обработанные данные,
   которые долго считать, можно дать задание серверу рассчитывать их
   ночью в отдельную агригирующую таблицу, а днем брать эти данные оттуда.
5. Кэширование (query cache)
 > Параметры query cache  -  настроить можно в my.ini  или  в админке workbench -> Options File -> Performance (после этого надо сделать рестарт сервака)
   > query_cache_limit              | (важная) МАХ размер запроса, который надо кэшировать.
   > query_cache_min_res_unit       | (важная) MIN размер запроса, который надо кэшировать
   > query_cache_size               | (важная) Размер кэша. У разработчика обычно =0.
   > query_cache_type               | (второстепенная)
   > query_cache_wlock_invalidate   | (второстепенная)

*/



-- ----------------------------> ПРОВЕРКА И ВОССТАНОВЛЕНИЕ ТАБЛИЦ
-- CHECK TABLE  |  проверка, не повреждена ли таблица
USE enginespeedtestbd;
CHECK TABLE city0;

-- CHECK TABLE  |  проверка, не повреждена ли таблица
REPAIR TABLE city0;

-- OPTIMIZE TABLE  |  дефрагментация таблицы (вроде дефрагментации диска)
OPTIMIZE TABLE city0;

-- ----------------------------> РАЗДЕЛЕНИЕ ПРАВ ПОЛЬЗОВАТЕЛЕЙ
-- создание аккаунта новому пользователю сервера MySQL
-- > по умолчанию у него нет никаких прав
CREATE USER 'John'@'%';  -- Логин 'John', сетевой адрес '%' (значит может подключаться с любого сетевого адреса)
-- CREATE USER 'John'@'%' IDENTIFIED BY 'abcde12345';  -- можно сразу создат с паролем, он автоматически захэшируется
SET PASSWORD FOR 'John'@'%' = PASSWORD('abcde12345');  -- Задать пароль для созданного аккаунта; пароль не обязателен

-- сменить пароль себе можно так
SET PASSWORD = PASSWORD('abcde12345');

-- посмотреть логины, пароли и права всех пользователей
-- > пароль пользователя хранится в виде хэш-значения
SELECT * FROM mysql.user;

-- получить хэш строки по фирменному алгоритму mysql
SELECT PASSWORD('abcde12345');

-- открыть пользователю John привелегию использовать SELECT в указанной базе данных
-- > но так лучше не делать, т.к. потом нельзя будет ему ставить запреты на
--   отдельные таблицы; лучше открывать привелении перечислением на каждую таблицу (см. ниже)
GRANT SELECT
  ON enginespeedtestbd.*  -- к любой таблице указанной БД
  TO 'John'@'%';

-- забрать у пользователя John все привелегии относительно БД enginespeedtestbd
REVOKE ALL PRIVILEGES
  ON enginespeedtestbd.*
  FROM 'John'@'%';

-- открыть John'у отдельные привелегии на разные таблицы
GRANT SELECT, UPDATE          -- позволить читать и обновлять...
  ON enginespeedtestbd.city0  -- ...таблицу city0
  TO 'John'@'%';
GRANT SELECT                    -- позволить читать...
  ON enginespeedtestbd.city1    -- ...таблицу city1
  TO 'John'@'%';
GRANT SELECT                    -- позволить читать...
  ON enginespeedtestbd.city2    -- ...таблицу city2
  TO 'John'@'%';


-- ----------------------------> ОСНОВНЫЕ МЕТОДИКИ ОПТИМИЗАЦИИ

-- ---------------------> Оптимизация индексов
-- (см. подробнее 5. индексы)
-- подготовка учебной БД
CREATE DATABASE optimisation;
USE optimisation;
CREATE TABLE city0 ENGINE=INNODB SELECT * FROM world.city;
CREATE TABLE city1 ENGINE=INNODB SELECT * FROM world.city;

-- опримизируем этот тормознутый запрос (4.6 sec)
-- > Этот запрос подсчитывает количество тех строк, в которых name равно самому себе
SELECT COUNT(*)
  FROM city0 x                            -- здесь x - это псевдоним city0
  WHERE EXISTS (SELECT * FROM city0 y WHERE x.name = y.name);  -- здесь y - это псевдоним city0

-- проанализируем, почему этот запрос такой медленный
EXPLAIN
SELECT COUNT(*)
FROM city0 x
WHERE EXISTS (SELECT * FROM city0 y WHERE x.name = y.name);
   -- потому что ему приходится выполнить 4070^2 ~ 16 млн проверок

-- для оптимизации времени выполнения запроса создадим индекс
CREATE INDEX ixName ON city1 (name);

-- теперь он выполняется за 0.2 sec, а не за 4.6 sec
SELECT COUNT(*)
FROM city1 x
WHERE EXISTS (SELECT * FROM city1 y WHERE x.name = y.name);

-- проанализируем причину ускорения выполнения запроса
EXPLAIN
SELECT COUNT(*)
FROM city1 x
WHERE EXISTS (SELECT * FROM city1 y WHERE x.name = y.name);
   -- на внешнем запросе проверяются 4070 строк, а на вложенном
   --  уже не проверяются второй раз. Всего 4070 операций против ~16 млн  в неоптимизированном запросе

-- ---------------------> Оптимизация движков
-- Общие рекомендации
--   > MyISAM для фактографических логов, там, где часто надо записывать данные; быстрый полнотекстовый поиск по отдельным словам или фразам;
--   > INNODB в остальных случаях
--   > MEMORY для временных таблиц

-- ---------------------> Кеширование
-- > Самое мощное ускорение сервера MySQL - это query cash -
--   это кэширование запросов пользователя. 1 раз запросил,
--   при запросе 2-й раз того же самого, отдается результат
--   предыдущего запроса. Но любая модификация таблицы автоматом
--   сбрасывает кэш.

-- такой запрос использует индексы (у city1.name есть индекс)
EXPLAIN
SELECT name
  FROM city1
  WHERE name LIKE 'm%';

-- а такой уже не использует (у city1.name есть индекс)
EXPLAIN
SELECT name
FROM city1
WHERE name LIKE '%m%';  -- изменение здесь

-- посмотреть настраиваемые параметры query cache
SHOW VARIABLES LIKE 'query_cache%';




