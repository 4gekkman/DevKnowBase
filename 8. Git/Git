////==========================================================////
////																													////
////        Git  - система управления версиями файлов				  ////
////																													////
////==========================================================////
//// 			        		   ////
//// 			  Ссылки			 ////
//// 			        		   ////
////=====================////

  Основные
  --------

    # Официальный сайт Git, откуда его можно скачать
        https://git-scm.com/downloads

    # Самый крупный хостинг проектов, основанный на Git
        https://github.com/

  Обучающие
  ---------

    # Видео, в котором есть всё необходимое для работы с Git и GitHub
        http://www.youtube.com/watch?v=2VQfRn1H8HE

    # Оф документация (ru) по Git (книга Git Pro)
        https://git-scm.com/book/ru/v1

    # Оф. документация help.github по оному, и по Git
        https://help.github.com/

  В помощь "на лету"
  ------------------

    # Визуальная шпаргалка по Git
        http://ndpsoftware.com/git-cheatsheet.html

    # Шпаргалка в формате PDF по Git
        https://training.github.com/kit/downloads/github-git-cheat-sheet.pdf




////==========================================================////
//// 			        		       ////
//// 			  Оглавление			 ////
//// 			        		       ////
////=========================////


  А. Быстрый старт
  ----------------
    - А1. Об этом разделе
    - А2. Сжато про Git
    - А3. Сжато про GitHub

    - А4. Базовая настройка Git
    - А5. Подготовка локального репозитория
    - А6. Работа с Git
    - А7. Автоматизация сохранения проектов на GitHub


////==========================================================////
//// 			        		             ////
//// 			  А. Быстрый старт			 ////
//// 			        		             ////
////===============================////

  ////---------------------////
  //// А1. Об этом разделе ////
  ////---------------------////
  Оглавление:

    - Задача этого раздела документации

  ////---------------------////

  > Задача этого раздела документации
    - Здесь приводится сухая, сжатая пошаговая инструкция.
    - В формате "от" и "до".
    - Она позволит новичку начать работу с Git и Github быстро.


  ////-------------------////
  //// А2. Сжато про Git ////
  ////-------------------////
  Оглавление:

    - Что такое Git
    - Зачем нужен Git
    - Как работает Git, на пальцах
    - Установка Git

  ////-------------------////

  > Что такое Git
    - Это система контроля версий.

  > Зачем нужен Git

    1. Для контроля версий файлов, особенно при командной работе
      - У всех разработчиков сегда автоматич.послед.версия проекта.
      - Каждый знает, кто, какие и когда изменения внёс.
      - Сохраняется история изменений, всегда можно откатиться.
    2. Как хранилище для проекта в облаке
      - Куда его удобно автоматич.сохр.скриптом каждый день.
      - В итоге, при поломке компьютера, потери будут минимальны.
      - Ещё плюс: доступ к проекту есть в любом месте, где есть интернет.

  > Как работает Git, на пальцах
    - У каждого разработчика есть на компьютере каталог с проектом.
    - И у всех у них есть 1 репозиторий (каталог) на github.
    - Итог: во всех каталогах и репозитории лежит 1 и та же версия проекта.
    - Разработчик может ввести команду, и:
      - Изменения из его каталога попадают в репозиторий (pull)
      - Изменения из репозитория попадают в его каталог (commit, push)
    - По каждому файлу можно посмотреть историю изменений (кто, чего, когда).

  > Установка Git
    - Скачать Git с оф.сайта: https://git-scm.com/download/win
    - Установить.
    - При установке, лучше выбрать simple context menu, это удобнее.
    - При установке, лучше выбрать возможность использования и из терминала windows.


  ////----------------------////
  //// А3. Сжато про GitHub ////
  ////----------------------////
  Оглавление:

    - Что такое GitHub
    - Регистрация в GitHub
    - Создание нового репозитория

  ////----------------------////

  > Что такое GitHub
    - Это вроде облачного хостинга для проектов, основанный на Git.
    - Он напоминает некую социальную сеть для разработчиков.
    - Бесплатно можно использовать только общедоступные репозитории.
    - Поэтому, можно искать, скачивать, смотреть многие чужие opensource-проекты.
    - А можно даже внести в проект изменения, и предложить разработчику внести их в общий проект.

  > Регистрация в GitHub
    - Зарегистрироваться можно на оф.сайте: https://github.com/
    - Пароль надо указывать такой, чтобы можно было вводить его на память.
    - Потому что, его придётся вводить в терминале для доступа к репозиторию.

  > Создание нового репозитория
    - Создать новый репозиторий можно на главной странице GigHub.
    - Справа есть такая зелёная кнопка: "New repository".
    - При создании надо выбрать тип: public (бесплатно) или private (платно).
    - А также указать имя репозитория, и нажать "create".
    - На экране появится набор инструкций с командами: что можно сделать дальше.


  ////---------------------------////
  //// А4. Базовая настройка Git ////
  ////---------------------------////
  Оглавление:

    - Ссылки
    - Базовая настройка Git
    - Каждый коммит подписывается

  ////---------------------------////

  > Ссылки
      https://help.github.com/articles/set-up-git/

  > Базовая настройка Git
    - К этому момент Git должен быть установлен.
    - Открываем окно терминала и проверяем, так ли это

        git     // должен выдать справку по всем командам git

    - Укажем имя, которым будут подписываться все коммиты

        git config --global user.name "4gekkman"

    - Укажем email, которым будут подписываться все коммиты

        git config --global user.email "4gekkman@gmail.com"

    - Укажем текстовый редактор (notepad++) по умолчанию для Git

        git config --global core.editor \
        "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

    - Проверим, всё ли OK, для этого посмотрим значения всех настроек

        git config --list

  > Каждый коммит подписывается
    - Git отслеживает лишь указанные ему файлы.
    - На компьютере установлен локальный репозиторий.
    - При commit в локальном репозитории создаётся контрольная точка.
    - При push, все накопившиеся коммиты отправляются уже в репозиторий github.
    - В репозитории данные обрабатываются, и изменения сохраняются в проекте.
    - К любой из контрольных точек можно потом вернуться в какой-то момент.
    - К каждому commit добавляется подпись в виде name и email, его сделавшего.


  ////---------------------------------------////
  //// А5. Подготовка локального репозитория ////
  ////---------------------------------------////
  Оглавление:

    - Создание локального репозитория
    - Добавление удалённого репозитория

  ////---------------------------------------////

  > Создание локального репозитория
    - Подготовить каталог на компьютере, который станет локальным репозиторием.
    - Создать в нём каталога .git одним из следующих вариантов:

        1. Кликнуть ПК мыши в каталоге, и выбрать Git init here
        2. Перейти в каталог в терминале, и ввести git init

  > Добавление удалённого репозитория
    - Локальному репозиторию надо указать, с каким удал.реп. он будет работать.
    - Для этого, сначала переходим в каталог репозитория (где лежит .git)
    - А затем пишем такую команду:

        git remote add [имя удал.репо.] [адрес удал.репо]

      [имя удал.репо.]
        - Заменяем на имя удалённого репозитория.
        - По этому имени мы будем к нему обращаться в дальнейшем в терминале.
      [адрес удал.репо]
        - Заменяем на адрес удалённого репозитория.
        - Адрес можно найти на странице репозитория в github.
        - Причём, адрес будет разный, в завис.от протокола: http, ssh
        - Если что, его можно исправить в файле .git/config

  ////------------------////
  //// А6. Работа с Git ////
  ////------------------////
  Оглавление:

    - Сохранение проекта в репозиторий на GitHub
    - Извлечение проекта из репозитория на GitHub

  ////------------------////

  > Сохранение проекта в репозиторий на GitHub
    - Сначала перейти в каталог локального репозитория в терминале.

      git add .                 // добавить все файлы проекта в "отслеживаемые"
      git commit -m 'comment'   // коммит с комментарием
      git push projects master  // сохранить проект на удал.репо.projects в ветку master

  > Извлечение проекта из репозитория на GitHub
    - Сначала перейти в каталог локального репозитория в терминале.

      git pull projects master  // извлечь в текущий каталог всё из репо.projects из ветки master


  ////-------------------------------------------------////
  //// А7. Автоматизация сохранения проектов на GitHub ////
  ////-------------------------------------------------////
  Оглавление:

    - Настройка соединения с GitHub через SSH
    - Для автоматизации работы, фраза-пароль ключей д.б. пустой
    - Скрипт для автоматического сохранения проектов в github
    - Создание новой задачи в планировщике windows

  ////-------------------------------------------------////

  > Настройка соединения с GitHub через SSH

    1. Сгенерировать новые SSH-ключи для соединения с GitHub
      - Перейти в каталог, в котором появятся ключи.
      - Ввести в окне терминала:

          ssh-keygen -t rsa -b 4096 -C "[твой email]"

      - Когда попросят ввести путь, ввести строку: id_rsa
      - Пароль-фразу рекомендуется выбрать посложнее.
      - После создания ключей, поместить их в каталог .ssh

    2. Добавить созданный SSH-ключ в SSH-агента
      - Перейти в режим bash.
      - Включить ssh-agent:

          eval $(ssh-agent)

      - Добавить ключ (попросит ввести фразу-пароль):

          ssh-add ./.ssh/id_rsa

    3. Добавить сгенерированный ssh-ключ в аккаунт на GitHub
      - Зайти на сайт github.com
      - Зайти в настройки (шестерёнка справа-сверху)
      - Слева в меню выбрать пункт "SSH keys"
      - Нажать справа на кропку "Add SSH key"
      - В окне терминала скопировать ключ в буфер обмена:

          clip < ./.ssh/id_rsa.pub

      - Вставить ключ в текстовое поле на сайте github.
      - Нажать кнопку "add key".

    4. Проверить соединение, подключившись по ssh к github
      - Для этого выполнить команду:

          ssh -T git@github.com

      - В случае успеха, будет показано такое сообщение:

        "Hi username! You've successfully authenticated, but GitHub does not
        # provide shell access."

      - В случае неудачи проверить:
        + SSH-agent должен быть запущен.
        + Ключ должен быть добавлен в SSH-agent.
        + Проверить: ssh-add -l

  > Для автоматизации работы, фраза-пароль ключей д.б. пустой
    - Иначе add-sshkey в скрипте будет спрашивать пароль у пользователя.
    - И ждать, пока он его введёт. Т.Е. полная автоматизация не получается.
    - Сменить фразу-пароль у ключа можно командой: ssh-keygen -p

  > Скрипт для автоматического сохранения проектов в github
    - Источник скриптов: https://github.com/spmason/powershell-profile/blob/master/ssh-agent-utils.ps1
    - Это скрипт-пример, при использовании заменить данные репозиториев.

      #########################################################################
      ##                                                                     ##
      ##   Powershell-скрипт автоматического сохранения проектов на github   ##
      ##                                                                     ##
      #########################################################################
      ##                ##
      ##                ##
      ##   Оглавление   ##
      ##                ##
      ####################
      #
      #	1. Подготовка необходимого функционала
      #
      #		Get-SshAgent		| 1.1. Извлечь PID текущего SSH-agent
      #		Start-SshAgent		| 1.2. Запустить SSH-agent
      #		Stop-SshAgent		| 1.3. Остановить запущенный SSH-агент
      #		Add-SshKey			| 1.4. Добавить SSH-ключ в SSH-агент
      #
      #	2. Подготовка SSH-agent'та к работе
      #	3. Сохранение лок.репо.projects в репо.projects на github
      # 4. Сохранение лок.репо.DewKnowBase в репо.DevKnowBase на github
      #
      #
      #########################################################################

      ############################################
      ## 1. Подготовка необходимого функционала ##
      ############################################

      	##--------------------------------------##
      	## 1.1. Извлечь PID текущего SSH-agent  ##
      	##--------------------------------------##
      	## - Если SSH-agent не запущен, вернёт 0.
      	## - Можно использовать, чтобы проверить, запущен ли уже SSH-агент.

      	  function Get-SshAgent() {
      		  $agentPid = $env:SSH_AGENT_PID

      		  if ([int]$agentPid -eq 0) {
      			  0
      		  } else {
      			  # Make sure the process is actually running
      			  $process = Get-Process -Id $agentPid -ErrorAction SilentlyContinue

      			  if(($process -eq $null) -or ($process.ProcessName -ne "ssh-agent")) {
      				  # It is not running (this is an error). Remove env vars and return 0 for no agent.
      				  [Environment]::SetEnvironmentVariable("SSH_AGENT_PID", $null, "Process")
      				  [Environment]::SetEnvironmentVariable("SSH_AGENT_PID", $null, "User")
      				  [Environment]::SetEnvironmentVariable("SSH_AUTH_SOCK", $null, "Process")
      				  [Environment]::SetEnvironmentVariable("SSH_AUTH_SOCK", $null, "User")
      				  0
      			  } else {
      				  # It is running. Return the PID.
      				  $agentPid
      			  }
      		  }
      	  }

      	##---------------------------##
      	## 1.2. Запустить SSH-agent  ##
      	##---------------------------##
      	## - После запуска публикует PID нового SSH-agent

      	  function Start-SshAgent() {
      		  # Start the agent and gather its feedback info
      		  [string]$output = ssh-agent

      		  $lines = $output.Split(";")
      		  $agentPid = 0

      		  foreach ($line in $lines) {
      			  if (([string]$line).Trim() -match "(.+)=(.*)") {
      				  # Set environment variables for user and current process.
      				  [Environment]::SetEnvironmentVariable($matches[1], $matches[2], "Process")
      				  [Environment]::SetEnvironmentVariable($matches[1], $matches[2], "User")

      				  if ($matches[1] -eq "SSH_AGENT_PID") {
      					  $agentPid = $matches[2]
      				  }
      			  }
      		}

      		  # Show the agent's PID as expected.
      		  Write-Host "SSH agent PID:", $agentPid
      	  }

      	##---------------------------------------##
      	## 1.3. Остановить запущенный SSH-агент  ##
      	##---------------------------------------##
      	## -

      	  function Stop-SshAgent() {
      		  [int]$agentPid = Get-SshAgent
      		  if ([int]$agentPid -gt 0) {
      			  # Stop agent process
      			  $proc = Get-Process -Id $agentPid
      			  if ($proc -ne $null) {
      				  Stop-Process $agentPid
      			  }

      			  # Remove all enviroment variables
      			  [Environment]::SetEnvironmentVariable("SSH_AGENT_PID", $null, "Process")
      			  [Environment]::SetEnvironmentVariable("SSH_AGENT_PID", $null, "User")
      			  [Environment]::SetEnvironmentVariable("SSH_AUTH_SOCK", $null, "Process")
      			  [Environment]::SetEnvironmentVariable("SSH_AUTH_SOCK", $null, "User")
      		  }
      	  }

      	##-------------------------------------##
      	## 1.4. Добавить SSH-ключ в SSH-агент  ##
      	##-------------------------------------##
      	## - Пути к SSH-ключам передаётся в качестве аргументов

      	  function Add-SshKey() {
      		  if ($args.Count -eq 0) {
      			  # Add the default key (./.ssh/id_rsa)
      			  ssh-add ".\.ssh\id_rsa"
      		  } else {
      			  foreach ($value in $args) {
      				  ssh-add $value
      			  }
      		  }
      	  }

      #########################################
      ## 2. Подготовка SSH-agent'та к работе ##
      #########################################

      	# Перейти в каталог, где лежит каталог .ssh
      	cd "C:\WebDev\bin\ssh_keys_for_github"

      	# Запустить SSH-agent
      	Start-SshAgent

      	# Добавить SSH-ключ от github в SSH-агент
      	Add-SshKey




      ###############################################################
      ## 3. Сохранение лок.репо.projects в репо.projects на github ##
      ###############################################################
      # Из:      C:\WebDev\projects					#
      # В:       git@github.com:4gekkman/projects.git #
      # Триггер: при выключени компьютера             #
      #################################################

      	# Перейти в каталог локального репозитория
      	cd "C:\WebDev\projects"

      	# Подготовить сообщение
      	$msg = "Автоматическое сохранение проекта скриптом PS"

      	# Сохранить данные из локального репозитория в репозиторий на GitHub
      	git add .
      	git commit -m $msg
      	git push projects master


      #####################################################################
      ## 4. Сохранение лок.репо.DewKnowBase в репо.DevKnowBase на github ##
      #####################################################################
      # Из:      C:\WebDev\docs\DevKnowBase			   #
      # В:       git@github.com:4gekkman/DevKnowBase.git #
      # Триггер: при выключени компьютера                #
      ####################################################

      	# Перейти в каталог локального репозитория
      	cd "C:\WebDev\docs\DevKnowBase"

      	# Подготовить сообщение
      	$msg = "Автоматическое сохранение проекта скриптом PS"

      	# Сохранить данные из локального репозитория в репозиторий на GitHub
      	git add .
      	git commit -m $msg
      	git push DevKnowBase master


  > Создание новой задачи в планировщике windows

    1. Панель управления -> Расписание выполнения задач
    2. Щёлкнуть по "библиотека планировщика задач".
    3. Щёлкнуть правой кнопкой правее, и выбрать "создать новую задачу".
    4. Настроить всё. Особое внимание уделить вкладке "действие"

      - Нажать кнопку "создать"
      - В поле "программа или сценари" вписать следующее (пути заменить на актуальные):

          C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe

      - В поле "добавить аргументы" написать следующее (пути заменить на актуальные):

          -NoProfile -File "C:\WebDev\GitAutoPushScript.ps1" -ExecutionPolicy RemoteSigned "C:\WebDev\GitAutoPushScript.ps1"
