////==================================================////
////                                                  ////
////                      Smarty 2                    ////
////                                                  ////
////==================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  // Официальные ресурсы //
  //---------------------//

    # Официальный сайт Smarty
        http://smarty.net

    # Официальная документация по Smarty 2 на русском языке
        http://www.smarty.net/docsv2/ru/        


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  Smarty

    А1. Вводная информация
    А2. Переменные в Smarty
    А3. Встроенные в Smarty функции
    А4. Пользовательские функции Smarty
    А5. Отладочная консоль
    А6. Методы класса Smarty

  # Б.  Рецепты и наработки


  # В.  Smarty в проекте PSW

    В1. Настройки Smarty в dev-версии


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Вводная информация

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение
  # Основные факты о Smarty

    ▪ Компилирующий обработчик шаблонов
    ▪ Главная цель, отделять логику приложения от представления
    ▪ Принцип работы Smarty кратко
    ▪ Перекомпиляция изменившихся шаблонов
    ▪ Можно настраивать разделители тегов шаблона
    ▪ Наличие конструкций if ... else
    
    ▪ Наличие конструкций цикла foreach и section
      ▪ foreach в Smarty - как foreach в php
      ▪ section в Smarty - похожа на for($i=0; $i<count($arr); $i++) {} в php
    
    ▪ PHP-код можно включать прямо в шаблон
    
    ▪ Кэширование для ускорения работы display() и fetch()
      ▪ Зачем нужно кэширование обработанных шаблонов?
      ▪ Настройка кэширования
        ▪ Вкл/Выкл
        ▪ Проверить, кэшируется ли указанный шаблон
        ▪ Ограничение времени жизни кэша
        ▪ Обновлять кэш при изменении файлов шаблона
        ▪ Отключение кэширования во время отладки
        ▪ Оставить часть закэшированной страницы динамической

    ▪ Настройка источников шаблонов
      ▪ Указать тип шаблона по умолчанию
      ▪ Можно указывать тип шаблона при подключении      
      ▪ Какие вообще типы ресурсов существуют?
      ▪ Указать папку с шаблонами по умолчанию
      ▪ При вызове шаблона НЕ из папки по умолчанию, обязательно указывать тип ресурса

--------------------------------------

> Ссылки

  # Глава из оф. документации - "Что такое Smarty?"
      http://www.smarty.net/docsv2/ru/what.is.smarty.tpl

  # What's the difference between {foreach} and {section} in smarty?
      http://stackoverflow.com/questions/4031586/whats-the-difference-between-foreach-and-section-in-smarty

  # Конструкции if ... else
      http://www.smarty.net/docsv2/ru/language.function.if.tpl

  # Конструкции foreach и section
      http://www.smarty.net/docsv2/ru/language.function.foreach.tpl
      http://www.smarty.net/docsv2/ru/language.function.section.tpl

  # Кэширование
      http://www.smarty.net/docsv2/ru/caching.tpl

  # 
  
> Введение
  - Это глава с общей информацией о Smarty.

> Основные факты о Smarty

  • Компилирующий обработчик шаблонов
    - Smarty, это компилирующий обработчик шаблонов для PHP.

  • Главная цель, отделять логику приложения от представления
    - Т.Е. в представлении нет никакого PHP-кода и логики.

  • Принцип работы Smarty кратко
    - В HTML-документе мы размещаем специальные smarty-теги.
    - Smarty компилирует документ, обрабатывая эти теги.
      Например, подставляя в них значения, или другим образом.
    - И сохраняет скомпилированный документ в папочку.
    - Когда пользователь запрашивает этот документ, Smarty
      отдаёт ему скомпилированную версию.
    - Пример:

        HTML-документ (шаблон)
        ---------------------------------------
        <div>
          <span>{$var}</span>
        <div>

    - В контроллере Smarty мы передаём $var шаблону с помощью assign.
    - Вот так:

        Контроллер
        ---------------------------------------
        $smarty->assign('var', '123');

    - Скомпилированный вариант выглядит так:

        HTML-документ (скомпилированный)
        ---------------------------------------
        <div>
          <span>123</span>
        <div>

  • Перекомпиляция изменившихся шаблонов
    - Smarty автоматически перекомпилирует изменившиеся шаблоны.
    - Он производит эту проверку при каждом запуске приложения.
    - В конфиге можно поставить $compile_check = false, и тогда
      Smarty не будет производить эту проверку, что повысит быстродействие.

  • Можно настраивать разделители тегов шаблона
    - В конфиге Smarty есть параметры $left_delimiter и $right_delimiter. 
    - С их помощью можно настраивать разделители тегов шаблона.
    - По умолчанию левый = "{", а правый = "}".
    - Однако, можно их заменить, например на:

        Левый = "~~"
        Правый = "~".

  • Наличие конструкций if ... else
    - В тегах Smarty можно использовать конструкции if ... else.
    - Например

        {if $name == 'Fred'}
          111
        {elseif $name == 'Wilma'}
          222
        {else}
          333
        {/if}

  • Наличие конструкций цикла foreach и section
    - В тегах Smarty есть 2 конструкции циклов, section и foreach.
    - В чём же отличия между ними:

      ▪ foreach в Smarty - как foreach в php
        - Работает аналогично.
        - У foreach есть параметр from.
        - В него надо передавать массив, по которому требуется пройтись.          

      ▪ section в Smarty - похожа на for($i=0; $i<count($arr); $i++) {} в php
        - Работает очень похоже.
        - У section есть параметр loop.
        - В него надо передавать массив, по которому надо пройтись.
        - Однако, смысл этого действия лишь в том, что smarty посмотрит
          длину этого массива, и сделает соответствующее кол-во итераций.
        - Внутри section можно получить доступ к текущему индексу.

  • PHP-код можно включать прямо в шаблон
    - Есть возможность вставлять PHP прямо в шаблон.
    - Например:

        {php}
            // подключение php скрипта прямо
              // из шаблона
              include('/path/to/display_weather.php');
        {/php}          

  • Кэширование для ускорения работы display() и fetch()
    
    ▪ Зачем нужно кэширование обработанных шаблонов?
      - Без кэширования Smarty при запросе обрабатывает
        шаблон (все теги в нём, подставляет значения и т.д.),
        и отдаёт результаты этой обработки.
      - На всё это уходит время, в результате чего страница
        загружается дольше, чем могла бы.
      - При использовании кэширования результаты обработки шаблона
        сохраняются в файл, и при новом запросе отдаётся уже
        готовый результат из этого вайла.

    ▪ Настройка кэширования

      ▪ Вкл/Выкл
        - Параметром $caching в конфиге.
        - Плюс можно включить так:

            $smarty->caching = true;

      ▪ Проверить, кэшируется ли указанный шаблон
        - Можно так:

            $is = $smarty->is_cached(<путь к шаблону>);

      ▪ Ограничение времени жизни кэша
        - Настраивается параметром $cache_lifetime.
        - По умолчанию, оно равно 3600 секундам (1 час).
        - Есть возможность присваивать каждому кэшированному
          документу собственное время жизни, 
          см.: http://www.smarty.net/docsv2/ru/variable.cache.lifetime.tpl

      ▪ Обновлять кэш при изменении файлов шаблона
        - Можно включить параметром $compile_check.

      ▪ Отключение кэширования во время отладки
        - Можно осуществить параметром $force_compile.
        - Если он равен true, при каждом запросе кэш будет обновляться.

      ▪ Оставить часть закэшированной страницы динамической
        - Можно с помощью функции insert.
        - Подробнее см.: http://www.smarty.net/docsv2/ru/language.function.insert.tpl

  • Настройка источников шаблонов

    ▪ Указать тип шаблона по умолчанию
      - В параметре $default_resource_type в конфиге.
      - По умолчанию стоит 'file'.
      - Если при подключении шаблона ты не указываешь тип,
        то используется значение из $default_resource_type.

    ▪ Можно указывать тип шаблона при подключении
      - Это надо делать перед путем к шаблону.
      - Например:

          $smarty->display("file:admin/menu.tpl");

    ▪ Какие вообще типы ресурсов существуют?
      - Основным является "file".
      - Для прочих надо писать специальные плагины, 
        и подключать их к Smarty.
      - Эти плагины будут извлекать данные откуда захочешь,
        и возвращать Smarty нужне ему данные.

    ▪ Указать папку с шаблонами по умолчанию
      - Можно в параметре $template_dir.
      - При вызове шаблонов из этой папки, нет необходимости
        указывать тип ресурса, автоматически подставляется
        тип по умолчанию.

    ▪ При вызове шаблона НЕ из папки по умолчанию, обязательно указывать тип ресурса
      - А вообще, шаблоны можно вызывать из любой папки,
        не только из папки по умолчанию.
      - Однако, при этом потребуется в обязательном порядке указывать тип ресурса.


А2. Переменные в Smarty

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение
  # Переменные, назначенные (assigned) из PHP

    ▪ Как передать переменную из PHP в шаблон
    ▪ Как получить в шаблоне переданную из PHP переменную
    ▪ Как получить в шаблоне доступ к эл-м ассоциативного массива
    ▪ Как получить в шаблоне доступ к эл-м индексированного массива
    ▪ Как получить в шаблоне доступ к св-вам объекта

  # Переменные из конфигов
  # Зарезерированные Smarty переменные

    ▪ {$smarty.get.page}            | Значение параметра page из query-string GET-запроса
    ▪ {$smarty.post.page}           | Значение параметра page из query-string POST-запроса
    ▪ {$smarty.cookies.username}    | Значение параметра username из куки ($_COOKIE['username'])        
    ▪ {$smarty.server.SERVER_NAME}  | Значение $_SERVER['SERVER_NAME']
    ▪ {$smarty.env.PATH}            | Значение PATH (переменной из системного окружения)
    ▪ {$smarty.session.id}          | Значение $_SESSION['id']
    ▪ {$smarty.request.username}    | Отображение переменной "username" из смешенных get/post/cookies/server/env
                                    | 
    ▪ {$smarty.now}                 | Текущий timestamp запроса в секундах
    ▪ {$smarty.const}               | Для обращения к константам PHP напрямую
    ▪ {$smarty.capture}             | Результат обработки шаблона, сохранённый конструкцией {capture}..{/capture}
    ▪ {$smarty.config}              | Для обращения к переменным конфига
    ▪ {$smarty.section}             | Для обращения к св-вам циклов section (типа .first, .index и т.д.)
    ▪ {$smarty.foreach}             | Для обращения к св-вам циклов section (типа .first, .index и т.д.)
    ▪ {$smarty.template}            | Имя текущего обрабатываемого шаблона
    ▪ {$smarty.version}             | Версия smarty, с которой был скомпилирован шаблон
    ▪ {$smarty.ldelim}              | Вывести левый ограничитель тега смарти
    ▪ {$smarty.rdelim}              | Вывести правый ограничитель тега смарти

--------------------------------------

> Ссылки

  # Оф. раздел про переменные в Smarty
      http://www.smarty.net/docsv2/ru/language.variables.tpl#language.assigned.variables

> Введение
  - Здесь рассмотрим переменные в Smarty.

> Переменные, назначенные (assigned) из PHP

  • Как передать переменную из PHP в шаблон
    - Это можно сделать с помощью метода assign.
    - Передавать можно переменные любых типов.
    - Пример:

        $smarty->assign('firstname', 'Doug');

  • Как получить в шаблоне переданную из PHP переменную
    - Необходимо сделать это внутри Smarty-тегов.
    - Например:

        <span>{$firstname}</span>

  • Как получить в шаблоне доступ к эл-м ассоциативного массива
    - Например, передаём вот такой массив в шаблон:

        $smarty->assign('arr', ["name"=>["first"=>"Ivan"]], "age"=>14]]);

    - Получить доступ к значениям массива по ключам в шаблоне можно так:

        <span>{$arr.name.first}</span>
        <span>{$arr.age}</span>

  • Как получить в шаблоне доступ к эл-м индексированного массива
    - Например, передаём вот такой массив в шаблон:

        $smarty->assign('arr', ["ivan", [14]]);

    - Получить доступ к значениям массива по индексам в шаблоне можно так:

        <span>{$arr[0]]}</span>
        <span>{$arr[1][0]}</span>

  • Как получить в шаблоне доступ к св-вам объекта
    - Например, передаём какой-нибудь объект в шаблон.
    - Получить доступ к его св-вам можно так:

        <span>{$someobj->prop1}</span>
        <span>{$someobj->prop2}</span>

> Переменные из конфигов
  - Доступ к ним можно получить через $smarty.config
  - Например:

      <span>{$smarty.config.foo}</span>
  
> Зарезерированные Smarty переменные 
  - См.список и описание в оглавлении.


А3. Встроенные в Smarty функции

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение

--------------------------------------

> Ссылки
  
  # Официальная глава документации про встроенные в Smarty функции
      http://www.smarty.net/docsv2/ru/language.builtin.functions.tpl

> Введение
  - Здесь рассмотрим встроенные в Smarty функции.


А4. Пользовательские функции Smarty

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение

--------------------------------------

> Ссылки
  
  # Официальная глава документации про пользовательские функции Smarty
      http://www.smarty.net/docsv2/ru/language.custom.functions.tpl

> Введение
  - Здесь рассмотрим пользовательские функции Smarty.


А5. Отладочная консоль

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение
  # Встроенная функция {debug}

--------------------------------------

> Ссылки

  # Ссылка на оригиальную статью на оф.сайте
      http://www.smarty.net/docsv2/ru/chapter.debugging.console.tpl

> Введение
  - Это небольшая глава про отладочную консоль.

> Встроенная функция {debug}
  - Выводить консоль отладки можно встроенной функцией {debug}.
  - С помощью JS выводится окошко со всеми переменными, переданными шаблону.


А6. Методы класса Smarty

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение

--------------------------------------

> Ссылки
  
  # Официальная глава документации про пользовательские функции Smarty
      http://www.smarty.net/docsv2/ru/api.functions.tpl

> Введение
  - Здесь рассмотрим все методы класса smarty.




В1. Настройки Smarty в dev-версии

--------------------------------------
Подоглавление:

  # Ссылки
  # Введение
  # Настройки Smarty в dev-версии проекта PSW

    ▪ Разделители тегов: ~~ (левый) и ~ (правый)
    ▪ Тип шаблона по умолчанию: "file"
    ▪ Каталог с шаблонами относ. корня: "site\modules"
    ▪ Каталог с кэшем шаблонов относ. корня: "site\libs\smarty\templates_c"
    ▪ Каталог с конфигами: "site\libs\smarty\configs"
    ▪ Включено ли кэширование: нет 
    ▪ Папка для кэша: "site\libs\smarty\cache"
    ▪ Время жизни кэша 3600 секунд == 1 час

--------------------------------------

> Ссылки

> Введение
  - Рассмотрим здесь настройки Smarty в dev-версии проекта PSW.

> Настройки Smarty в dev-версии проекта PSW

  • Разделители тегов: ~~ (левый) и ~ (правый)
    - Указаны в параметрах $left_delimiter и $right_delimiter конфига.
    - Например:

        <span>~~$somevar~</span>

  • Тип шаблона по умолчанию: "file"
    - Указан в параметре $default_resource_type конфига.

  • Каталог с шаблонами относ. корня: "site\modules"
    - Указан в параметре $template_dir конфига.

  • Каталог с кэшем шаблонов относ. корня: "site\libs\smarty\templates_c"
    - Указан в параметре $compile_dir конфига.
    - Важный момент, что эту папку надо заново создавать
      при клонировании проекта из master-репозитория.

  • Каталог с конфигами: "site\libs\smarty\configs"
    - Указан в параметре $config_dir конфига.

  • Включено ли кэширование: нет 
    - Указано в параметре шаблона $caching.

  • Папка для кэша: "site\libs\smarty\cache"
    - Указана в параметре шаблона $cache_dir.

  • Время жизни кэша 3600 секунд == 1 час
    - Указано в параметре шаблона $cache_lifetime.













