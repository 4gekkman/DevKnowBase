////==================================================////
////                                                  ////
////                       gulp                       ////
////                                                  ////
////==================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  // Официальные ресурсы //
  //---------------------//

    # Официальный сайт gulp
        http://gulpjs.com/

    # Официальная документация по gulp 4
        https://github.com/gulpjs/gulp/tree/4.0/docs

    # Набор рецептов
        https://github.com/gulpjs/gulp/tree/4.0/docs/recipes

    # Плагины для gulp
        http://gulpjs.com/plugins/

    # Как написать плагин для gulp
        https://github.com/gulpjs/gulp/tree/4.0/docs/writing-a-plugin

  // Видео //
  //-------//

    # Скринкаст по gulp 4 от Ильи Кантора
        http://learn.javascript.ru/screencast/gulp

    # Плейлист по gulp 3 от LoftBlog
        https://www.youtube.com/playlist?list=PLY4rE9dstrJwXCz1utct9b6Vub9VWQoKo

  // Текст //
  //-------//

    # Приятная сборка frontend проекта (habr)
        https://habrahabr.ru/post/250569/

    # Самые нужные плагины для gulp
        https://habrahabr.ru/post/252745/


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  gulp 4

    А1. Вводная информация
    А2. Установка и запуск задач на gulp




////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Вводная информация

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Что такое gulp?

      - Приложения для NodeJS
      - Официально позиционируется, как
      - По сути является

    # Плагины
    # Vinyl-FS

      - Схема работы
      - Общая информация
      - Метафора

    # Простой наглядный пример использования

  --------------------------------------

  > Ссылки

    # Скринкаст по этой главе
        https://www.youtube.com/watch?time_continue=1&v=uPk6lQoTThE

  > Введение
    - Это глава с общей информацией о gulp 4.
    - В этой методичке описан именно gulp 4-й версии.

  > Что такое gulp?

    # Приложения для NodeJS
      - Представляет собой CLI-приложение для NodeJS.

    # Официально позиционируется, как
      - Streaming build system, или потоковая система сборки.

    # По сути является
      - Инструментом для описания и выполнение произвольного вида задач.
      - В gulpfile.js можно задавать любые задачи.
      - У них есть имя и функция, которая их выполняет.
      - Причём, новые задачи можно задавать, как комбинацию существующих.
      - И сборка проекта является лишь частным случаем таких задач.
      - В целом же, это могут быть любые задачи, не только касающиеся сборки.

  > Плагины
    - Есть много плагинов, позволяющих быстро задать многие востребованные задачи.
    - Они представляют из себя NodeJS-модули для работы с gulp.
    - И устанавливаются стандартным способом с помощью NPM.
    - Чтобы их использовать, надо просто require их в gulpfile.js
    - Посмотреть плагины можно на оф.сайте gulp: http://gulpjs.com/plugins/

  > Vinyl-FS

    # Схема работы

      |-------------|                                          |-------------|
      | File system |                                          | File system |
      |-------------|                                          |-------------|
            ||                                                       /\
            \/                                                       ||
      |------------|  |-------------|  |-------------|         |-------------|
      | Read files |->| Modify file |->| Modify file |-> ... ->| Write files |
      |------------|  |-------------|  |-------------|         |-------------|

    # Общая информация
      - Наличие Vinyl-FS делает gulp очень удобным именно для сборки проекта.
      - В ядре gulp существует виртуальная файловая система Vinyl-FS.
      - Она представляет каждый файл в виде JS-объекта, имеющего путь в ФС и т.д.
      - Эти объекты являются объектами специального класса Vinyl.
      - Представим, что gulp должен пропустить какой-то файл через N плагинов.
      - Он открывает поток для чтения данных (типа stream.Readable) и начинает читать файл.
      - Как нам известно из методички по NodeJS, чтение данных производится по
        кусочкам до 64 кб.
      - Как только 1-й кусочек прочинат, он посылается, как по трубопроводу,
        к 1-му плагину, потом ко 2-му, и т.д.
      - Тоже самое происходит со 2-ым, 3-им и т.д. считанными кусочками.
      - Также, gulp создаёт поток для записи данных (типа stream.Writable),
        и когда 1-й кусочек доходит до него, сразу записывает в указанное место.
      - Тоже самое делает со 2-м, 3-им и так далее кусочком.
      - То есть, изначальный файл может быть ещё не считан до конца,
        а 1-й кусочек уже прошёл через все плагины и записылся на выходе
        в новый файл.

    # Метафора
      - Представим, есть файл, его обработать N плагинами.
      - Gulp отрубает от него кусочки по 64 кб, и бросает в телепорт.
      - Телепорт символизирует из себя те самые N плагинов.
      - Каждый кусочек последовательно проходит через каждый плагин.
      - На выходе появляется сначала обработанный 1-й кусочек.
        За ним 2-й, 3-й и так далее.
      - В конечном счёте, кусочки собираются в итоговый файл.

  > Простой наглядный пример использования

      // 1] Подключить NodeJS-модули
      const gulp = require('gulp');
      const sass = require('gulp-sass');
      const autoprefixer = require('gulp-autoprefixer');

      // 2] Задать 1-ю задачу - обрабатывающую все *.scss файлы в dev
      gulp.task(function sass(){
        return gulp.src('dev/*.scss')       // Создать readable-поток, считывающий данные из dev/*.scss файлов
          .pipe(sass())                     // Обрабатывать данные плагином sass
          .pipe(autoprefixer())             // Обрабатывать данные плагином autoprefixer
          .pipe(gulp.dest('css/styles'));   // Создать writable-поток, записывающий файлы в css/styles
      });

      // 3] Задать 2-ю задачу - слежение за всеми *.scss файлами в dev
      // - Если какой-нибудь из них изменится, запускать серию указанных задач.
      // - В нашем случае, это задача: 'sass'
      gulp.task('default', gulp.series('sass', function(){
        gulp.watch('dev/*.scss', gulp.series('sass'));
      });


А2. Установка и запуск задач на gulp

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Установка gulp

      - Gulp понадобится иметь и локально, и глобально
      - Вариант №1: установить 2 gulp'а
      - Вариант №2: установить только локальный gulp

    # Запуск задач на gulp

      - Простейший пример
      - Можно (но не нужно) не указывать имя задачи, имя функции == имя задачи
      - Можно разбивать название задач на несколько слов
      - Каждая задача должна сообщать о завершении с помощью callback
      - 4 основных способа, как задача сигнализирует о своём завершении
      - Создание новых задач из старых, последовательный / параллельный порядок выполнения
      - Gulp не передаёт данные между задачами

  --------------------------------------

  > Ссылки

    # Скринкаст по этой главе
        https://www.youtube.com/watch?v=xptUdO3GuG8

  > Введение
    - В этой главе рассмотрим установку gulp.
    - А также запуск задач на gulp.

  > Установка gulp

    # Gulp понадобится иметь и локально, и глобально
      - Глобально, чтобы CLI был доступен из любого каталога.
      - Локально, поскольку gulp потребуется подключать через
        require к gulpfile, как модуль.

    # Вариант №1: установить 2 gulp'а
      - Один gulp установить локально.
      - Второй gulp установить глобально.
      - Глобально установить gulp 4 можно так:

          npm install -g gulp#4.0

      - Локально в выбранный каталог, его можно установить так.
      - Сначала создать там package.json (конфиг для NPM):

          npm init      // можно оставить всё по умолчанию

      - Затем установить gulp 4 локально в этот каталог:

          npm install gulpjs/gulp#4.0

      - После этого с gulp можно работать глобально.
      - Например:

          gulp -version

    # Вариант №2: установить только локальный gulp
      - Но в scripts в package.json добавить вручную запуск локального gulp.
      - Чтобы при запуске - gulp - из каталога проекта, запускался указанный скрипт.
      - Итак, сначала надо выбрать каталог, и создтаь там package.json (конфиг для NPM):

          npm init      // можно оставить всё по умолчанию

      - Затем установить gulp 4 локально в этот каталог:

          npm install gulpjs/gulp#4.0

      - Затем открыть package.json, и в "scripts" добавить:

          "gulp": "./node_modules/.bin/gulp"

      - После этого с gulp можно работать через npm run.
      - Например:

          npm run gulp -version

      - Далее будет предполагать, что использован этот вариант установки.

  > Запуск задач на gulp

    # Простейший пример
      - Сначала надо создать gulpfile.js - конфиг для gulp.
      - Он будет представлять из себя обычное NodeJS-приложение.
      - Вот простейший пример кода для этого файла, с простейшей задачей:

          'use strict';

          // 1] Подключить модуль gulp
          const gulp = require('gulp');

          // 2] Создать новую задачу с именем 'hello'
          gulp.task('hello', function(callback){

            // 2.1] Вывести сообщение
            console.log('Hello, world');

            // 2.2] Показать, что задача завершена
            callback();   // Если бы была ошибка, надо было бы передать в её в кач-ве аргумента callback

          });

      - Теперь из терминала можно запустить задачу hello.
      - И будет выведена строка "Hello, world".

          npm run gulp hello

    # Можно (но не нужно) не указывать имя задачи, имя функции == имя задачи
      - В современном gulp можно не указывать имя для task.
      - Если у функции есть имя, оно авто-ки становится именем задачи.
      - Пример - создаём задачу с именем hello:

          gulp.task('hello', function(callback){});   // вариант 1
          gulp.task(function hello(callback){});      // вариант 2

      - Отсюда следует, что можно сделать так:

          gulp.task(hello);
          function hello(){
            // ...
          }

      - Однако, у такого способа запуска задач есть недостаток.
      - Нельзя брать в качесте имени задач зарезервированные слова.
      - К примеру, default является зарезервирвоанным словом.
      - И нельзя сделать так (это не будет работать):

          gulp.task(default);
          function default(){
            // ...
          }

      - Поэтому, лучше всё же придерживаться классического способа определения задач.
      - Где у задачи есть название, и есть анонимная функция:

          gulp.task('hello', function(callback){});

    # Можно разбивать название задач на несколько слов
      - В проекте может быть очень много задач, десятки, сотни, и т.д.
      - Часто хочется каким-то образом сгруппировать эти задачи.
      - Это можно делать, используя префиксы к именам задач.
      - То есть, формировать имя задачи по шаблону:

          [префикс]:[имя задачи]

      - Например, есть у зас задачи, связанные с SASS.
      - Тогда их имена могут быть такие:

          gulp.task('sass:name1', function(callback){});
          gulp.task('sass:name2', function(callback){});
          gulp.task('sass:name3', function(callback){});

    # Каждая задача должна сообщать о завершении с помощью callback
      - Каждая задача в gulp запускается асинхронно.
      - А gulp хотел бы знать, если та или иная задача завершилась.
      - Для этого задача должна возбудить соотв.событие для gulp.
      - Это можно сделать через функцию callback из 1-го аргумента
        функции-задачи.
      - Пример:

          // 1] Задача, завершающаяся успешно
          gulp.task('sass:name1', function(callback){
            callback();   // Сообщить, что задача завершена успешно
          });

    # 4 основных способа, как задача сигнализирует о своём завершении

      'use strict';

      const gulp = require('gulp');

      // 1] Сигнализирует о завершении с помощью callback()
      gulp.task('hello', function(callback){
        console.log('hello');
        callback();
      });

      // 2] Возвращает объект класса Promise
      gulp.task('example:promise', function(){
        return new Promise((resolve, reject) => {
          // ...
          resolve('result');
        });
      });

      // 3] Возвращает поток
      gulp.task('example:stream', function(){
        return require('fs').createReadStream(__filename);  // Прочитанные данные никуда не передаются
      });

      // 4] Порождает новый дочерний процесс, и возвращает его
      gulp.task('example:process', function(){
        return require('child_process').spawn('ls', ['node_modules'], {stdio: 'inherit'});
      });

    # Создание новых задач из старых, последовательный / параллельный порядок выполнения
      - Например, можно создать задачу, выполняющую 4 задачи из примера выше.
      - Причём, можно настроить порядок выполнения:

        1) Последовательно
          - Для этого надо использовать метод series.
          - Пример:

              gulp.task('example', gulp.series('hello', 'example:promise', 'example:stream', 'example:process'));

        2) Параллельно
          - Для этого надо использовать метод parallel.
          - Пример:

              gulp.task('example', gulp.parallel('hello', 'example:promise', 'example:stream', 'example:process'));

    # Gulp не передаёт данные между задачами
      - Что бы ни вернула задача.
      - Следующая задача этого не получит.



