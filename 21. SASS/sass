////==================================================////
////                                                  ////
////                       SASS                       ////
////                                                  ////
////==================================================////
////                      ////
////         Ссылки       ////
////                      ////
////======================////


  // Официальные ресурсы //
  //---------------------//

    # Официальный сайт SASS
        http://sass-lang.com/

    # Оф.документация по SASS
        http://sass-lang.com/documentation/file.SASS_REFERENCE.html        

  // Видео //
  //-------//



  // Текст //
  //-------//


////==================================================////
////                         ////
////        Оглавление       ////
////                         ////
////=========================////


  # А.  SASS

    А1. Вводная информация
    А2. Установка и компиляция SASS
    А3. Справочник по SASS CLI
    А4. Экспресс-обзор функционала SASS

    А5. Расширения для CSS
    А6. Комментарии
    А7. SassScript
    А8. @-правила и директивы
    А9. Условные операции и циклы
    А10. Миксины
    А11. Функции

  # Б.  Рецепты и наработки

    Б1. ...


////==================================================////
////                         ////
////        Содержание       ////
////                         ////
////=========================////


А1. Вводная информация

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Вводная информация про SASS

      - Как расшифровывается SASS
      - Определение SASS
      - SASS компилируется в CSS
      - У SASS есть 2-ва синтаксиса: старый (sass) и новый (scss)

        ▪ Старый синтаксис (sass)
        ▪ Новый синтаксис (scss)
        ▪ Возможна конвертация sass <---> scss

      - Особенности SCSS

        ▪ Любой валидный CSS является валидным SCSS (но не наоборот).     
        ▪ Расширения языка: переменные, вложенность, миксины, ...      
        ▪ Много доп.функций для манипуляции цветом и другими значениями
        ▪ Условные операторы и циклы
        ▪ Красиво отформатированные CSS-файлы на выходе

  --------------------------------------

  > Ссылки

  > Введение
    - Это глава с общей информацией о SASS.

  > Вводная информация про SASS

    # Как расшифровывается SASS
      - Syntactically Awesome StyleSheets.
      - Синтаксичски-фантастические таблицы стилей.

    # Определение SASS
      
      SASS - метаязык на основе CSS, предназначенный для
      увеличения уровня абстрации CSS кода и упрощения
      файлов CSS.

    # SASS компилируется в CSS
      - Использовать sass-файлы прямо в браузере нельзя.
      - Надо сперва скомпилировать их в css-файлы.
      - Библиотека SASS выдаёт на выходе 100% валидный CSS.

    # У SASS есть 2-ва синтаксиса: старый (sass) и новый (scss)

      • Старый синтаксис (sass)
        - Этот синтаксис НЕ является дополнением к синтаксису CSS.
        - В нём не используются {}, а используется индентация для вложенных блоков.
        - Инструкции отделяются друг от друга не ;, а символом новой строки.
        - Он является менее многословным, но и менее понятным обывателю, чем SCSS.
        - Синтаксис sass имеет весь тот же самый функционал, что и scss.
        - Однако некоторая часть этого функционала имеет совершенно отличный синтаксис.
        - Файлы с этим синтаксисом используют расширения .sass
        - В данной методичке синтаксис sass рассмотрен НЕ будет.

      • Новый синтаксис (scss)
        - SCSS расшифровывается, как Sassy (нахальный) CSS.
        - Синтаксис SCSS является дополнением к синтаксису CSS.
        - Следовательно, любой валидный CSS является валидным SCSS (но не наоборот).
        - Именно этот синтаксис рассмотрен в данной методичке.
        - Везде под SASS здесь будет иметься в виду синтаксис scss.
        - Файлы с этим синтаксисом используют расширения .scss

      • Возможна конвертация sass <---> scss
        - Библиотека SASS имеет инструменты для этого.
        - Например, это можно сделать CLI-командой sass-convert.

    # Особенности SCSS

      • Любой валидный CSS является валидным SCSS (но не наоборот).     
      • Расширения языка: переменные, вложенность, миксины, ...      
      • Много доп.функций для манипуляции цветом и другими значениями
      • Условные операторы и циклы
      • Красиво отформатированные CSS-файлы на выходе


А2. Установка и компиляция SASS

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Некоторые способы компиляции SASS

      - Способ #1: CLI-приложение SASS

        ▪ CLI-приложение на Ruby
        ▪ Чем может быть полезно это CLI
        ▪ Установка CLI SASS на Ubuntu 14.04

      - Способ #2: gulp + плагин gulp-sass

        ▪ gulp-sass --> node-sass --> libsass
        ▪ Как пользоваться gulp-sass

  --------------------------------------
  
  > Ссылки

    # Оф.инструкция по установке CLI SASS
        http://sass-lang.com/install

    # Видео-инструкция по установке CLI SASS на Ubuntu 14.04
        https://www.youtube.com/watch?v=ziI1nezM3jk

    # Ссылки на: gulp-sass --> node-sass --> libsass
        https://github.com/dlmanning/gulp-sass
        https://github.com/sass/node-sass
        https://github.com/sass/libsass

  > Введение
    - Вообще-то для использования SASS ничего устанавливать не обязательно.
    - Ты можешь взять и написать SASS-код в любом текстовом файле.
    - Но его всё равно потребуется скомпилировать в CSS-файл для использования в браузере.
    - Возникает резонный вопрос, а как, черт возьми, произвести компиляцию?
    - Этот вопрос и раскрывается в данной главе.

  > Некоторые способы компиляции SASS

    # Способ #1: CLI-приложение SASS

      • CLI-приложение на Ruby
        - У SASS есть оф.CLI-приложение, написанное на Ruby.

      • Чем может быть полезно это CLI
        - В нём можно в интерактивном режиме поиграться с SASS.
        - Или же быстренько в терминале скомпилировать SASS в CSS.
        - Ещё у него есть watch-демон для экспресс-автоматизации сборки.
        - Но это так, поиграться. Серьёзные мальчики и девочки используют gulp.

      • Установка CLI SASS на Ubuntu 14.04

        sudo apt-get install -y ruby-full
        sudo gem install sass

    # Способ #2: gulp + плагин gulp-sass

      • gulp-sass --> node-sass --> libsass
        - Есть такой плагин для gulp: "gulp-sass".
        - Он внутри использует npm-модуль: "node-sass".
        - Последний же использует С++-реализацию компилятора SASS: "libsass".

      • Как пользоваться gulp-sass
        - Подробно это описано в моей методичке по gulp.
        - Всё просто, через плагин gulp-sass пускают поток с scss-файлами.
        - После прохождения через плагин, на выходе мы получаем css-файлы. 


А3. Справочник по SASS CLI

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение
    # Общее описание CLI
    # Опции команды sass

      • Общие опции

        -I                | Specify a Sass import path
        -r                | Require a Ruby library before running Sass
        --compass         | Make Compass imports available and load project co figuration
        -t                | Output style. Can be nested (default), compact, co pressed, or expanded
        -h                | Show help message
        -v                | Print the Sass version

      • Watching and Updating

        --watch           | Watch files or directories for changes.
                            The location of the generated CSS can be set using a colon:
                              sass --watch input.sass:output.css
                              sass --watch input-dir:output-dir                  
        --poll            | Check for file changes manually, rather than relying on the OS
        --update          | Compile files or directories to CSS.
                            Locations are set like --watch.
        --force           | Recompile every Sass file, even if the CSS file is newer
        --stop-on-erorr   | If a file fails to compile, exit immediately.
                            Only meaningful for --watch and --update.

      • Ввод и вывод

        --scss            | Use the CSS-superset SCSS syntax
        --sourcemap=TYPE  | How to link generated output to the source files.
                            auto (default): relative paths where possible, file URIs elsewhere
        -s                | Read input from standard input instead of an input file.
                            This is the default if no input file is specified
        -E                | Specify the default encoding for input files.
                            Use Unix-style newlines in written files
        -g                | Emit output that can be used by the FireSass Fireb g plugin
        -l                | Emit comments in the generated CSS indicating the corresponding source line

      • Прочее

        -i                            | Run an interactive SassScript shell
        -c                            | Just check syntax, don't evaluate
        --precision NUMBER_OF_DIGITS  | How many digits of precision to use when output in decimal numbers
        --cache-location PATH         | The path to save parsed Sass files. Defaults to .sass-cache
        -C                            | Don't cache parsed Sass files
        --trace                       | Show a full Ruby stack trace on error
        -q                            |  Silence warnings and status messages during compilation


  --------------------------------------  

  > Ссылки

    # Оф.документация по SASS
        http://sass-lang.com/documentation/file.SASS_REFERENCE.html

  > Введение
    - SASS CLI довольно компактен, в этой главе справочник по нему.

  > Общее описание CLI
    - Весь CLI представляет из себя 1-ну команду sass.
    - Эта команда имеет набор опций.
    - Поэтому справочник представляет из себя оный по опциям команды sass.

  > Опции команды sass
    - См.оглавление.


А4. Экспресс-обзор функционала SASS

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Препроцессинг

      - Зачем нужны препроцессоры
      - Препроцессинг SASS-файлов в терминале

    # Переменные в SASS

      - О переменных в SASS
      - Пример переменных в SASS

    # Иерархия и вложенность в SASS

      - Про иерархию и вложенность в SASS
      - Избегай чрезмерно глобокой иерархии
      - Пример применения иерархии в SASS

    # Фрагменты и импорт в SASS

      - Фрагменты в SASS

        ▪ Общая информация про фрагменты в SASS
        ▪ Префиксинг имён файлов-фрагментом символом _

      - Импорт в SASS

        ▪ Общая информация про импорт в SASS
        ▪ При импортировании в имени фрагмента не надо указывать префикс _
      
      - Пример фрагментов и импорта в SASS

    # Миксины (функции) в SASS

      - Про миксины (функции) в SASS
      - Пример миксин в SASS

        ▪ Определение миксины с помощью @mixin          
        ▪ Использование миксины с помощью @include          

    # Наследование в SASS

      - Про наследование в SASS
      - Пример наследования в SASS

    # Операторы в SASS

      - Про операторы в SASS
      - Пример использования операторов в SASS


  --------------------------------------

  > Ссылки

    # Оф.экспресс обзор функционала SASS
        http://sass-lang.com/guide

  > Введение
    - В этой главе поверхностный обзор функционала SASS.
    - Всего понемножку.

  > Препроцессинг

    # Зачем нужны препроцессоры
      - В CSS пока нет многих облегчающих жизнь вещей, которые есть в SASS.
      - Без этих вещей с большим кол-вом CSS намного труднее работать.
      - Его трудно поддерживать, изменять, улучшать, повторно использовать.
      - Вот почему профессионалам приходится использовать препроцессоры CSS.


    # Препроцессинг SASS-файлов в терминале
      - Можно запустить демон из SASS CLI.
      - Он будет следить за .scss-файлами в указанной папке.
      - При изменении, компилировать и класть их в указанную папку.
      - Например:

          sass --watch app/sass:public/stylesheets

  > Переменные в SASS

    # О переменных в SASS
      - В переменных SASS можно хранить информацию.
      - Можно хранить CSS-значения, цвета, шрифты.
      - Для переменных в SASS используется $, как в PHP.
      - Ниже есть пример в стиле "до" и "после".

    # Пример переменных в SASS

      • Файл "styles.scss"

        $font-stack:    Helvetica, sans-serif;
        $primary-color: #333;

        body {
          font: 100% $font-stack;
          color: $primary-color;
        }

      • Файл "styles.css"

        body {
          font: 100% Helvetica, sans-serif;
          color: #333;
        }        

  > Иерархия и вложенность в SASS

    # Про иерархию и вложенность в SASS
      - Например, в HTML есть иерархия и вложенность.
      - А в стандартном CSS она отсутствует.
      - SASS же обеспечивает иерархию и вложенностью.

    # Избегай чрезмерно глобокой иерархии
      - При компиляции в CSS иерархия отражается в именах классов.
      - При чрезмерно глубокой иерархии эти имена будут оч.длинные.
      - Ими просто будет трудно и неудобно пользоваться.

    # Пример применения иерархии в SASS

      • Файл "styles.scss"

          nav {
            ul {
              margin: 0;
              padding: 0;
              list-style: none;
            }

            li { display: inline-block; }

            a {
              display: block;
              padding: 6px 12px;
              text-decoration: none;
            }
          }

      • Файл "styles.css"

          nav ul {
            margin: 0;
            padding: 0;
            list-style: none;
          }

          nav li {
            display: inline-block;
          }

          nav a {
            display: block;
            padding: 6px 12px;
            text-decoration: none;
          }

  > Фрагменты и импорт в SASS

    # Фрагменты в SASS
      
      • Общая информация про фрагменты в SASS
        - Ты можешь создавать файлы-фрагменты-scss.
        - В них можно класть небольшие фрагменты scss-кода.
        - Чтобы в дальнейшем повторно использовать их.
        - Импортируя файлы-фрагменты в другие scss-файлы.

      • Префиксинг имён файлов-фрагментом символом _
        - Имя файла фрагмента строится по шаблону:

            _[имя].scss

        - Это даёт понять компилятору SASS, что перед ним файл-фрагмент.
        - И он не компилирует его, как отдельный SASS-файл.

    # Импорт в SASS
      
      • Общая информация про импорт в SASS
        - SASS позволяет импортировать одни .scss-файлы в другие.
        - В CSS тоже есть подобный функционал, но с одним недостатком.
        - Для каждого импортированного файла создаётся отдельный HTTP-запрос.
        - Реализация в SASS же лишена этого недостатка.
        - Ведь при импортирование всё это объединяется в 1 css-файл.
        - Для импортирования используется директива @import.

      • При импортировании в имени фрагмента не надо указывать префикс _
        - Это наглядно продемонстрировано в примере ниже.

    # Пример фрагментов и импорта в SASS

      • Файл "_partial.scss"

          html,
          body,
          ul,
          ol {
            margin: 0;
            padding: 0;
          }

      • Файл "styles.scss"

          @import 'partial';

          body {
            font: 100% Helvetica, sans-serif;
            background-color: #efefef;
          }

      • Файл "styles.css"

          html, body, ul, ol {
            margin: 0;
            padding: 0;
          }

          body {
            font: 100% Helvetica, sans-serif;
            background-color: #efefef;
          }         

  > Миксины (функции) в SASS

    # Про миксины (функции) в SASS
      - Миксины позволяют сгруппировать набор CSS-инструкций.
      - Миксину можно вызвать по имени после определения.
      - Строка вызова будет заменена в css на содержимое миксины.
      - По большому счёту, миксины сильно смахивают на функции.
      - В примере ниже определяется миксина border-radius.
      - Она содержит 4-ре инструкции с разными вендорными префиксами.
      - Типа, еслиб небыло автопрефиксеров, можно былоб делать так.
      - Но, всем понятно, это здесь чисто для примера.

    # Пример миксин в SASS

      • Файл "styles.scss"

        ▪ Определение миксины с помощью @mixin

          @mixin border-radius($radius) {
            -webkit-border-radius: $radius;
               -moz-border-radius: $radius;
                -ms-border-radius: $radius;
                    border-radius: $radius;
          }

        ▪ Использование миксины с помощью @include

          .box { @include border-radius(10px); }

      • Файл "styles.css"            

          .box {
            -webkit-border-radius: 10px;
            -moz-border-radius: 10px;
            -ms-border-radius: 10px;
            border-radius: 10px;
          }

  > Наследование в SASS

    # Про наследование в SASS
      - Это одна из самых полезных функций в SASS.
      - Один селектор может наследовать св-ва у другого.
      - Это можно осуществлять с помощью директивы @extend
      - Наследующий селектор применяет @extend внутри себя.
      - В качестве аргумента указывается наследуемый селектор.
      - Ниже приведёт наглядный пример.

    # Пример наследования в SASS

      • Файл "styles.scss"

          .message {
            border: 1px solid #ccc;
            padding: 10px;
            color: #333;
          }

          .success {
            @extend .message;
            border-color: green;
          }

          .error {
            @extend .message;
            border-color: red;
          }

          .warning {
            @extend .message;
            border-color: yellow;
          }        

      • Файл "styles.css" 

          .message, .success, .error, .warning {
            border: 1px solid #cccccc;
            padding: 10px;
            color: #333;
          }

          .success {
            border-color: green;
          }

          .error {
            border-color: red;
          }

          .warning {
            border-color: yellow;
          }

  > Операторы в SASS

    # Про операторы в SASS
      - SASS позволяет использовать операторы + - * / %
      - Ниже наглядный пример.

    # Пример использования операторов в SASS

      • Файл "styles.scss"

          .container { width: 100%; }

          article[role="main"] {
            float: left;
            width: 600px / 960px * 100%;
          }

          aside[role="complimentary"] {
            float: right;
            width: 300px / 960px * 100%;
          }

      • Файл "styles.css" 

          .container {
            width: 100%;
          }

          article[role="main"] {
            float: left;
            width: 62.5%;
          }

          aside[role="complimentary"] {
            float: right;
            width: 31.25%;
          }


А5. Расширения для CSS

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Вложенные CSS-правила

      - Про иерархию и вложенность в SASS
      - Избегай чрезмерно глобокой иерархии
      - Пример применения иерархии в SASS      

    # Ссылка на правило-родителя с помощью &

      - Про &
      - Пример использования &
      - Пример использования & с суффиксом

    # Вложенные CSS-свойства

      - Про вложенные CSS-свойства
      - Примеры использования вложенных CSS-свойств

    # Селекторы-плейсхолдеры %

      - SASS поддерживает спец.типы селекторов - "селекторы-плейсхолдеры"
      - Зачем нужны селекторы-плейсхолдеры
      - Пример использования селектора-плейсхолдера

  --------------------------------------

  > Ссылки

    # Соответствующий раздел оф.документации
        http://sass-lang.com/documentation/file.SASS_REFERENCE.html#css_extensions

  > Введение
    - В этой главе рассмотрим несколько SASS-расширений для CSS.

  > Вложенные CSS-правила

    # Про иерархию и вложенность в SASS
      - Например, в HTML есть иерархия и вложенность.
      - А в стандартном CSS она отсутствует.
      - SASS же обеспечивает иерархию и вложенностью.

    # Избегай чрезмерно глобокой иерархии
      - При компиляции в CSS иерархия отражается в именах классов.
      - При чрезмерно глубокой иерархии эти имена будут оч.длинные.
      - Ими просто будет трудно и неудобно пользоваться.

    # Пример применения иерархии в SASS

      • Файл "styles.scss"

          nav {
            ul {
              margin: 0;
              padding: 0;
              list-style: none;
            }

            li { display: inline-block; }

            a {
              display: block;
              padding: 6px 12px;
              text-decoration: none;
            }
          }

      • Файл "styles.css"

          nav ul {
            margin: 0;
            padding: 0;
            list-style: none;
          }

          nav li {
            display: inline-block;
          }

          nav a {
            display: block;
            padding: 6px 12px;
            text-decoration: none;
          }

  > Ссылка на правило-родителя с помощью &

    # Про &
      - Это ссылка на родительский селектор.
      - & может быть лишь 1-ым символом селектора.
      - К & можно добавлять суффикс.

    # Пример использования &

      • Файл "styles.scss"

          a {
            font-weight: bold;
            text-decoration: none;
            &:hover { text-decoration: underline; }
            body.firefox & { font-weight: normal; }
          }

      • Файл "styles.css"

          a {
            font-weight: bold;
            text-decoration: none; }
            a:hover {
              text-decoration: underline; }
            body.firefox a {
              font-weight: normal; }

    # Пример использования & с суффиксом

      • Файл "styles.scss"

          #main {
            color: black;
            &-sidebar { border: 1px solid; }
          }

      • Файл "styles.css"

          #main {
            color: black; }
            #main-sidebar {
              border: 1px solid; }

  > Вложенные CSS-свойства

    # Про вложенные CSS-свойства
      - В CSS есть малое число св-в в "пространствах имён".
      - Например - font-family, font-size, font-weight - в пр.имён "font".
      - SASS позволяет работать с ними по вложенному сценарию (см.пример).

    # Примеры использования вложенных CSS-свойств

      • Файл "styles.scss"

          .funky {
            font: {
              family: fantasy;
              size: 30em;
              weight: bold;
            }
          }

          .funky {
            font: 20px/24px fantasy {
              weight: bold;
            }
          }          

      • Файл "styles.css"      

          .funky {
            font-family: fantasy;
            font-size: 30em;
            font-weight: bold; }

          .funky {
            font: 20px/24px fantasy;
              font-weight: bold;
          }            

  > Селекторы-плейсхолдеры %   

    # SASS поддерживает спец.типы селекторов - "селекторы-плейсхолдеры"
      - Они типа . и # селекторов, только используется символ %
      - Они предназначены для использования с директивой @extend.
      - Без связки с @extend эти селекторы никак ни на что не влияют.

    # Зачем нужны селекторы-плейсхолдеры
      - Они пригодятся, если:

        • Мы хотим создать новый класс.
        • Но не хотим, чтобы он попал в итоговый CSS.
        • Но хотим наследовать от него в других классах

    # Пример использования селектора-плейсхолдера

      • Файл "styles.scss"

        #context a%extreme {
          color: blue;
          font-weight: bold;
          font-size: 2em;
        }    

        .notice {
          @extend %extreme;
        }

      • Файл "styles.css"     

        #context a.notice {
          color: blue;
          font-weight: bold;
          font-size: 2em; }


А6. Комментарии

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

    # Однострочные комментарии //
    # Многострочные комментарии /* */

  --------------------------------------

  > Ссылки

    # Соответствующий раздел оф.документации
        http://sass-lang.com/documentation/file.SASS_REFERENCE.html#comments

  > Введение
    - В этой короткой главе рассмотрим комментарии в SASS.

  > Однострочные комментарии //
    - Они не присутствуют в итоговом CSS.
    - Пример:

      • Файл "styles.scss"

          // These comments are only one line long each.
          // They won't appear in the CSS output,
          // since they use the single-line comment syntax.
          a { color: green; }

      • Файл "styles.css"  

          a { color: green; }      

  > Многострочные комментарии /* */
    
    # Они присутствуют в итоговом CSS
      - Сабж.

    # Если 1-ая буква коммента ! , коммент остаётся даже в сжатом варианте
      - Имеется в виду, даже в сжатом варианте итогового CSS.

    # Пример использования многострочных комментарием  

      • Файл "styles.scss"

          /* This comment is
           * several lines long.
           * since it uses the CSS comment syntax,
           * it will appear in the CSS output. */
          body { color: black; }    

      • Файл "styles.css"  

          /* This comment is
           * several lines long.
           * since it uses the CSS comment syntax,
           * it will appear in the CSS output. */
          body {
            color: black; }

    # Переменные в многострочных комментариях также работают

      • Файл "styles.scss"

          $version: "1.2.3";
          /* This CSS is generated by My Snazzy Framework version #{$version}. */

      • Файл "styles.css"           

          /* This CSS is generated by My Snazzy Framework version 1.2.3. */


А7. SassScript

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

  --------------------------------------

  > Ссылки

    # Соответствующий раздел оф.документации
        http://sass-lang.com/documentation/file.SASS_REFERENCE.html#sassscript

  > Введение
    - 

А8. @-правила и директивы

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

  --------------------------------------

  > Ссылки

    # Соответствующий раздел оф.документации
        http://sass-lang.com/documentation/file.SASS_REFERENCE.html#directives 

  > Введение
    - 

А9. Условные операции и циклы

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

  --------------------------------------

  > Ссылки

    # Соответствующий раздел оф.документации
        http://sass-lang.com/documentation/file.SASS_REFERENCE.html#control_directives__expressions

  > Введение
    - 

А10. Миксины

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

  --------------------------------------

  > Ссылки

    # Соответствующий раздел оф.документации
        http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins

  > Введение
    - 

А11. Функции

  --------------------------------------
  Подоглавление:

    # Ссылки
    # Введение

  --------------------------------------

  > Ссылки

    # Соответствующий раздел оф.документации
        http://sass-lang.com/documentation/file.SASS_REFERENCE.html#function_directives

  > Введение
    - 


